|- IHCENC.mac - By IHC385
|- Automatic Enchanter bot - 
|- Version 2.0
|- Updated: 4/25/2019
|- Credit: Noobhax0r, Maskoi, Ctaylor, Treehuggindruid, Devstator. A lot of ideas were borrowed and modified from their macros
#turbo 80
#include IHCMercs\ihcsubs.inc
#include IHCMercs\ihcenchmez.inc
|-#include IHCMercs\ihcxtenchmez.inc
#include IHCMercs\ihcenchutil.inc
#include IHCMercs\events.inc
#warning
#Chat group
#Chat tell
#Chat raid
#bind SingleBanish		/banish
#bind AEBanish			/aebanish
Sub Main
	/delay ${Math.Rand[3]}
	/doevents flush
	/declare MacroName       		string outer IHCENC
	/declare MacroPath       		string outer IHCMercs\IHCENC
	/declare IHCVersion       		string outer 2.0
	/declare IniFileName     		string outer ${MacroPath}_${EverQuest.Server}_${Me.CleanName}.ini	

	/call EnchSetup
	/call setup_plugins
	/call VarSetup
	/call AliasSetup
	/call SetEncSpells
	/call LoadSpellBar

	/call WelcomeMsg
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}
	/if (${alliance_check_group[FALSE]}) /varset UseAlliance TRUE
	/call setup_skill_melee FALSE
:mainloop
	/call ModeSet
	/if (${Mode}==0) /call Travel
	/if (${Mode}==1) /call ManualPullCamping
	/if (${Mode}==2) /call ManualRunAndGun
	/if (${Mode}==3) /call ManualPullCamping
	/if (${Mode}==4) /call AFKRunAndGun
	/if (${Mode}==5) /call DoEvent
/goto :mainloop
/return
|----------------------------------------------------------------------------
|- SUB: ManualPullCamping
|----------------------------------------------------------------------------
Sub ManualPullCamping
	/call MakeCamp
    /call RemoveTravelBuffs  

	/while (${Mode}==1 || ${Mode}==3) {			
		/call check_state FALSE
		|/call check_resources FALSE "Gather Mana" spell ${Me.ID} 60
		|/call check_resources FALSE "Azure Mind Crystal" alt ${Me.ID} 40
		|/call check_resources FALSE "${ChestItemName}" item ${Me.ID} 80

		/call MoveToCamp ${PullAutoCampX} ${PullAutoCampY} ${PullAutoCampZ} ${AutoCampRadius}
|		/call BuffCheck
		/call group_buffs
		/call self_buffs
|		/if (${UseCharmPet} && ${Me.XTarget}>=${CharmMinMobs}) /call CharmCheck 
|		/if (${DoMed}) /call AutoMed
|		/call CheckMana

|		/if (${Me.XTarget}) /assist ${Group.MainAssist.Name}
|		/call PetAttack
|		/if (((${MezOn} && (${Me.XTarget}>=${MezStartCount} || ${MezMobCount})) || ${MezWait}) && (${Me.SpellReady[${MezSpell}]} || (${MezAETimer}==0 && ${Me.SpellReady[${MezAESpell}]}) || ${Me.Casting.ID}!=${Spell[${MezSpell}].ID})) /call DoMezStuff
|		/if ((${Me.PctAggro}>80 || ${Me.XTarget[2].PctAggro}>80 || ${Me.XTarget[3].PctAggro}>80)) /call ManageAggro
|		/if ((${Me.XTarget}>=${BurnMobCount} || ${Target.Named} || ${BurnAlways} || ${burnnow}) && (${Me.AltAbilityReady[Calculated Insanity]} || ${Me.AltAbilityReady[Improved Twincast]}) && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) /call BurnRoutine
		/call get_target
|		/if (${Me.XTarget[1].ID} && ${Target.Distance}<${AssistRange}) /call AANDisc
		/call combat
|		/call CheckMana
		
|-		/if (${Target.ID} && ${Target.ID}!=${Me.ID} && ${Math.Distance[${Target.Y},${Target.X},${Target.Z}:${PullAutoCampY},${PullAutoCampX},${PullAutoCampZ}]}<(${AssistRange}+25)) /call UseItemsCommon

|		/if (${UseModRods}) /call ClickModRoD
		
|		/if ((${Me.Poisoned.ID} || ${Me.Diseased.ID} || ${Me.Cursed.ID} || ${Me.Corrupted.ID} || ${Me.Snared.ID} || ${Me.Mezzed.ID} || ${Me.Charmed.ID}) && ${BegTimer}==0 && ${DoGroupBeg}) /call BegForCure
		/call misc
		/doevents
	}
/return
|----------------------------------------------------------------------------
|- SUB: ManualRunAndGun
|----------------------------------------------------------------------------
Sub ManualRunAndGun
	/if (${MakeCamp.Status.Equal[ON]}) /makecamp off
	/call RemoveTravelBuffs
	
	/while (${Mode}==2) {
		/if (${Me.Hovering}) /call DeathSub
		/if (${Me.State.Equal[FEIGN]}) /stand

		/if (!${Me.XTarget[1].ID} && !${Me.Moving}) /varset RunAndGunMedTimer 7s
		/if (!${Me.Moving} && !${Me.XTarget[1].ID} && !${Me.Casting.ID} && ${RunAndGunMedTimer}==0) /call IllusionCheck
		/if (!${Me.Moving} && !${Me.XTarget[1].ID} && !${Target.ID} && !${Me.Sitting} && ${RunAndGunMedTimer}==0) /sit
		/if (${Me.PctMana}>=30 && !${Me.Casting.ID} && !${Me.XTarget[1].ID} && !${Me.Moving} && ${RunAndGunMedTimer}==0) /call BuffCheck
		/if (${Me.PctMana}>=30 && !${Me.Casting.ID} && !${Me.XTarget[1].ID} && !${Me.Moving} && ${RunAndGunMedTimer}==0) /call BuffGroup
		
		/if (${Me.XTarget[1].ID} && ${Spawn[${Group.Leader.Name}].Distance}<40) /call CastersEngage

		/if ((${Me.PctAggro}>80 || ${Me.XTarget[2].PctAggro}>80 || ${Me.XTarget[3].PctAggro}>80)) /call ManageAggro
		/if (${Me.XTarget[1].ID} && (${DoTash} || ${DoSlow} || ${StripBuffs} || ${DoCripple} || ${DoBlurr}) && ${Target.Distance}<${AssistRange} && (!${MezWait}) && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight} && ${Target.Type.Equal[NPC]} && ${Target.PctHPs}<=${AutoDebuffAt}) /call DebuffMobs
		/if (${Me.XTarget[1].ID} && ${Target.Distance}<${AssistRange}) /call AANDisc
		/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.Distance}<${AssistRange} && ${DoDPS} && !${MezWait}) /call Combatdps
		/call CheckMana
		/if (${UseModRods}) /call ClickModRoD
		/call PetAttack
		/if (!${Me.XTarget[1].ID} || ${Spawn[${Group.Leader.Name}].Distance}>40) /call Travel

		/if (${Target.Type.Equal[Corpse]}) /target clear

		/doevents
	}
/return
|----------------------------------------------------------------------------
|- SUB: debuff_xtarget
|---------------------------------------------------------------------------- 
Sub debuff_xtarget
	/declare x int local 1

	/if (!${Me.XTarget}) /return

	/for x 1 to ${Me.XTarget}

		/target id ${Me.XTarget[${x}].ID}
		/delay 1s ${Me.XTarget[${x}].ID} == ${Target.ID}
		
		/delay 1s

		/if (${Target.Distance} > 200) /return
		/if (!${Target.Type.Equal[NPC]}) /return
		
		/if (!${Target.Tashed.ID} && !${Target.Buff[${TashSpell}].ID}) {
			/if (${validate_cast[FALSE, spell, "${TashSpell}", ${Target.ID}]}) /call core_cast2 "${TashSpell}" spell ${Target.ID} FALSE
		}
		/call mez_xtarget

		/if (!${Target.Buff[${DoTSpell3}].ID} && ${Target.Named}) {
			/if (${validate_cast[FALSE, spell, "${DoTSpell3}", ${Target.ID}]}) /call core_cast2 "${DoTSpell3}" spell ${Target.ID} FALSE
		}
	
		/if (!${Target.Buff[Mental Contortion].ID} && ${Target.Named}) {
			/if (${validate_cast[FALSE, alt, "Mental Contortion", ${Target.ID}]}) /call core_cast2 "Mental Contortion" alt ${Target.ID} FALSE
		}
		
		| How will you handle the AA?
		/if (!${Target.Slowed.ID} && !${Target.Buff[${SlowSpell}].ID}) {
			
			/if (${validate_cast[FALSE, spell, "${SlowSpell}", ${Target.ID}]}) {
				/if (${verbose${Me.Class.ShortName}}) /docommand /dgt Slowing \ar ${Target.Name} \ax with =>> \ag ${SlowSpell} \ax <<=
				/call core_cast2 "${SlowSpell}" spell ${Target.ID} FALSE
				/call check_cast_events "${SlowSpell}" CAST_IMMUNE ${Target.ID}
			}
		}
		/call mez_xtarget

		/if (!${Target.Mezzed.ID} && !${Target.Buff[${MezSpell}].ID}) {
			
			/if (${validate_cast[FALSE, spell, "${SingleStunSpell1}", ${Target.ID}]}) {
				/if (${verbose${Me.Class.ShortName}}) /docommand /dgt Slowing \ar ${Target.Name} \ax with =>> \ag ${SingleStunSpell1} \ax <<=
				/call core_cast2 "${SingleStunSpell1}" spell ${Target.ID} FALSE
				/call check_cast_events "${SingleStunSpell1}" CAST_IMMUNE ${Target.ID}
			}
		}
		/call mez_xtarget

		/if (!${Target.Crippled.ID} && !${Target.Buff[${CrippleSpell1}].ID} && !${Target.Buff[Mental Contortion].ID}) {
			
			/if (${validate_cast[FALSE, spell, "${CrippleSpell1}", ${Target.ID}]}) {
				/if (${verbose${Me.Class.ShortName}}) /docommand /dgt Slowing \ar ${Target.Name} \ax with =>> \ag ${CrippleSpell1} \ax <<=
				/call core_cast2 "${CrippleSpell1}" spell ${Target.ID} FALSE
			}
		}
		/call mez_xtarget

|			/if (${StripBuffs} && (!${Me.Casting.ID}) && ${Target.Beneficial.ID} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
|				/if (${Me.AltAbilityReady[${StripBuffSpell}]}) {
|					/alt act ${Me.AltAbility[${StripBuffSpell}].ID}
|					/delay 10 ${Window[CastingWindow].Open}
|					/delay 10 !${Me.Casting.ID}
|				} else /if (${Me.SpellReady[${StripBuffSpell}]}) {
|					/call CastSpell "${StripBuffSpell}" ${autotargetid} dbf
|				}
|			}
|			/if (${DoBlurr} && ${Me.PctAggro}>=${BlurrAggroPct}) /call ManageAggro "BlrFlg"

|			/if (${DoTash} && ${Me.SpellReady[${TashSpell}]} && !${Target.Tashed.ID} && ${Cast.Status.Equal[I]} && ${Me.CurrentMana}>${Spell[${TashSpell}].Mana}) {
|				/call CastSpell "${TashSpell}" ${Target.ID} dbf
|				/delay 16
|			}
|			/if (${DoSlow} && ${Me.AltAbilityReady[Slowing Helix]} && !${Target.Slowed.ID} && !${Me.Casting.ID} && !${Target.Buff[Turgur's Insects].ID}) {
|				/alt act ${Me.AltAbility[Slowing Helix].ID}
|				/delay 10 ${Window[CastingWindow].Open}
|				/delay 10 !${Me.Casting.ID}
|			} else /if (${DoSlow} && ${Me.SpellReady[${SlowSpell}]} && !${Target.Slowed.ID} && !${Me.Casting.ID} && !${Target.Buff[Turgur's Insects].ID}) {
|				/call CastSpell "${SlowSpell}" ${Target.ID} dbf
|			}
|			/if (${DoBlurr} && ${Me.PctAggro}>=${BlurrAggroPct}) /call ManageAggro "BlrFlg"
|		/delay 5s !${Me.Casting.ID}
		/delay 1s
	/next x
/return
|----------------------------------------------------------------------------
|- SUB: mez_xtarget
|---------------------------------------------------------------------------- 
Sub mez_xtarget
	/declare x				 	int local 1
	/declare numberOfSpawn 	 	int local 0
	/declare closestMezzTarget 	int local 0

	| Is there something to mez?
	/if (!${Me.XTarget}) /return
	/if (${Me.XTarget} < 2) /return

	| How many mobs are there?
	/if (${SpawnCount[npc targetable radius 100 zradius 60]} > 1 && ${Me.XTarget} > 1) {
		
		/for x 1 to ${Me.XTarget}

			| If xtarget is not mezzed, add it to count
			/if (${If[${Select[${Me.XTarget[${x}].Animation},110,26,32,71,72,111]}, 0, 1]} == 1) {
				/varcalc numberOfSpawn ${numberOfSpawn}+1
			}

		/next x
		
		| If there are more than 1 mobs counted then aoe mez
		/if (${numberOfSpawn} > 1) {
			/varset closestMezzTarget ${SpawnSort[1,asc,PathLength,npc targetable radius 100 zradius 60].ID}
			/if (${validate_cast[FALSE, spell, "${MezAESpell}", ${closestMezzTarget}]}) {
				/if (${verbose${Me.Class.ShortName}}) /docommand /dgt AoE mezzing with =>> \ag ${MezAESpell} \ax <<=
				/call core_cast2 "${MezAESpell}" spell ${closestMezzTarget} FALSE
			}
		}
	}

	| Loop through xtarget if we should mezz adds, even if we just did aoe mezz
	/for x 1 to ${Me.XTarget}

		| If target is too far away then skip
		/if (${Me.XTarget[${x}].Distance} > 200) /continue

		| If the xtarget is already mezzed then skip
		/if (${If[${Select[${Me.XTarget[${x}].Animation},110,26,32,71,72,111]}, 0, 1]} == 0) /continue

		| Query MA and MT on what is currently being killed
		/call Gquery ${Group.MainAssist.Name.Lower} "Target.ID" "MATargetID" "int"
		/echo MA Target is ${MATargetID}
		/call Gquery ${Group.MainTank.Name.Lower} "Target.ID" "MTTargetID" "int"
		/echo MT Target is ${MTTargetID}

		| If xtarget is being targetted by MA or MT then skip
		/if (${Me.XTarget[${x}].ID} == ${MATargetID} || ${Me.XTarget[${x}].ID} == ${MTTargetID}) /continue

		| If not then target it
		/target id ${Me.XTarget[${x}].ID}
		/delay 1s ${Me.XTarget[${x}].ID} == ${Target.ID}
		
		/delay 1s

		| If target is not tashed then tash
		/if (!${Target.Tashed.ID} && !${Target.Buff[${TashSpell}].ID}) {
			/if (${validate_cast[FALSE, spell, "${TashSpell}", ${Target.ID}]}) /call core_cast2 "${TashSpell}" spell ${Target.ID} FALSE
		}

		| If target is not mezzed then mez
		/if (!${Target.Mezzed.ID} && !${Target.Buff[${MezSpell}].ID} && ${mezzImmuneID} != ${Target.ID}) {
			/if (${validate_cast[FALSE, spell, "${MezSpell}", ${Target.ID}]}) {
				/if (${verbose${Me.Class.ShortName}}) /docommand /dgt Mezzing \ar ${Target.Name} \ax with =>> \ag ${MezSpell} \ax <<=
				/call core_cast2 "${MezSpell}" spell ${Target.ID} FALSE
				/call check_cast_events "${MezSpell}" CAST_IMMUNE ${Target.ID}
			}
		}

		/delay 1s

	/next x
	/if (${Defined[MATargetID]}) /deletevar MATargetID
	/if (${Defined[MTTargetID]}) /deletevar MTTargetID
/return
|----------------------------------------------------------------------------
|- SUB: AANDisc
|---------------------------------------------------------------------------- 
Sub AANDisc
	
|-Defensive AA's for Name Mobs or Low HP on MA
	/if (${Me.AltAbilityReady[Glyphy Spray]} && ((${Target.Named} && ${Target.Level}>${Me.Level}) || ${Target.Level}>(${Me.Level}+3) || (${Group.Member[${assistname}]${TnKCond}PctHPs}<45 && ${Group.Member[${assistname}]${TnKCond}PctHPs}>5))) {
		/alt act ${Me.AltAbility[Glyphy Spray].ID}
		/delay 10
	}
	/if (${Me.AltAbilityReady[Reactive Rune]} && ((${Target.Named} && ${Target.Level}>${Me.Level}) || ${Target.Level}>(${Me.Level}+3) || (${Group.Member[${assistname}]${TnKCond}PctHPs}<45 && ${Group.Member[${assistname}]${TnKCond}PctHPs}>5))) {
		/alt act ${Me.AltAbility[Reactive Rune].ID}
		/delay 10
	}
|-Constant Use AA's
	/if (${Me.AltAbilityReady[Focus of Arcanum]}) {
		/alt act ${Me.AltAbility[Focus of Arcanum].ID}
		/delay 10
	}
/return
|----------------------------------------------------------------------------
|- SUB: combat
|---------------------------------------------------------------------------- 
Sub combat

	| Before debuffing and nuking check if we have to mezz
	/call mez_xtarget

	| Before nuking check if we have to debuff
	/call debuff_xtarget
	
	| Have we assisted MA?
	/call get_target

	| Do we have a valid target?
	/if (!${validate_combat[FALSE]}) /return

	| Start dpsing
	/if (${validate_cast[FALSE, spell, "${DichoSpell}", ${Target.ID}]}) /call core_cast2 "${DichoSpell}" spell ${Target.ID} FALSE

	/if (!${Target.Mezzed.ID} && !${Target.Buff[${MezSpell}].ID} && !${immuneSet.Contains[${Target.ID}]}) {
		/if (${validate_cast[FALSE, spell, "${SingleStunSpell1}", ${Target.ID}]}) {
			/if (${verbose${Me.Class.ShortName}}) /docommand /dgt Stunning \ar ${Target.Name} \ax with =>> \ag ${SingleStunSpell1} \ax <<=
			/call core_cast2 "${SingleStunSpell1}" spell ${Target.ID} FALSE
			/call check_cast_events "${SingleStunSpell1}" CAST_IMMUNE ${Target.ID}
		}
	}

	/call mez_xtarget

	/if (!${Me.Buff[Improved Twincast].ID} && !${Target.Buff[${Drown}].ID}) {
		/if (${validate_cast[FALSE, spell, "${Drown}", ${Target.ID}]}) /call core_cast2 "${Drown}" spell ${Target.ID} FALSE
	}

	/if (${validate_cast[FALSE, spell, "Chromatic Haze", ${Target.ID}]}) /call core_cast2 "Chromatic Haze" alt ${Target.ID} FALSE

	/if (${validate_cast[FALSE, spell, "${MindNukeMain}", ${Target.ID}]}) /call core_cast2 "${MindNukeMain}" spell ${Target.ID} FALSE
	
	/call mez_xtarget

	/if (${validate_cast[FALSE, spell, "${MindNukeSub}", ${Target.ID}]}) /call core_cast2 "${MindNukeSub}" spell ${Target.ID} FALSE

/return
|----------------------------------------------------------------------------
|- SUB: BurnRoutine
|---------------------------------------------------------------------------- 
Sub BurnRoutine
	/if (${Me.AltAbilityReady[Illusions of Grandeur]}) {
		/alt act ${Me.AltAbility[Illusions of Grandeur].ID}
		/delay 10
	}
	/if (${Me.AltAbilityReady[Fundament: Third Spire of Enchantment]}) {
		/alt act ${Me.AltAbility[Fundament: Third Spire of Enchantment].ID}
		/delay 10
	} 
	/if (${Me.AltAbilityReady[Improved Twincast]}) {
		/alt act ${Me.AltAbility[Improved Twincast].ID}
		/delay 10
	}
	/if (${Me.AltAbilityReady[Forceful Rejuvenation]} && ${Me.Buff[Improved Twincast].ID}) {
		/if (${Me.SpellReady[${MindNukeMain}]} && ${Cast.Status.Equal[I]} && ${Me.CurrentMana}>${Spell[${MindNukeMain}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
			/call CastSpell "${MindNukeMain}" ${Target.ID} brn
			/delay 16
		}
		/if (${Me.AltAbilityReady[Calculated Insanity]} && (!${Me.Casting.ID}) && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
			/alt act ${Me.AltAbility[Calculated Insanity].ID}
			/delay 10 ${Window[CastingWindow].Open}
			/delay 20 !${Window[CastingWindow].Open}
		}
		/if (${Me.SpellReady[${MindNukeSub}]} && ${Cast.Status.Equal[I]} && ${Me.CurrentMana}>${Spell[${MindNukeSub}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
			/call CastSpell "${MindNukeSub}" ${Target.ID} brn
			/delay 16
		}
		/alt act ${Me.AltAbility[Forceful Rejuvenation].ID}
		/delay 10 !${Me.Casting.ID}
		/if (${Me.SpellReady[${MindNukeMain}]} && ${Cast.Status.Equal[I]} && ${Me.CurrentMana}>${Spell[${MindNukeMain}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
			/call CastSpell "${MindNukeMain}" ${Target.ID} brn
			/delay 16
		}
		/if (${Me.SpellReady[${MindNukeSub}]} && ${Cast.Status.Equal[I]} && ${Me.CurrentMana}>${Spell[${MindNukeSub}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
			/call CastSpell "${MindNukeSub}" ${Target.ID} brn
			/delay 16
		}	
	} else /if (${Me.AltAbilityReady[Calculated Insanity]}) {
		/alt act ${Me.AltAbility[Calculated Insanity].ID}
		/delay 10
	}
/return
|----------------------------------------------------------------------------
|- SUB: self_buffs
|---------------------------------------------------------------------------- 
Sub self_buffs

	/declare CastCheck			int local 0

	/if (${Me.XTarget}) /return

	
	/if (!${Me.Buff[${SelfHPBuff}].ID} && (${Spell[${SelfHPBuff}].Stacks}) && ${Me.Book[${SelfHPBuff}]} && ${Me.CurrentMana}>${Spell[${SelfHPBuff}].Mana} && ${Me.AltAbilityReady[Orator's Unity]}) {
		/alt act ${Me.AltAbility[Orator's Unity].ID}
	} else /if (!${Me.Buff[${SelfHPBuff}].ID} && !${Me.AltAbilityReady[Orator's Unity]}) {
		/if (${validate_cast[FALSE, spell, "${SelfHPBuff}", ${Me.ID}]}) {
			/call core_cast2 "${SelfHPBuff}" spell ${Me.ID} FALSE
			/varset CastCheck 1
		}
	} 

	/if (!${Me.Pet.ID} && ${FindItem[=Tiny Dagger].ID}) {
		/if (${validate_cast[FALSE, spell, "${PetSpell}", ${Me.ID}]}) {
			/call core_cast2 "${PetSpell}" spell 0 FALSE
			/varset CastCheck 1
		}
	}

	/if (${Me.Pet.ID} && !${Me.Pet.Buff[${PetBuffSpell}]}) {
		/if (${validate_cast[FALSE, spell, "${PetBuffSpell}", ${Me.Pet.ID}]}) {
			/call core_cast2 "${PetBuffSpell}" spell ${Me.Pet.ID} FALSE
			/varset CastCheck 1
		}
	}

	/if (!${Me.Buff[${MezBuff}].ID}) {
		/if (${validate_cast[FALSE, spell, "${MezBuff}", ${Me.ID}]}) {
			/call core_cast2 "${MezBuff}" spell ${Me.ID} FALSE
			/varset CastCheck 1
		}
	} 

	/if (!${Me.Buff[${SelfRune1}].ID}) {
		/if (${validate_cast[FALSE, spell, "${SelfRune1}", ${Me.ID}]}) {
			/call core_cast2 "${SelfRune1}" spell ${Me.ID} FALSE
			/varset CastCheck 1
		}
	} 

	/if (!${Me.Buff[${SelfRune2}].ID}) {
		/if (${validate_cast[FALSE, spell, "${SelfRune2}", ${Me.ID}]}) {
			/call core_cast2 "${SelfRune2}" spell ${Me.ID} FALSE
			/varset CastCheck 1
		}
	} 
	
|				/call SpellQueue "${PetSpell}" ${Me.ID}
|				/varset CastCheck 1
|				/delay 5
|	} else /if (${UsePet} && !${UseCharmPet} && ${Me.Pet.ID} && ${Cast.Status.Equal[I]} && ${Me.Book[${PetBuffSpell}]} && ${Me.CurrentMana}>${Spell[${PetBuffSpell}].Mana} && !${Me.Pet.Buff[${PetBuffSpell}]}) {
|				/call SpellQueue "${PetBuffSpell}" ${Me.Pet.ID}
|				/varset CastCheck 1
|	else /if (!${Me.Buff[${GroupMana}].ID} && ${Cast.Status.Equal[I]} && (${Spell[${GroupMana}].Stacks}) && ${Me.Book[${GroupMana}]} && ${Me.CurrentMana}>${Spell[${GroupMana}].Mana}) {
||				/call SpellQueue "${GroupMana}" ${Me.ID}
|				/varset CastCheck 1
|	} else /if (!${Me.Buff[${GroupHaste}].ID} && ${Cast.Status.Equal[I]} && (${Spell[${GroupHaste}].Stacks}) && ${Me.Book[${GroupHaste}]} && ${Me.CurrentMana}>${Spell[${GroupHaste}].Mana}) {
|				/call SpellQueue "${GroupHaste}" ${Me.ID}
|				/varset CastCheck 1
|	} else /if (!${Me.Buff[${MezBuff}].ID} && ${Cast.Status.Equal[I]} && (${Spell[${MezBuff}].Stacks}) && ${Me.Book[${MezBuff}]} && ${Me.CurrentMana}>${Spell[${MezBuff}].Mana}) {
|				/call SpellQueue "${MezBuff}" ${Me.ID}
|				/varset CastCheck 1 
|	} else /if (!${Me.Buff[Eldritch Rune].ID} && !${Me.Buff[${SelfRune1}].ID} && ${Cast.Status.Equal[I]} && (${Spell[${SelfRune1}].Stacks}) && ${Me.Book[${SelfRune1}]} && ${Me.CurrentMana}>${Spell[${SelfRune1}].Mana}) {
|				/call SpellQueue "${SelfRune1}" ${Me.ID}
|				/varset CastCheck 1
|	} else /if (!${Me.Buff[${SelfRune2}].ID} && ${Cast.Status.Equal[I]} && (${Spell[${SelfRune2}].Stacks}) && ${Me.Book[${SelfRune2}]} && ${Me.CurrentMana}>${Spell[${SelfRune2}].Mana}) {
|				/call SpellQueue "${SelfRune2}" ${Me.ID}
|				/varset CastCheck 1
|	} else /if (!${Me.Buff[${GroupSpellShield}].ID} && ${Cast.Status.Equal[I]} && (${Spell[${GroupSpellShield}].Stacks}) && ${Me.Book[${GroupSpellShield}]} && ${Me.CurrentMana}>${Spell[${GroupSpellShield}].Mana} && ${UseSpellRune}) {
|				/call SpellQueue "${GroupSpellShield}" ${Me.ID}
|				/varset CastCheck 1 
|	} else /if (!${Me.Buff[${GroupDoTShield}].ID} && ${Cast.Status.Equal[I]} && (${Spell[${GroupDoTShield}].Stacks}) && ${Me.Book[${GroupDoTShield}]} && ${Me.CurrentMana}>${Spell[${GroupDoTShield}].Mana} && ${UseDoTRune}) {
|				/call SpellQueue "${GroupDoTShield}" ${Me.ID}
|				/varset CastCheck 1
|	} else /if (!${Me.Buff[${GroupAuspiceBuff}].ID} && ${Cast.Status.Equal[I]} && (${Spell[${GroupAuspiceBuff}].Stacks}) && ${Me.Book[${GroupAuspiceBuff}]} && ${Me.CurrentMana}>${Spell[${GroupAuspiceBuff}].Mana} && ${UseAuspice}) {
|				/call SpellQueue "${GroupAuspiceBuff}" ${Me.ID}
||				/varset CastCheck 1
|	} else /if (!${Me.Buff[Veil of Mindshadow].ID} && ${Cast.Status.Equal[I]} && (${Spell[Veil of Mindshadow].Stacks}) && ${Me.AltAbilityReady[Veil of Mindshadow]}) {
|				/alt act 791
|				/delay 5
|				/varset CastCheck 1
|	} else /if (${UsePet} && !${UseCharmPet} && !${Me.Pet.ID} && ${Cast.Status.Equal[I]} && ${Me.Book[${PetSpell}]} && ${Me.CurrentMana}>${Spell[${PetSpell}].Mana}) {
|				/call SpellQueue "${PetSpell}" ${Me.ID}
|				/varset CastCheck 1
|				/delay 5
|	} else /if (${UsePet} && !${UseCharmPet} && ${Me.Pet.ID} && ${Cast.Status.Equal[I]} && ${Me.Book[${PetBuffSpell}]} && ${Me.CurrentMana}>${Spell[${PetBuffSpell}].Mana} && !${Me.Pet.Buff[${PetBuffSpell}]}) {
|				/call SpellQueue "${PetBuffSpell}" ${Me.Pet.ID}
|				/varset CastCheck 1
|	} else /if (!${Me.Gem[${spellmisc}].Name.Equal[${miscspellremem}]} && ${spellrememtimer}==0 && ${miscspellremem.NotEqual[NULL]}) {
|				/call LoadSpellGem "${miscspellremem}" ${spellmisc}
|	}
	/if (${CastCheck}) {
		/call LoadSpellBar
		/if (${verbose${Me.Class.ShortName}}) /docommand /dgt \aw Done Buffing
	}

/return
|----------------------------------------------------------------------------
|- SUB: group_buffs
|---------------------------------------------------------------------------- 
Sub group_buffs
	/declare _count			int local 0
	/declare CastCheck			int local 0

	/if (${Me.XTarget}) /return

	/for _count 0 to ${Group}
		/if (${Group.Member[${_count}].Distance} < 100 && !${Group.Member[${_count}].OtherZone} && (!${Me.Casting.ID})) {
			
			/if (${Me.XTarget}) {
				/call LoadSpellBar
				/return
			}
			/if (${Mode} !=3 ) /return

			/if (!${Me.Book[${GroupMana}]}) {
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Buff[${SingleMana}].ID" "tmpbuffid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Spell[${SingleMana}].Stacks" "tmpstackcheck" "bool"
				/if (!${tmpbuffid} && ${tmpstackcheck} && !${Select[${Group.Member[${_count}].Class.ShortName},WAR,ROG,BER,MNK]}) {
					/if (${validate_cast[FALSE, spell, "${SingleMana}", ${Group.Member[${_count}].ID}]}) {
						/call core_cast2 "${SingleMana}" spell ${Group.Member[${_count}].ID} FALSE
						/delay 10
						/varset CastCheck 1 
					}
				}
			}

			/if (!${Me.Book[${GroupHaste}]} && ${Select[${Group.Member[${_count}].Class.ShortName},WAR,ROG,BER,MNK,SHD,PAL]}) {
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Spell[${SingleHaste}].ID" "tmpbuffid" "bool"
				/if (!${tmpbuffid}) {
					/if (${validate_cast[FALSE, spell, "${SingleHaste}", ${Group.Member[${_count}].ID}]}) {
						/call core_cast2 "${SingleHaste}" spell ${Group.Member[${_count}].ID} FALSE
						/delay 10
						/varset CastCheck 1
					}
				}
			}
			
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Buff[${GroupHaste}].ID" "tmpbuffid" "int"
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Spell[${GroupHaste}].Stacks" "tmpstackcheck" "bool"
			/if (!${tmpbuffid} && ${tmpstackcheck} && !${Select[${Group.Member[${_count}].Class.ShortName},CLR,SHM,NEC,ENC,WIZ,MAG]}) {
				/if (${validate_cast[FALSE, spell, "${GroupHaste}", ${Group.Member[${_count}].ID}]}) {
					/call core_cast2 "${GroupHaste}" spell ${Group.Member[${_count}].ID} FALSE
					/delay 10
					/varset CastCheck 1
				}
			}
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Buff[${GroupMana}].ID" "tmpbuffid" "int"
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Spell[${GroupMana}].Stacks" "tmpstackcheck" "bool"
			/if (!${tmpbuffid} && ${tmpstackcheck} && !${Select[${Group.Member[${_count}].Class.ShortName},WAR,ROG,BER,MNK]}) {
				/if (${validate_cast[FALSE, spell, "${GroupMana}", ${Group.Member[${_count}].ID}]}) {
					/call core_cast2 "${GroupMana}" spell ${Group.Member[${_count}].ID} FALSE
					/delay 10
					/varset CastCheck 1
				}
			}
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Buff[${ProcBuff}].ID" "tmpbuffid" "int"
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Spell[${ProcBuff}].Stacks" "tmpstackcheck" "bool"
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Buff[Illusion Benefit Greater Jann].ID" "jaanbuffid" "int"
			/if (!${tmpbuffid} && !${jaanbuffid} && ${tmpstackcheck} && ${Select[${Group.Member[${_count}].Class.ShortName},BRD,BST,BER,MNK,PAL,RNG,ROG,SHD,WAR]}) {
				/if (${validate_cast[FALSE, spell, "${ProcBuff}", ${Group.Member[${_count}].ID}]}) {
					/call core_cast2 "${ProcBuff}" spell ${Group.Member[${_count}].ID} FALSE
					/delay 10
					/varset CastCheck 1
				}
			}
		}
	/next _count

	|- Delete variable's
	/if (${Defined[tmpbuffid]}) /deletevar tmpbuffid
	/if (${Defined[tmpstackcheck]}) /deletevar tmpstackcheck
	/if (${Defined[jaanbuffid]}) /deletevar jaanbuffid
	/if (${Window[SpellBookWnd]}) /book
	/if (${CastCheck}) {
		/call LoadSpellBar
		/if (${verbose${Me.Class.ShortName}}) /docommand /dgt \aw Done Buffing
	}
/return
|----------------------------------------------------------------------------
|- SUB: ManageAggro
|---------------------------------------------------------------------------- 
Sub ManageAggro(string OptFlag)
	/if (!${Me.Buff[Eldritch Rune].ID} && !${Me.Buff[${SelfRune1}].ID} && ${Cast.Status.Equal[I]} && (${Spell[Eldritch Rune].Stacks}) && ${Me.AltAbilityReady[Eldritch Rune]}) {
		/alt act 173
		/delay 5 
	}
	/if (${OptFlag.Equal[BlrFlg]} && ${Me.PctAggro}>=${BlurrAggroPct}) {
		/if (${DoBlurr} && ${Me.SpellReady[${BlurSpell}]} && (!${Me.Casting.ID}) && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
			/call CastSpell "${BlurSpell}" ${autotargetid} dbf
		}
	}
	/if (${Me.TargetOfTarget.ID}==${Me.ID} && ${Target.ID} && ${Target.ID}!=${Me.ID} && ${Target.ID}==${Me.GroupAssistTarget.ID}) {
		/if (${Me.PctHPs}<=30 && ${Me.AltAbilityReady[Self Stasis]}) {
			/call AANow ${Me.AltAbility[Self Stasis].ID} ${Target.ID}
		} else /if (${Me.PctHPs}<=30 && ${Me.AltAbilityReady[Dimensional Instability]}) {
			/call AANow ${Me.AltAbility[Dimensional Instability].ID} ${Target.ID}
		} else /if (${Me.PctHPs}<=40 && ${Me.AltAbilityReady[Beguiler's Directed Banishment]}) {
			/call AANow ${Me.AltAbility[Beguiler's Directed Banishment].ID} ${Target.ID}
		} else /if (${Me.PctHPs}<=50 && ${Me.AltAbilityReady[Beguiler's Banishment]} && ${SpawnCount[npc radius 20]} > 2) {
			/call AANow ${Me.AltAbility[Beguiler's Banishment].ID} ${Target.ID}
		} else /if (${Me.PctHPs}<=60 && ${Me.AltAbilityReady[Doppelganger]}) {
			/call AANow ${Me.AltAbility[Doppelganger].ID} ${Target.ID}
		} else /if (${Me.PctHPs}<=60 && ${Me.AltAbilityReady[Phantasmal Opponent]}) {
			/call AANow ${Me.AltAbility[Phantasmal Opponent].ID} ${Target.ID}
		} else /if (${Me.PctHPs}<=80 && ${Me.AltAbilityReady[Dimensional Shield]}) {
			/call AANow ${Me.AltAbility[Dimensional Shield].ID} ${Target.ID}
		}
	}
	/if (${Target.ID}==${Me.GroupAssistTarget.ID} && (${Me.PctAggro}>=90 || ${Me.TargetOfTarget.ID}==${Me.ID})) {
		/if (${Me.AltAbilityReady[Arcane Whisper]}) {
			/call AANow ${Me.AltAbility[Arcane Whisper].ID} ${Target.ID}
		} else /if (${Me.AltAbilityReady[Silent Casting]}) {
			/call AANow ${Me.AltAbility[Silent Casting].ID} ${Target.ID}
		}
	}
/return
|----------------------------------------------------------------------------
|- SUB: Handle Buff Requests
|----------------------------------------------------------------------------
|-Sub Event_Chat(string ChatType,string ChatSender,string ChatText)
|-	/if (${Spawn[pc ${ChatSender}].ID} && ${ChatType.Equal[tell]}) /mqlog ${ChatSender} -- ${ChatText}
|-	/if (${Spawn[${ChatSender.Right[-2].Left[-1]}].ID}) {
|-		/if (${Select[${ChatText},voice,crack,clarity,kei]} && (${Spawn[${ChatSender.Right[-2].Left[-1]}].Distance}<100)) /call SpellQueue "${SingleMana}" ${Spawn[${ChatSender.Right[-2].Left[-1]}].ID}
|-		/if (${Select[${ChatText},haste,speed,zing]} && (${Spawn[${ChatSender.Right[-2].Left[-1]}].Distance}<100)) /call SpellQueue "${SingleHaste}" ${Spawn[${ChatSender.Right[-2].Left[-1]}].ID}
|-	}
|-/return
|----------------------------------------------------------------------------
|- SUB: CharmCheck
|----------------------------------------------------------------------------
Sub CharmCheck
	/declare nArray int local
	/declare nArray2 int local
	/if (${CharmDelay}) /return
	/if (${CharmedID} && !${Spawn[ID ${CharmedID}].ID}) /varset CharmedID 0
	/if (${OldCharmedID} && !${Spawn[ID ${OldCharmedID}].ID}) /varset OldCharmedID 0
	
	/if (${UseCharmPet} && !${Me.Pet.ID} && ${CharmSpell1.NotEqual[NULL]} && ${Me.SpellReady[${CharmSpell1}]}) {
		/if (${CharmedID} && ${Spawn[${CharmedID}].ID} && ${Spawn[${CharmedID}].Type.Equal[NPC]} && ${Spawn[${CharmedID}].Distance}<${Math.Calc[${Spell[${CharmSpell1}].Range}-25]}) {
			/squelch /target ID ${CharmedID}
			/delay 1s ${Target.ID}==${CharmedID}
		} else /if (${OldCharmedID} && ${Spawn[${OldCharmedID}].ID} && ${Spawn[${OldCharmedID}].Type.Equal[NPC]} && ${Spawn[${OldCharmedID}].Distance}<${Math.Calc[${Spell[${CharmSpell1}].Range}-25]}) {
			/squelch /target ID ${OldCharmedID}
			/delay 1s ${Target.ID}==${OldCharmedID}
		} else {
			/call MezRadar
			/if (${MezCheckElements}==0) /return
			/if (${MezCheckElements}>=${CharmMinMobs}) {
				/for nArray 1 to ${MezCheckElements}
					/if (${Defined[CCTarget${nArray}Info]}) {
						/if (${Spawn[${CCTarget${nArray}Info.Arg[1,|]}].ID} && ${Spawn[${CCTarget${nArray}Info.Arg[1,|]}].ID}!=${Me.GroupAssistTarget.ID} && ${Spawn[${CCTarget${nArray}Info.Arg[1,|]}].Distance}<=${AssistRange} && ${CCTarget${nArray}Info.Arg[2,|]}>=${CharmMinLvl} && ${CCTarget${nArray}Info.Arg[2,|]}<=${CharmMaxLvl}) {
							/squelch /target ID ${CCTarget${nArray}Info.Arg[1,|]}
							/varset CharmedID ${CCTarget${nArray}Info.Arg[1,|]}
						}
					}
				/next nArray
				/delay 1s ${Target.ID}==${CharmedID}
			}
		}
		/if (${Target.ID}==${CharmedID} && ${Target.Type.Equal[NPC]}) {
			/if (${CharmPreStun} && ${SingleStunSpell1.NotEqual[NULL]} && ${Me.SpellReady[${SingleStunSpell1}]}) {
				/call CastSpell "${SingleStunSpell1}" ${Target.ID} Charm
			}
			/if (${CharmPreTash} && ${TashSpell.NotEqual[NULL]} && ${Me.SpellReady[${TashSpell}]}) {
				/call CastSpell "${TashSpell}" ${Target.ID} Charm
			}
			/call CastSpell "${CharmSpell1}" ${Target.ID} Charm
			/if (${CastResult.Equal[CAST_SUCCESS]}) {
				/echo Successfully Charmed ${Me.Pet.CleanName} | ${Me.Pet.ID}
			} else {
				/echo Failed to Charm ${Spawn[${CharmedID}].CleanName} | ${CharmedID}
				/varset OldCharmedID ${CharmedID}
				/varset CharmedID 0
			}
		}
	} else /if (${MezCheckElements}>0) {
		/for nArray2 1 to ${MezCheckElements}
			/if (${Defined[CCTarget${nArray2}Info]}) {
				/if (${CCTarget${nArray2}Info.Arg[3,|].Find[corpse]} || !${Spawn[${CCTarget${nArray2}Info.Arg[1,|]}].ID} || ${Spawn[${CCTarget${nArray2}Info.Arg[1,|]}].Type.Equal[Corpse]}) /call RemoveCCTarget ${nArray2}
				/if (${Spawn[${CCTarget${nArray2}Info.Arg[1,|]}].ID}==${Me.Pet.ID}) /call RemoveCCTarget ${nArray2}
			}
		/next nArray2
	}
/return 