|**
TODO:
	Refracture all classes like the ench was.
	Finish class spell lines and rotations.
	Aura combat cast.
	All to core_cast2.
	Fix names of warrior discs.

	spawn	RaidAssistTarget[#]	Current raid assist target (1-3)
	spawn	RaidMarkNPC[#]	Current raid marked NPC (1-3)
	int	SecondaryPctAggro	Secondary Percentage aggro
spawn	SecondaryPctAggroPlayer	spawninfo for secondary aggro player
**|

#turbo 80
#warning

#define DEBUG /echo

#include IHCMercs\subs.inc
#include IHCMercs\events.inc
#include IHCMercs\config.inc

#include IHCMercs\warutil.inc
#include IHCMercs\war.inc

#include IHCMercs\shdutil.inc
#include IHCMercs\shd.inc

#include IHCMercs\berutil.inc
#include IHCMercs\ber.inc

#include IHCMercs\wizutil.inc
#include IHCMercs\wiz.inc

#include IHCMercs\magutil.inc
#include IHCMercs\mag.inc

#include IHCMercs\bstutil.inc
#include IHCMercs\bst.inc

#include IHCMercs\brdutil.inc
#include IHCMercs\brd.inc

#include IHCMercs\encutil.inc
#include IHCMercs\enc.inc

#include IHCMercs\druutil.inc
#include IHCMercs\dru.inc

#include IHCMercs\clrutil.inc
#include IHCMercs\clr.inc

#include IHCMercs\shmutil.inc
#include IHCMercs\shm.inc

#include IHCMercs\mnkutil.inc
#include IHCMercs\mnk.inc

#Chat group
#Chat tell
#Chat raid

Sub Main
	/delay ${Math.Rand[30]}
	
	/doevents flush
	/call setup_plugins
	/call var_setup

|-Cursor ID
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}

	/call ${Me.Class.ShortName.Lower}_setup
	/call ${Me.Class.ShortName.Lower}_abilities
	/call ${Me.Class.ShortName.Lower}_rotations
	

	/call WelcomeMsg

	/if (${alliance_check_group[FALSE]}) /varset UseAlliance TRUE
	/if (${Group.Puller.ID} == ${Me.ID}) {
		/delay 3s
		/call pre_pull_group_healer_spells
	}
	/call misc

 :mainloop
	/call set_mode
	/if (${Mode} == 0) /call Travel
	/if (${Mode} == 1) /call ManualPullCamping
	/if (${Mode} == 2) /call ManualRunAndGun
	/if (${Mode} == 3) /call AFKRadiusCamping
	/if (${Mode} == 4) /call AFKRunAndGun
	/if (${Mode} == 5) /call DoEvent
	/if (${Mode} == 7) /call mode_posse_afk
/goto :mainloop 
/return
|----------------------------------------------------------------------------
|- SUB: AFKRadiusCamping 
|---------------------------------------------------------------------------- 
Sub AFKRadiusCamping
	/call setup_skill_melee FALSE
    /call MakeCamp
    /call RemoveTravelBuffs
	/target clear
	/if (${Group.Puller.ID} == ${Me.ID}) /call ignore_mobs_to_pull
	/if (${Me.Pet.ID}) /pet guard

	/while (${Mode} == 3) {

		| /delay 1s
		| DEBUG CYCLE START

		/if (!${PowerLevel}) {
			/call move_to_camp
		} else /if (${PowerLevel}) {
			/if (${Math.Distance[${Me.Y},${Me.X},${Me.Z}:${pullAutoCampY},${pullAutoCampX},${pullAutoCampZ}]} > 70) /call move_to_camp
		}
		
		/if (!${PowerLevel}) {
			/call afk_pull
		} else /if (${PowerLevel}) {
			/if (${Select[${Me.Class.ShortName},MNK]}) {
				/if (${npcRadiusCheck} != 1) /varset npcRadiusCheck 1
				/call chain_pull
			}
		}

		/call check_state FALSE

		/if (!${PowerLevel}) {
			/if (${Select[${Me.Class.ShortName},ENC,WIZ,MAG,MNK,ROG,BER,BST]}) {
				/call get_target
			}
		} else /if (${PowerLevel}) {
			/if (${Select[${Me.Class.ShortName},ENC,WIZ,MAG,MNK]}) {
				/call get_target
			}
		}
		
		/call balance_hp
		/if (${PowerLevel}) {
			/if (${Select[${Me.Class.ShortName},CLR,DRU,SHM,ENC,WIZ,MAG,MNK]}) {
				/call ${Me.Class.ShortName.Lower}_main
			}
		} else {
			/call ${Me.Class.ShortName.Lower}_main
		}
		/call misc
		/doevents
	}
/return

Sub set_mode

	/if (${PreviousMode} == ${Mode}) /return

	/if (${PreviousMode} == 0) /varset PreviousModeName Travel
	/if (${PreviousMode} == 1) /varset PreviousModeName ManualPullCamping
	/if (${PreviousMode} == 2) /varset PreviousModeName ManualRunAndGun
	/if (${PreviousMode} == 3) /varset PreviousModeName AFKPullCamping
	/if (${PreviousMode} == 4) /varset PreviousModeName AFKRunAndGun
	/if (${PreviousMode} == 5) /varset PreviousModeName DoEvent
	/if (${PreviousMode} == 6) /varset PreviousModeName Raid
	/if (${PreviousMode} == 7) /varset PreviousModeName PosseAFK

	/if (${Mode} == 0) /varset ModeName Travel
	/if (${Mode} == 1) /varset ModeName ManualPullCamping
	/if (${Mode} == 2) /varset ModeName ManualRunAndGun
	/if (${Mode} == 3) /varset ModeName AFKPullCamping
	/if (${Mode} == 4) /varset ModeName AFKRunAndGun
	/if (${Mode} == 5) /varset ModeName DoEvent
	/if (${Mode} == 6) /varset ModeName Raid
	/if (${Mode} == 7) /varset ModeName PosseAFK

 	/docommand /dgt  Previous mode \ar ${PreviousModeName} \ax Current mode \ag ${ModeName}
	/varset PreviousMode ${Mode}
	
/return

sub misc
	/declare _count int local 0 
	
	| Close windows trying to get you to buy
	/if (${Window[AlertWnd].Open}) /notify AlertWnd ALW_Dismiss_Button leftmouseup
	/if (${Window[LargeDialogWindow].Open}) /notify LargeDialogWindow LDW_YesButton leftmouseup
 	/if (${Window[ConfirmationDialogBox].Open}) /notify ConfirmationDialogBox Yes_Button leftmouseup
 	/if (${Window[ConfirmationDialogBox].Open}) /notify ConfirmationDialogBox OK_Button leftmouseup
 	
	| Accept trades 
	/if (${Window[TradeWND].Open}) /notify TradeWND TRDW_Trade_Button leftmouseup
 	/if (${Window[GiveWnd].Open}) /notify GiveWnd GVW_Give_Button leftmouseup

	| Accept tasks 
 	/if (${Window[TaskTemplateSelectWnd].Open}) /notify TaskTemplateSelectWnd TaskTemplateSelectAcceptButton leftmouseup
	/if (${Window[TaskTemplateSelectWnd].Open}) /notify TaskTemplateSelectWnd TSEL_AcceptButton leftmouseup
 	/if (${Window[ProgressionTemplateSelectWnd].Open}) /notify ProgressionTemplateSelectWnd ProgressionTemplateSelectAcceptButton leftmouseup
	
	| drop a campfire
	/if (${Mode} != 0) /call check_campfire

	| pop your merc
	/if (${Mode} != 0) {
		/if (${useMerc} && ${Me.CombatState.NotEqual[COMBAT]}) {
			/if (${Mercenary.State.Equal[DEAD]} || ${Mercenary.State.Equal[SUSPENDED]}) {
				/if (!${Window[MMGW_ManageWnd].Open}) /windowstate MMGW_ManageWnd open
				/delay 1s
				/if (${Window[MMGW_ManageWnd].Child[MMGW_SuspendButton].Text.Equal[Revive]} || ${Window[MMGW_ManageWnd].Child[MMGW_SuspendButton].Text.Equal[Unsuspend]}) {
					/notify MMGW_ManageWnd MMGW_SuspendButton leftmouseup
					/delay 5s ${Window[MMGW_ManageWnd].Child[MMGW_SuspendButton].Text.NotEqual[Unsuspend]}
					/delay 5s ${Window[MMGW_ManageWnd].Child[MMGW_SuspendButton].Text.NotEqual[Revive]}
				}
			}
		}
	}
|**
	/if (${Window[MerchantWnd].Open}) {
		/if (!${HaveSold}) {
			/Autoloot sell
			/varset HaveSold 1
		}
	} else {
		/varset HaveSold 0
	}
	**|
	/if (${goSell}) /call vendor_items
	
	
	/if (${Mode} == 0) /return
	/if (${Zone.ID} == 202) /return
	/if (${Zone.ID} == 344) /return
	/if (${Zone.ID} == 345) /return

	/if (${Spawn[gm].ID} || (${Posse.Strangers} > 0 && !${Me.XTarget})) {
		
		/if (${port_class_checker[FALSE]}) {
			/varset Mode 7
			/varset goSell TRUE
			/varset posseZone TRUE
		}

		/if (!${Select[${Me.Class.ShortName},DRU,WIZ]}) {

			/call dummy_mode

		} else /if (${Select[${Me.Class.ShortName},DRU,WIZ]}) {
				
			/for _count 0 to ${Group}

				/if (${Group.Member[${_count}].OtherZone}) /continue

				/if (${Group.Member[${_count}].Type.Equal[Corpse]}) /continue

				/if (${Group.Member[${_count}].Type.Equal[Mercenary]}) /continue
				
				/if (${Group.Member[${_count}].Distance} >= 100) /squelch /dex ${Group.Member[${_count}].Name.Lower} /nav id ${Me.ID}

			/next _count

			/if (${validate_cast[FALSE, spell, "${PosseSpell}", ${Me.ID}]}) {
				/call core_cast2 "${PosseSpell}" spell ${Me.ID} FALSE
			}
		}
	}
	
/return

sub mode_posse_afk
	/declare _haveSold 					bool local FALSE
	/declare _nearestMerchant 			int local 0
	/declare _returnToFellowshipTimer	timer local 0
	
	/varset returnToFellowshipTimer 900s
	
	/while (${Mode} == 7) {

		/if (${Stick.Status.Equal[ON]}) /stick off
		/if (${MakeCamp.Status.Equal[ON]}) /makecamp off
		/attack off

		/if (${pullAutoCampY} != 0) /varset pullAutoCampY 0
		/if (${pullAutoCampX} != 0) /varset pullAutoCampX 0
		/if (${pullAutoCampZ} != 0) /varset pullAutoCampZ 0

		/if (${Zone.ID} != 202 || ${Zone.ID} != 344 || ${Zone.ID} != 345) {
			/varset Mode 0	
			/return
		}

		/if (!${_haveSold}) {

			/if (${Spawn[merchant radius 700].ID}) {
				
				/varset _nearestMerchant ${NearestSpawn[1, merchant radius 700].ID}
				
				/nav id ${_nearestMerchant}

				/while (${Navigation.Active}) {
					/delay 1s
				}
				
				/target id ${_nearestMerchant}
				/autoloot sell
			}
		} else {
			/varset _haveSold TRUE
		}

		/if (${_returnToFellowshipTimer} == 0) {
			/useitem "Fellowship Registration Insignia"
			/delay 1s
			/delay 1m !${Me.Zoning}
			/varset Mode 3
		}
		/delay 1s
	}

/return

sub port_class_checker(bool _debug)
	/declare _count int local 0

	/for _count 0 to ${Group}

		/if (${Group.Member[${_count}].OtherZone}) /continue

		/if (${Group.Member[${_count}].Type.Equal[Corpse]}) /continue

		/if (${Group.Member[${_count}].Type.Equal[Mercenary]}) /continue
		
		/if (${Select[${Group.Member[${_count}].Class.ShortName},WIZ,DRU]}) /return TRUE

	/next _count

/return FALSE


sub vendor_items
	/if (${Spawn[merchant radius 50].ID}) {
		/nav target id ${${Spawn[merchant radius 50].ID}

		/while (${Navigation.Active}) {
			/delay 1s
		}
		 
		/target ${Spawn[merchant radius 50]}
		/autoloot sell
	}
/return

|----------------------------------------------------------------------------
|- SUB: Campfire ${Window[FellowshipWnd].Child[FP_CampPage].Child[FP_CampsiteViewer].Text}
|----------------------------------------------------------------------------
Sub check_campfire
    /declare FellowCount int local 0
    /declare i int local
    /declare j int local

	/if (${Me.XTarget}) /return
	/if (${Navigation.Active}) /return
	/if (${Me.ID} != ${Group.Leader.ID}) /return
	/if (${Zone.ID} == 202) /return
	/if (${Zone.ID} == 344) /return
	/if (${Zone.ID} == 345) /return
	/if (${Zone.Name.Equal[${Me.Fellowship.CampfireZone}]} && ${Me.Fellowship.CampfireDuration} > 600) /return

	/for i 1 to ${SpawnCount[pc radius 50]}
        /for j 1 to ${Me.Fellowship.Members}
            /if (${NearestSpawn[${i},PC radius 50].CleanName.Equal[${Me.Fellowship.Member[${j}]}]}) /varcalc FellowCount ${FellowCount}+1
        /next j
    /next i

    /if (${FellowCount} < 3) /return

	/if (${Me.Fellowship.Campfire}) {
		/if (!${Window[FellowshipWnd].Open}) /windowstate FellowshipWnd open
		/delay 1s
		/nomodkey /notify FellowshipWnd FP_Subwindows tabselect 2
		/delay 1s
		/nomodkey /notify FellowshipWnd FP_RefreshList leftmouseup
		/delay 1s
		/nomodkey /notify FellowshipWnd FP_CampsiteKitList listselect 1
		/delay 1s
		/nomodkey /notify FellowshipWnd FP_DestroyCampsite leftmouseup
		/delay 1s
		/if (${Window[ConfirmationDialogBox].Open}) /nomodkey /notify ConfirmationDialogBox CD_Yes_Button leftmouseup
		/delay 1s
	}
	
	/delay 1s

	/if (!${Me.Fellowship.Campfire}) {
		/if (!${Window[FellowshipWnd].Open}) /windowstate FellowshipWnd open
		/delay 1s
		/nomodkey /notify FellowshipWnd FP_Subwindows tabselect 2
		/delay 1s
		/nomodkey /notify FellowshipWnd FP_RefreshList leftmouseup
		/delay 1s
		/nomodkey /notify FellowshipWnd FP_CampsiteKitList listselect 1
		/delay 1s
		/nomodkey /notify FellowshipWnd FP_CreateCampsite leftmouseup
		/delay 5s ${Me.Fellowship.Campfire}
		/if (!${Me.Fellowship.Campfire}) /nomodkey /notify FellowshipWnd FP_CreateCampsite leftmouseup
		/windowstate FellowshipWnd close
    }

/return


Sub check_state(bool _debug)

	| am I dead?
	/if (${Me.Hovering}) /call DeathSub
	
	| clear target
	/if (${Target.Type.Equal[Corpse]} || ${Target.PctHPs} <= 0 || ${Target.ID} == ${Me.Pet.ID}) {
		/if (${Target.ID}) /target clear
	}
	| mod rod on cursor?
	|/if (${Cursor.ID}) /call BagModRods
	
	| have I been knocked down?
	/if (${Me.State.Equal[FEIGN]}) /stand

	| should I be in battle?
	/if (${Me.XTarget}) /return

	| am I moving?
	/if (${Me.Moving}) /return
	
	| if stick is on we can turn it off
	/if (${Stick.Status.Equal[ON]}) /stick off

	| turn autoattack off
	/if (${Me.CombatState.Equal[COMBAT]}) /attack off

	| am I casting?
	/if (${Me.Casting.ID} && !${Me.Class.ShortName.Find[BRD]}) /return

	| am I navigating?
	/if (${Navigation.Active}) /return

	/if (${Me.Standing} && (${Me.PctMana} < 90 || ${Me.PctEndurance} < 90 || ${Me.PctHPs} < 90)) /sit

	| clear sets
	/declare _count int local ${immuneSet.Count}
	/if (${_count} > 0) {
		/echo 'Immune Set Clear: ${immuneSet.Clear}.'
	}
	/varset _count ${debuffSet.Count}
	/if (${_count} > 0) {
		/echo 'Debuff Set Clear: ${debuffSet.Clear}.'
	}

	| check pet
	/if (${Me.Pet.ID} && ${Me.Pet.Combat}) /pet back off

	/if (${SpawnCount[pccorpse group radius ${setMaxRezRange}]}) /return
	/if (${SpawnCount[pccorpse raid radius ${setMaxRezRange}]}) /return

	/if (${Me.Book[${Aura1}]} || ${Me.CombatAbilityReady[${Aura1}]}) {
		| check aura one
		/if (!${Spell[${Me.Aura[1]}].ID} && !${Me.Song[${Aura1}].ID} && !${Me.Aura[1].Name.Equal[${Aura1}]}) {
			
			/if (${validate_cast[FALSE, FIND, ${Aura1}, ${Me.ID}]}) {
				/call core_cast2 "${Aura1}" FIND ${Me.ID} FALSE
				/if (!${Select[${Me.Class.ShortName},WAR,ROG,MNK,BER]}) {
				
					| reload the spell if i just memmed aura
					/call ${Me.Class.ShortName.Lower}_load_spellbar
				}
			}

		}
	}

	/if (${Me.Book[${Aura2}]} && ${Me.AltAbility[Auroria Mastery].Rank} >= 1) {
		
		| check aura two
		/if (!${Spell[${Me.Aura[2]}].ID} && !${Me.Song[${Aura2}].ID} && !${Me.Aura[2].Name.Equal[${Aura2}]}) {

			/if (${validate_cast[FALSE, FIND, ${Aura2}, ${Me.ID}]}) {
				/call core_cast2 "${Aura2}" FIND ${Me.ID} FALSE
				/if (!${Select[${Me.Class.ShortName},WAR,ROG,MNK,BER]}) {
				
					| reload the spell if i just memmed aura
					/call ${Me.Class.ShortName.Lower}_load_spellbar
				}
			}
		}
	}

|		/call check_illusion FALSE ${illusionItem}
	/if (${Me.Standing} && (${Me.PctMana} < 90 || ${Me.PctEndurance} < 90)) /sit
	
/return

Sub move_to_camp

	| Melee are sticking to target so no need to move to camp
	/if (${Me.XTarget}) {
		/if (${Select[${Me.Class.ShortName},WAR,SHD,PAL,BER,BRD,ROG,MNK,BST]}) /return
	}
	| if casting return
	/if (${Me.Casting.ID} && ${Select[${Me.Class.ShortName},SHM,DRU,CLR]}) /return

	/if (${Math.Distance[${Me.Y},${Me.X},${Me.Z}:${pullAutoCampY},${pullAutoCampX},${pullAutoCampZ}]} < ${autoCampRadius}) /return

	/if (${Navigation.Active}) /return

	/if (${Stick.Status.Equal[ON]}) /stick off
	
	/nav locxyz ${pullAutoCampX} ${pullAutoCampY} ${pullAutoCampZ}

	/while (${Math.Distance[${Me.Y},${Me.X},${Me.Z}:${pullAutoCampY},${pullAutoCampX},${pullAutoCampZ}]} > ${autoCampRadius} && ${Navigation.Active}) {
		/if (${Mode} == 0) {
			/nav stop
			/return
		}
		/delay 5
	}

	/if (${Navigation.Active}) /nav stop
	
	/if (${Target.ID}) /face fast
	
	/delay 1s
	
/return


Sub balance_hp
	/if (!${Balance}) /return
	/if (!${Me.XTarget}) /return
	/if (!${Me.XTarget[2].ID}) /return
	/if (${Me.ID} != ${Group.MainAssist.ID}) /return

	/while (${Me.XTarget[2].ID} && ${Balance}) {
		/if (!${Target.ID}) /target id ${Me.XTarget[1].ID}
		/call high_hp
		/if (!${Me.Combat} || ${Target.ID} == ${HighHPID}) {
			/attack on
			/if (${Me.XTarget[2].ID} && ${Balance}) /call engage
			/if (${Me.XTarget[2].ID} && ${Balance}) /call AoEAggro
			/if (${Me.XTarget[2].ID} && ${Balance}) /call DoDisc
			/if (${Me.XTarget[2].ID} && ${Balance}) /call DoCombat
			/if (${Me.XTarget[2].ID} && ${Balance}) /call CombatBuffs	
		}
		/delay 1
	}

	/if (!${Me.XTarget[2].ID} || !${Balance}) /return

Sub high_hp
    /declare x int local 0
    /declare LowHP int local ${Target.PctHPs}
    /declare LowHPID int local ${Target.ID}
    /declare HighHP int local 0
    
    /for x 1 to ${Me.XTarget}
        /if (${Me.XTarget[${x}].PctHPs}<${LowHP}) {
            /varset LowHP ${Me.XTarget[${x}].PctHPs}
            /varset LowHPID ${Target.ID}
        }
        /if (!${Balance}) /return
        /if (${Me.XTarget[${x}].PctHPs}>${HighHP}) {
            /varset HighHP ${Me.XTarget[${x}].PctHPs}
            /varset HighHPID ${Me.XTarget[${x}].ID}
        }
    /next x
    
    /declare HPDiff int local 0
    /varcalc HPDiff ${HighHP}-${LowHP}
    /if (${HPDiff}>=2 && ${Target.ID}!=${HighHPID}) {
        /target id ${HighHPID}
        /delay 2s ${Target.ID}==${HighHPID}
    }
/return

Sub dummy_mode 
	/declare _count int local

	/if (${Me.XTarget}) /return

	/if (${Spawn[gm].ID} || (${Posse.Strangers} > 0 && !${Me.XTarget})) { 
		
		/call move_to_camp

		/while (${Navigation.Active}) { 
			/delay 5
		}

		/echo Entering Dummy Mode...
		/delay 1s 
		/echo PC nearby! 
		
		/while (${Spawn[gm].ID} || (${Posse.Strangers} > 0 && !${Me.XTarget})) { 
			/for _count 1 to ${DummyTime}
				/echo (${_count}/${DummyTime})
				/if (${Mode} == 0) /return
				/delay 1s
				/if (${Me.XTarget}) /return
			/next _count
			/delay 1s 
		}
	}

/return

