|**
TODO:
	Finish class spell lines.
	Aura combat cast.
	All to core_cast2.
	Fix names of warrior discs.
	delete dannet variables after use
	class aas.

	spawn	RaidAssistTarget[#]	Current raid assist target (1-3)
	spawn	RaidMarkNPC[#]	Current raid marked NPC (1-3)
	int	SecondaryPctAggro	Secondary Percentage aggro
spawn	SecondaryPctAggroPlayer	spawninfo for secondary aggro player
**|

#turbo 80
#warning

#define DEBUG /echo

#include IHCMercs\subs.inc
#include IHCMercs\events.inc
#include IHCMercs\config.inc

#include IHCMercs\warutil.inc
#include IHCMercs\war.inc

#include IHCMercs\shdutil.inc
#include IHCMercs\shd.inc

#include IHCMercs\berutil.inc
#include IHCMercs\ber.inc

#include IHCMercs\wizutil.inc
#include IHCMercs\wiz.inc

#include IHCMercs\magutil.inc
#include IHCMercs\mag.inc

#include IHCMercs\bstutil.inc
#include IHCMercs\bst.inc

#include IHCMercs\brdutil.inc
#include IHCMercs\brd.inc

#include IHCMercs\encutil.inc
#include IHCMercs\enc.inc

#include IHCMercs\druutil.inc
#include IHCMercs\dru.inc

#include IHCMercs\clrutil.inc
#include IHCMercs\clr.inc

#include IHCMercs\shmutil.inc
#include IHCMercs\shm.inc

#include IHCMercs\mnkutil.inc
#include IHCMercs\mnk.inc

#Chat group
#Chat tell
#Chat raid

Sub Main
	/delay ${Math.Rand[30]}
	
	/doevents flush
	/call setup_plugins
	/call var_setup

|-Cursor ID
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}

	/call ${Me.Class.ShortName.Lower}_setup
	/call ${Me.Class.ShortName.Lower}_abilities
	/call alliance_rotations
	/call ${Me.Class.ShortName.Lower}_rotations
	

	/call WelcomeMsg

	/if (${alliance_check_group[FALSE]}) /varset useAlliance TRUE
	/if (${Group.Puller.ID} == ${Me.ID}) {
		/delay 3s
		/call pre_pull_group_healer_spells
	}

 :mainloop
	/call set_mode
	/if (${Mode} == 0) /call Travel
	/if (${Mode} == 1) /call ManualPullCamping
	/if (${Mode} == 2) /call ManualRunAndGun
	/if (${Mode} == 3) /call afk_radius_camping
	/if (${Mode} == 4) /call AFKRunAndGun
	/if (${Mode} == 5) /call DoEvent
	/if (${Mode} == 7) /call mode_posse_afk
	/if (${Mode} == 8) /call go_sell
	/if (${Mode} == 9) /call go_scribe ${getSpellsFromZone}
/goto :mainloop 
/return
|----------------------------------------------------------------------------
|- SUB: afk_radius_camping 
|---------------------------------------------------------------------------- 
Sub afk_radius_camping
	/call setup_skill_melee FALSE
    /call make_camp
    /call remove_travel_buffs
	/target clear
	/if (${Group.Puller.ID} == ${Me.ID}) /call ignore_mobs_to_pull
	| /if (${Me.Pet.ID}) /pet guard
	/if (${Select[${Me.Class.ShortName},CLR,SHM,DRU,BST,ENC]}) /call group_checker

	/while (${Mode} == 3) {

		| /delay 1s
		| DEBUG CYCLE START

		/doevents

		/call misc
		/if (${Mode} != 0) /call force_create_campfire

		/call move_to_camp
		
		/if (!${powerLevel}) {
			/if (${validate_pull_start[FALSE]}) /call afk_pull
		} else /if (${powerLevel}) {
			/if (${Group.Puller.ID} == ${Me.ID}) {
				/if (${npcRadiusCheck} != 1) /varset npcRadiusCheck 1
				/if (${validate_chain_pull_start[FALSE]}) /call chain_pull
			}
		}

		/call check_state FALSE
		
		/if (${Balance}) /call balance_mob_hitpoints

		/call ${Me.Class.ShortName.Lower}_main

		/call dummy_mode
	}
	/doevents
/return

Sub set_mode

	/if (${PreviousMode} == ${Mode}) /return

	/if (${PreviousMode} == 0) /varset PreviousModeName Travel
	/if (${PreviousMode} == 1) /varset PreviousModeName ManualPullCamping
	/if (${PreviousMode} == 2) /varset PreviousModeName ManualRunAndGun
	/if (${PreviousMode} == 3) /varset PreviousModeName AFKPullCamping
	/if (${PreviousMode} == 4) /varset PreviousModeName AFKRunAndGun
	/if (${PreviousMode} == 5) /varset PreviousModeName DoEvent
	/if (${PreviousMode} == 6) /varset PreviousModeName Raid
	/if (${PreviousMode} == 7) /varset PreviousModeName PosseAFK
	/if (${PreviousMode} == 8) /varset PreviousModeName Sell

	/if (${Mode} == 0) /varset ModeName Travel
	/if (${Mode} == 1) /varset ModeName ManualPullCamping
	/if (${Mode} == 2) /varset ModeName ManualRunAndGun
	/if (${Mode} == 3) /varset ModeName AFKPullCamping
	/if (${Mode} == 4) /varset ModeName AFKRunAndGun
	/if (${Mode} == 5) /varset ModeName DoEvent
	/if (${Mode} == 6) /varset ModeName Raid
	/if (${Mode} == 7) /varset ModeName PosseAFK
	/if (${Mode} == 8) /varset ModeName Sell

 	/docommand /dgt  Previous mode \ar ${PreviousModeName} \ax Current mode \ag ${ModeName}
	/varset PreviousMode ${Mode}
	
/return

sub misc

	/if (${Mode} > 0) {
		/varset newPosseXY ${pullRadiusXY}
		/varset newPosseZ ${pullRadiusZ}

		/if (${newPosseXY} != ${oldPosseXY} || ${newPosseZ} != ${oldPosseZ}) {
			/posse radius ${pullRadiusXY} 
			/posse zradius ${pullRadiusZ}
			/posse save
			/varset oldPosseXY ${newPosseXY}
			/varset oldPosseZ ${newPosseZ}
			DEBUG Set MQ2Posse radius: ${Posse.Radius}
		}
	}

	| Close windows trying to get you to buy
	/if (${Window[AlertWnd].Open}) /notify AlertWnd ALW_Dismiss_Button leftmouseup
	/if (${Window[LargeDialogWindow].Open}) /notify LargeDialogWindow LDW_YesButton leftmouseup
 	/if (${Window[ConfirmationDialogBox].Open}) /notify ConfirmationDialogBox Yes_Button leftmouseup
 	/if (${Window[ConfirmationDialogBox].Open}) /notify ConfirmationDialogBox OK_Button leftmouseup
 	
	| Accept trades 
	/if (${Window[TradeWND].Open}) /notify TradeWND TRDW_Trade_Button leftmouseup
 	/if (${Window[GiveWnd].Open}) /notify GiveWnd GVW_Give_Button leftmouseup

	| Accept tasks 
 	/if (${Window[TaskTemplateSelectWnd].Open}) /notify TaskTemplateSelectWnd TaskTemplateSelectAcceptButton leftmouseup
	/if (${Window[TaskTemplateSelectWnd].Open}) /notify TaskTemplateSelectWnd TSEL_AcceptButton leftmouseup
 	/if (${Window[ProgressionTemplateSelectWnd].Open}) /notify ProgressionTemplateSelectWnd ProgressionTemplateSelectAcceptButton leftmouseup
	

	| pop your merc
	/if (${Mode} > 0) {
		/if (${useMerc} && ${Me.CombatState.NotEqual[COMBAT]}) {
			/if (${Mercenary.State.Equal[DEAD]} || ${Mercenary.State.Equal[SUSPENDED]}) {
				/if (!${Window[MMGW_ManageWnd].Open}) /windowstate MMGW_ManageWnd open
				/delay 1s
				/if (${Window[MMGW_ManageWnd].Child[MMGW_SuspendButton].Text.Equal[Revive]} || ${Window[MMGW_ManageWnd].Child[MMGW_SuspendButton].Text.Equal[Unsuspend]}) {
					/notify MMGW_ManageWnd MMGW_SuspendButton leftmouseup
					/delay 5s ${Window[MMGW_ManageWnd].Child[MMGW_SuspendButton].Text.NotEqual[Unsuspend]}
					/delay 5s ${Window[MMGW_ManageWnd].Child[MMGW_SuspendButton].Text.NotEqual[Revive]}
				}
			}
		}
	}

/return

sub get_me_out(int _tmpID)

	/if (!${Me.ID} != ${_tmpID}) {

		/if (${Navigation.Active}) /nav stop
		/if (${Stick.Status.Equal[ON]}) /stick off
		/if (${Spawn[id ${_tmpID}].Distance3D} > 190) /nav id ${_tmpID}

		/while (${Navigation.Active}) {
			/delay 1s
		}
		
		/delay 2m ${Me.Zoning}
		/delay 2m !${Me.Zoning}

	} else {	

		/if (${validate_cast[FALSE, spell, "${PosseSpell}", ${Me.ID}]}) {
			/call core_cast2 "${PosseSpell}" spell ${Me.ID} FALSE
		}
		/delay 2m ${Me.Zoning}
		/delay 2m !${Me.Zoning}
	}
	
/return

Sub go_sell
	/declare _nearestMerchant 			int local 0

	/if (${Spawn[merchant radius 700].ID}) {
		
		/varset _nearestMerchant ${NearestSpawn[1, merchant radius 700].ID}
		
		/nav id ${_nearestMerchant}

		/while (${Navigation.Active}) {
			/delay 1s
		}
		
		/target id ${_nearestMerchant}
		/autoloot sell
		/delay 1m  ${Window[MerchantWnd].Open}
		/delay 5s
		/if (${Mode} == 8) /varset Mode 0
		/return TRUE
	}
	/delay 3

/return FALSE

sub mode_posse_afk
	/declare _haveSold 					bool local FALSE
	/declare _nearestMerchant 			int local 0
	/declare _portClassID				int local 0
	/declare _counter					int local 1
	/declare _returnToFellowshipTimer	timer local 0
	
	/varset _returnToFellowshipTimer 20m

	/while (${Mode} == 7) {

		/if (${Math.Calc[3000%${_counter}]} == 1) DEBUG ${_returnToFellowshipTimer}s left

		/if (${Stick.Status.Equal[ON]}) /stick off
		/if (${Me.CombatState.Equal[COMBAT]}) /attack off

		/if (${pullAutoCampY} != 0) /varset pullAutoCampY 0
		/if (${pullAutoCampX} != 0) /varset pullAutoCampX 0
		/if (${pullAutoCampZ} != 0) /varset pullAutoCampZ 0

		/if (!(${Zone.ID} == 202 || ${Zone.ID} == 344 || ${Zone.ID} == 345)) {
			/varset Mode 0	
			/return
		}
		/if (!${_haveSold}) {
			/call go_sell
			/varset _haveSold ${Macro.Return}
		}

		/if (${_returnToFellowshipTimer} == 0) {
			/useitem "Fellowship Registration Insignia"
			/delay 1s
			/delay 1m !${Me.Zoning}
			/delay 5m ${SpawnCount[pc group radius 50]}>=3
			/if (${Spawn[gm].ID} || ${Posse.Strangers} > 0) {
				/call force_create_campfire
				/call port_class_checker
				/varset _portClassID ${Macro.Return}
				/call get_me_out ${_portClassID}
				/varset _returnToFellowshipTimer 30m

			} else {
				/varset Mode 3
			}
		}

		/varcalc _counter ${_counter} + 1
		/delay 1s
	}

/return

sub validate_fellowship_creation(bool _debug)
	/declare _fellowCount int local 0
	/declare _enoughPeople bool local FALSE
	/declare _count int local 0
    /declare i int local
    /declare j int local

	/if (${Me.XTarget}) /return FALSE
	/if (${Navigation.Active}) /return FALSE
	/if (${Me.ID} != ${Group.Leader.ID}) /return FALSE
	/if (${Zone.ID} == 202) /return FALSE
	/if (${Zone.ID} == 344) /return FALSE
	/if (${Zone.ID} == 345) /return FALSE
	/if (${Me.Fellowship.Members} == 0) /return FALSE

	/for _count 1 to 10

		/for i 1 to ${SpawnCount[pc group radius 50]}
			/for j 1 to ${Me.Fellowship.Members}
				/if (${NearestSpawn[${i},PC group radius 50].CleanName.Equal[${Me.Fellowship.Member[${j}]}]}) /varcalc _fellowCount ${_fellowCount}+1
			/next j
		/next i

		/if (${_fellowCount} < 3) {
			/varset _fellowCount 0
			/delay 10s
		} else {
			/break
		}

	/next _count

    /if (${_fellowCount} < 3) /return FALSE

/return TRUE

sub force_create_campfire
	
	/if (!${validate_fellowship_creation[FALSE]}) /return

	/if (${Me.ID} != ${Group.Leader.ID}) {
		/delay 30s
		/return
	}

	/while (${Me.Fellowship.Campfire}) {
		/if (!${Window[FellowshipWnd].Open}) /windowstate FellowshipWnd open
		/delay 5
		/nomodkey /notify FellowshipWnd FP_Subwindows tabselect 2
		/delay 5
		/nomodkey /notify FellowshipWnd FP_RefreshList leftmouseup
		/delay 5
		/nomodkey /notify FellowshipWnd FP_CampsiteKitList listselect 1
		/delay 5
		/nomodkey /notify FellowshipWnd FP_DestroyCampsite leftmouseup
		/delay 5
		/if (${Window[ConfirmationDialogBox].Open}) /nomodkey /notify ConfirmationDialogBox CD_Yes_Button leftmouseup
		/delay 5
		/if (${Window[ConfirmationDialogBox].Open}) /notify ConfirmationDialogBox Yes_Button leftmouseup
		/delay 5
	}
	
	/delay 1s

	/while (!${Me.Fellowship.Campfire}) {
		/if (!${Window[FellowshipWnd].Open}) /windowstate FellowshipWnd open
		/delay 5
		/nomodkey /notify FellowshipWnd FP_Subwindows tabselect 2
		/delay 5
		/nomodkey /notify FellowshipWnd FP_RefreshList leftmouseup
		/delay 5
		/nomodkey /notify FellowshipWnd FP_CampsiteKitList listselect 1
		/delay 5
		/nomodkey /notify FellowshipWnd FP_CreateCampsite leftmouseup
		/delay 5 ${Me.Fellowship.Campfire}
		/if (!${Me.Fellowship.Campfire}) /nomodkey /notify FellowshipWnd FP_CreateCampsite leftmouseup
		/windowstate FellowshipWnd close
    }

/return

sub port_class_checker(bool _debug)
	/declare _count int local 0

	/for _count 0 to ${Group}

		/if (${Group.Member[${_count}].OtherZone}) /continue

		/if (${Group.Member[${_count}].Type.Equal[Corpse]}) /continue

		/if (${Group.Member[${_count}].Type.Equal[Mercenary]}) /continue
		
		/if (${Select[${Group.Member[${_count}].Class.ShortName},WIZ,DRU]}) /return ${Group.Member[${_count}].ID}

	/next _count

/return 0


sub vendor_items
	/if (${Spawn[merchant radius 50].ID}) {
		/nav target id ${${Spawn[merchant radius 50].ID}

		/while (${Navigation.Active}) {
			/delay 1s
		}
		 
		/target ${Spawn[merchant radius 50]}
		/autoloot sell
		/delay 1m  ${Window[MerchantWnd].Open}
	}
/return

|----------------------------------------------------------------------------
|- SUB: Campfire ${Window[FellowshipWnd].Child[FP_CampPage].Child[FP_CampsiteViewer].Text}
|----------------------------------------------------------------------------
Sub create_campfire

	/if (!${validate_fellowship_creation[FALSE]}) /return

	/if (${Zone.Name.Equal[${Me.Fellowship.CampfireZone}]}) {
		/if (${Math.Distance[${pullAutoCampY}, ${pullAutoCampX}, ${pullAutoCampZ}:${Me.Fellowship.CampfireY}, ${Me.Fellowship.CampfireX}, ${Me.Fellowship.CampfireZ}]} < 200) {
			/if (${Me.Fellowship.CampfireDuration} > 600) {
				/return
			}
		}
	}

	/if (${Me.Fellowship.CampfireDuration}) {
		/if (!${Window[FellowshipWnd].Open}) /windowstate FellowshipWnd open
		/delay 5
		/nomodkey /notify FellowshipWnd FP_Subwindows tabselect 2
		/delay 5
		/nomodkey /notify FellowshipWnd FP_RefreshList leftmouseup
		/delay 5
		/nomodkey /notify FellowshipWnd FP_CampsiteKitList listselect 1
		/delay 5
		/nomodkey /notify FellowshipWnd FP_DestroyCampsite leftmouseup
		/delay 5
		/if (${Window[ConfirmationDialogBox].Open}) /nomodkey /notify ConfirmationDialogBox CD_Yes_Button leftmouseup
		/delay 5
		/if (${Window[ConfirmationDialogBox].Open}) /notify ConfirmationDialogBox Yes_Button leftmouseup
		/delay 5
		/if (${Window[ConfirmationDialogBox].Open}) /notify ConfirmationDialogBox Confirm_Button leftmouseup
		/delay 5
	}
	
	/delay 5

	/if (!${Me.Fellowship.CampfireDuration}) {
		/if (!${Window[FellowshipWnd].Open}) /windowstate FellowshipWnd open
		/delay 5
		/nomodkey /notify FellowshipWnd FP_Subwindows tabselect 2
		/delay 5
		/nomodkey /notify FellowshipWnd FP_RefreshList leftmouseup
		/delay 5
		/nomodkey /notify FellowshipWnd FP_CampsiteKitList listselect 1
		/delay 5
		/nomodkey /notify FellowshipWnd FP_CreateCampsite leftmouseup
		/delay 5s ${Me.Fellowship.CampfireDuration}
		/if (!${Me.Fellowship.CampfireDuration}) /nomodkey /notify FellowshipWnd FP_CreateCampsite leftmouseup
		/windowstate FellowshipWnd close
    }

/return


Sub check_state(bool _debug)

	| am I dead?
	/if (${Me.Hovering}) /call DeathSub
	
	| clear target
	/if (${Target.Type.Equal[Corpse]} || ${Target.PctHPs} <= 0 || ${Target.ID} == ${Me.Pet.ID}) {
		/if (${Target.ID}) /target clear
	}
	| mod rod on cursor?
	|/if (${Cursor.ID}) /call BagModRods
	
	| have I been knocked down?
	/if (${Me.State.Equal[FEIGN]}) /stand

	| should I be in battle?
	/if (${Me.XTarget}) /return

	| am I moving?
	/if (${Me.Moving}) /return
	
	| if stick is on we can turn it off
	/if (${Stick.Status.Equal[ON]}) /stick off

	| turn autoattack off
	/if (${Me.CombatState.Equal[COMBAT]}) /attack off

	| am I casting?
	/if (${Me.Casting.ID} && !${Me.Class.ShortName.Find[BRD]}) /return

	| am I navigating?
	/if (${Navigation.Active}) /return

	/if (${Me.Standing} && (${Me.PctMana} < 90 || ${Me.PctEndurance} < 90 || ${Me.PctHPs} < 90)) /sit

	| clear sets
	/declare _count int local ${immuneSet.Count}
	/if (${_count} > 0) {
		/echo 'Immune Set Clear: ${immuneSet.Clear}.'
	}
	/varset _count ${debuffSet.Count}
	/if (${_count} > 0) {
		/echo 'Debuff Set Clear: ${debuffSet.Clear}.'
	}

	| check pet
	/if (${Me.Pet.ID} && ${Me.Pet.Combat}) /pet back off

	/if (${SpawnCount[pccorpse group radius ${setMaxRezRange}]}) /return
	/if (${SpawnCount[pccorpse raid radius ${setMaxRezRange}]}) /return

	/if (${Me.Book[${Aura1}]} || ${Me.CombatAbilityReady[${Aura1}]} || ${Me.AltAbilityReady[${Aura1}]}) {
		| check aura one
		/if (!${Me.Song[${Aura1}].ID} && !${Me.Aura[2].Name.Equal[${Aura1}]} && !(${Me.Aura[1].Name.Equal[${Aura1}]} || ${Me.Aura[1].Name.Equal[Mana Rev. Aura]} || ${Me.Aura[1].Name.Equal[Mana Recursion Aura]})) {
			
			/if (${validate_cast[FALSE, FIND, ${Aura1}, ${Me.ID}]}) {
				/call core_cast2 "${Aura1}" FIND ${Me.ID} FALSE
				/if (!${Select[${Me.Class.ShortName},WAR,ROG,MNK,BER]}) {
				
					| reload the spell if i just memmed aura
					/call ${Me.Class.ShortName.Lower}_load_spellbar
				}
			}
		}
	}

	/if (${Me.Book[${Aura2}]} && ${Me.AltAbility[Auroria Mastery].Rank} >= 1) {
		
		| check aura two
		/if (!${Me.Song[${Aura2}].ID} && !${Me.Aura[1].Name.Equal[${Aura2}]} && !${Me.Aura[2].Name.Equal[${Aura2}]}) {

			/if (${validate_cast[FALSE, FIND, ${Aura2}, ${Me.ID}]}) {
				/call core_cast2 "${Aura2}" FIND ${Me.ID} FALSE
				/if (!${Select[${Me.Class.ShortName},WAR,ROG,MNK,BER]}) {
				
					| reload the spell if i just memmed aura
					/call ${Me.Class.ShortName.Lower}_load_spellbar
				}
			}
		}
	}

|		/call check_illusion FALSE ${illusionItem}
	/if (${Me.Standing} && !${Me.Casting.ID} && (${Me.PctMana} < 90 || ${Me.PctEndurance} < 90)) /sit
	
/return

Sub move_to_camp
	/declare _autoCampRadius int local ${autoCampRadius}

	| Melee are sticking to target so no need to move to camp
	/if (${Me.XTarget} && ${Group.MainTank.ID} != ${Me.ID}) {
		/if (${Select[${Me.Class.ShortName},WAR,SHD,PAL,BER,BRD,ROG,MNK,BST]}) /varset _autoCampRadius 120
	}
	/if (${Me.XTarget} && ${Group.MainTank.ID} == ${Me.ID}) {
		/varset _autoCampRadius 20
	}
	
	| if casting return
	/if (${Me.Casting.ID} && ${Select[${Me.Class.ShortName},SHM,DRU,CLR]}) /return

	/if (${Math.Distance[${Me.Y},${Me.X},${Me.Z}:${pullAutoCampY},${pullAutoCampX},${pullAutoCampZ}]} < ${_autoCampRadius}) /return

	/if (${Navigation.Active}) /return

	/if (${Stick.Status.Equal[ON]}) /stick off
	
	/nav locxyz ${pullAutoCampX} ${pullAutoCampY} ${pullAutoCampZ}

	/while (${Math.Distance[${Me.Y},${Me.X},${Me.Z}:${pullAutoCampY},${pullAutoCampX},${pullAutoCampZ}]} > ${_autoCampRadius} && ${Navigation.Active}) {
		/if (${Mode} == 0) {
			/nav stop
			/return
		}
		/varset _autoCampRadius ${autoCampRadius} * ${Int[${Me.Speed}]} / 100
		/delay 3
	}

	/if (${Navigation.Active}) /nav stop
	
/return


Sub balance_mob_hitpoints

	/if (!${Me.XTarget}) /return
	/if (!${Me.XTarget[2].ID}) /return
	/if (${Me.ID} != ${Group.MainAssist.ID}) /return

	/while (${Me.XTarget[2].ID} && ${Balance}) {
		/if (!${Target.ID}) /target id ${Me.XTarget[1].ID}
		/call high_hp
		/if (!${Me.Combat} || ${Target.ID} == ${HighHPID}) {
			/attack on
			/if (${Me.XTarget[2].ID} && ${Balance}) /call engage
			/if (${Me.XTarget[2].ID} && ${Balance}) /call AoEAggro
			/if (${Me.XTarget[2].ID} && ${Balance}) /call DoDisc
			/if (${Me.XTarget[2].ID} && ${Balance}) /call DoCombat
			/if (${Me.XTarget[2].ID} && ${Balance}) /call CombatBuffs	
		}
		/delay 1
	}

	/if (!${Me.XTarget[2].ID} || !${Balance}) /return

Sub high_hp
    /declare _count int local 0
    /declare LowHP int local ${Target.PctHPs}
    /declare LowHPID int local ${Target.ID}
    /declare HighHP int local 0
    
    /for _count 1 to ${Me.XTarget}
        /if (${Me.XTarget[${_count}].PctHPs}<${LowHP}) {
            /varset LowHP ${Me.XTarget[${_count}].PctHPs}
            /varset LowHPID ${Target.ID}
        }
        /if (!${Balance}) /return
        /if (${Me.XTarget[${_count}].PctHPs}>${HighHP}) {
            /varset HighHP ${Me.XTarget[${_count}].PctHPs}
            /varset HighHPID ${Me.XTarget[${_count}].ID}
        }
    /next _count
    
    /declare HPDiff int local 0
    /varcalc HPDiff ${HighHP}-${LowHP}
    /if (${HPDiff}>=2 && ${Target.ID}!=${HighHPID}) {
        /target id ${HighHPID}
        /delay 2s ${Target.ID}==${HighHPID}
    }
/return

Sub dummy_mode 
	/declare _count 		int local 0 
	/declare _portClassID 	int local 0

	/if (${Mode} == 0) /return
	/if (${Zone.ID} == 202) /return
	/if (${Zone.ID} == 344) /return
	/if (${Zone.ID} == 345) /return
	/if (${Me.XTarget}) /return

	
	/if (${Spawn[gm].ID} || ${Posse.Strangers} > 0) {
		
		/call port_class_checker
		/varset _portClassID ${Macro.Return}

		/if (${_portClassID}) {
			/varset Mode 7
			|/varset posseZone TRUE
			/call get_me_out ${_portClassID}
		 } else {
			
			/call move_to_camp

			/while (${Navigation.Active}) { 
				/delay 5
			}

			/echo Entering Dummy Mode...
			/delay 1s 
			/echo PC nearby! 
			
			/while (${Spawn[gm].ID} || (${Posse.Strangers} > 0 && !${Me.XTarget})) { 
				/for _count 1 to ${DummyTime}
					/echo (${_count}/${DummyTime})
					/if (${Mode} == 0) /return
					/if (${Zone.ID} == 202) /return
					/if (${Zone.ID} == 344) /return
					/if (${Zone.ID} == 345) /return
					/if (${Me.XTarget}) /return
					/delay 1s
				/next _count
				/delay 1s 
			}
		}
	 }
	

/return

sub group_checker
	/declare _count int local

	/for _count 0 to ${Group}

		/if (${Select[${Group.Member[${_count}].Class.ShortName},SHM]} && ${Select[${Me.Class.ShortName},BST]} && !${bstDoNotBuffShm}) {
			/varset bstDoNotBuffShm TRUE
		}

		/if (${Select[${Group.Member[${_count}].Class.ShortName},DRU]} && ${Select[${Me.Class.ShortName},BST]} && !${bstDoNotBuffDru}) {
			/varset bstDoNotBuffDru TRUE
		}

		/if (${Select[${Group.Member[${_count}].Class.ShortName},ENC]} && ${Select[${Me.Class.ShortName},BST]} && !${bstDoNotBuffEnc}) {
			/varset bstDoNotBuffEnc TRUE
		}

		/if (${Select[${Group.Member[${_count}].Class.ShortName},ENC]} && ${Select[${Me.Class.ShortName},SHM]} && !${shmDoNotBuffEnc}) {
			/varset shmDoNotBuffEnc TRUE
		}

		/if (${Select[${Group.Member[${_count}].Class.ShortName},SHM]} && ${Select[${Me.Class.ShortName},DRU]} && !${druDoNotBuffShm}) {
			/varset druDoNotBuffShm TRUE
		}

		/if (${Select[${Group.Member[${_count}].Class.ShortName},${Me.Class.ShortName}]} && !${doNotBuff}) {
			
			/if (${Group.Member[${_count}].Level} > ${Me.Level}) {
				/varset doNotBuff TRUE
			}
		}
		
	/next _count
	
/return


| --------------------------------------------------------------------------------------------
| SUB: Main
| --------------------------------------------------------------------------------------------
Sub go_scribe(string _zoneName)
	|**
	TODO
		MinLevel
		MaxLevel
		As Aliases for input ie /scribeminlevel /zone Argath

		EasternWastesTwoButton

		spells and translocation AAs and items
	**|
	/if (${_zoneName.Equal[0]}) {
		/echo "Please set variable getSpellsFromZone to a supported zone, i.e. Stratos"
		/delay 5s
		/return
	}
	/declare _minLevel int local 1
	/declare _maxLevel int local ${Me.Level}
	/varset _minLevel 91
	/varset _maxLevel 91
	/declare _getSpellsFromZone string local 0

	/if (${_zoneName.Equal[All]}) {
		/declare _getSpellsFromZoneList[7] string local 0
		/varset _getSpellsFromZoneList[1] PoKnowledge
		/varset _getSpellsFromZoneList[2] PoTranquility
		/varset _getSpellsFromZoneList[3] Argath
		/varset _getSpellsFromZoneList[4] ShardsLanding
		/varset _getSpellsFromZoneList[5] Lceanium
		/varset _getSpellsFromZoneList[6] Overthere
		/varset _getSpellsFromZoneList[7] Stratos
	} else {
		/declare _getSpellsFromZoneList[1] string local 0
		/varset _getSpellsFromZoneList[1] ${_zoneName}
	}
	
	/declare DoLoop int local 0
	/declare mName string local
	/declare Merchant1 string local 0
	/declare MLoop int local 0
	/declare _count int local 0

	/if (!${Zone.ShortName.Equal[PoKnowledge]} && !${Zone.ShortName.Equal[GuildLobby]} && !${Zone.ShortName.Equal[GuildHall]}) /call go_to_pok
	
	/for _count 1 to ${_getSpellsFromZoneList.Size}

		/if (${Select[${Me.Class.ShortName},SHM,DRU]}) {
			/call core_cast2 "${TravelSpell}" FIND ${Me.ID} FALSE
		}
		
		/varset _getSpellsFromZone ${_getSpellsFromZoneList[${_count}]}

		/echo \ag--\atNext destination is ${_getSpellsFromZone} for levels ${_minLevel} - ${_maxLevel} \ag--
		/echo

		/if (!${Zone.ShortName.Equal[${_getSpellsFromZone}]} && !${Zone.ShortName.Equal[${_getSpellsFromZone}two]}) {
		
			/if (${_getSpellsFromZone.Equal[PoTranquility]}) {
				/call go_to_pok
				/call pot
				/return
			}
			/if (${_getSpellsFromZone.Equal[PoKnowledge]}) {
				/call go_to_pok
				/return
			}

			/call go_to_guildhall
		
			/call NavTo "Zeflmin Werlikanin"
			/delay 5
			/click right target
			/delay 5s ${Merchant.Open}
			/if (${Merchant.Open}) {
				/delay 10s ${Merchant.ItemsReceived}
			}
			/delay 2s
			/if (${Window[PortalSetterWindow].Open}) /notify PortalSetterWindow ${_getSpellsFromZone}Button leftmouseup
			/delay 1s
			/if (${Window[InventoryWindow].Open}) /notify InventoryWindow IW_DoneButton leftmouseup
			/delay 1s
			/call portalpool ${_getSpellsFromZone}
		}

		/call ClassMerchant${_getSpellsFromZone} ${_getSpellsFromZone}

		:Start
		/varset DoLoop 0
		/for MLoop 1 to ${${Me.Class.ShortName}Merchant${_getSpellsFromZone}.Size}
		/echo \ag--\atNavigating to class merchant ${${Me.Class.ShortName}Merchant${_getSpellsFromZone}[${MLoop}]} \ag--
		/call NavTo ${${Me.Class.ShortName}Merchant${_getSpellsFromZone}[${MLoop}]}
		/if (!${Merchant.Open}) {	
		:NavLoop
			/if (${Navigation.Active}) /goto :NavLoop
			/click right target
			/delay 5s ${Merchant.Open}
		}
		/if (${Merchant.Open}) {
			/delay 10s ${Merchant.ItemsReceived}
			/varset mName ${Merchant.Name}
			/if (!${Select[${Me.Class.ShortName},CLR,DRU,SHM,ENC,WIZ,MAG,NEC,SHD,BRD,BST]}) /call BuyTomes ${_minLevel} ${_maxLevel}
			/if (!${Select[${Me.Class.ShortName},WAR,BER,MNK,ROG,SHD,BRD,BST]}) /call BuySpells ${_minLevel} ${_maxLevel}
			/delay 2s
		}
		/if (${Merchant.Open}) {
			/notify MerchantWnd MW_Done_Button leftmouseup
			/delay 1s !${Merchant.Open}
		}
		/if (!${Select[${Me.Class.ShortName},CLR,DRU,SHM,ENC,WIZ,MAG,NEC,SHD,BRD,BST]}) /call ScribeTomes
		/if (!${Select[${Me.Class.ShortName},WAR,BER,MNK,ROG,SHD,BRD,BST]}) /call ScribeSpells
		/if (${DoLoop}) {
			/target ${mName}
			/delay 2s ${Target.ID}
			/click right target
			/delay 1s
			/goto :Start
		}
		/next MLoop
		/if (${Window[BookWindow].Open}) /notify BookWindow BOOK_DoneButton leftmouseup
		/if (${Window[InventoryWindow].Open}) /notify InventoryWindow IW_DoneButton leftmouseup
	/next _count

	/if (!${Zone.ShortName.Equal[PoKnowledge]}) /call go_to_pok
	/varset Mode 0
	
	/echo
	/echo \ag--\atSpells and tomes bought and scribed \ag--
	/echo

/return
| --------------------------------------------------------------------------------------------
| SUB: NavTo
| --------------------------------------------------------------------------------------------
Sub NavTo(MerchantName)
	
	/nav spawn npc ${MerchantName}
    /while (${Navigation.Active}) {
        /if (${Spawn[${MerchantName}].Distance3D} < 20) /break
        /delay 5
    }
    /squelch /target npc ${MerchantName}
    /delay 2s ${Target.ID}==${Spawn[${MerchantName}].ID}
    /face
/return

| --------------------------------------------------------------------------------------------
| SUB: BuySpells
| --------------------------------------------------------------------------------------------
Sub BuySpells(string _minLevel, int _maxLevel)
	/if (!${Merchant.Open}) /return
	|Modified to Merchant.ItemsReceived
|    /delay 10s ${Merchant.ItemsReceived}
    /if (!${Merchant.Items}) /return

	/declare a int local
	/declare b int local
	/declare c int local
	/declare SpellName string local
	/declare MyDeity string local ${Me.Deity}

	/for a 1 to ${Merchant.Items}
		/if (!${Me.FreeInventory}) /return
		/if (!${Merchant.Open}) /return
		/varset c 0
		/varset SpellName ${Merchant.Item[${a}].Spell.Name}
		/if (${SpellName.Find[ Rk. II ]}) /varset SpellName ${Merchant.Item[${a}].Spell.Name.Replace[ Rk. II ,]}
		/if (${SpellName.Find[ Rk. III ]}) /varset SpellName ${Merchant.Item[${a}].Spell.Name.Replace[ Rk. III ,]}

		/if (${Merchant.Item[${a}].Type.Equal[Scroll]} && ${Merchant.Item[${a}].Spell.Level} >= ${_minLevel} && ${Merchant.Item[${a}].Spell.Level} <= ${_maxLevel} && ${Math.Calc[${Merchant.Item[${a}].BuyPrice}\1000]} < ${Me.Platinum} && !${Me.Book[${Merchant.Item[${a}].Spell.Name}]} && !${FindItemCount[${Merchant.Item[${a}]}]}) {
			/if (${Me.CombatAbility[${SpellName}]}) {
				/echo :: I already know ${SpellName}
			/continue
			}

			/if (${FindItemCount[${Merchant.Item[${a}]}]}) {
				/echo :: I already have ${Merchant.Item[${a}]} in inventory
			/continue
			}

			/if (${Me.CombatAbility[${SpellName} Rk. II]} || ${FindItemCount[${Merchant.Item[${a}]} Rk. II]}) {
				/echo :: Skipping lower rank of ${SpellName}
			/continue
			}

			/if (${Me.CombatAbility[${SpellName} Rk. III]} || ${FindItemCount[${Merchant.Item[${a}]} Rk. III]}) {
				/echo :: Skipping lower rank of ${SpellName}
			/continue
			}

			/if (${Merchant.Item[${a}].Deities} && ${MyDeity.NotEqual[${Merchant.Item[${a}].Deity[1]}]}) {
				/echo Unable to use ${SpellName} because of deity
			/continue
			}
			/if (${Me.Book[${SpellName} Rk. II]} || ${FindItemCount[${SpellName} Rk. II]}) {
				/echo Skipping lower rank of ${SpellName}
			/continue
			}
			/if (${Me.Book[${SpellName} Rk. III]} || ${FindItemCount[${SpellName} Rk. III]}) {
				/echo Skipping lower rank of ${SpellName}
			/continue
			}

		| this loop is needed because the merchant item number doesn't match up to the interface line number
			/for b 1 to ${Window[MerchantWnd].Child[MW_ItemList].Items}
				/if (${Window[MerchantWnd].Child[MW_ItemList].List[${b},2].Equal[${Merchant.Item[${a}]}]}) /varset c ${b}
			/next b

		| merchant line number matches what we are looking to buy, buy 1 copy of it
			/if (${c}) {
				/echo Buying ${Window[MerchantWnd].Child[MW_ItemList].List[${c},2]}
				/notify MerchantWnd MW_ItemList listselect ${c}
				/nomodkey /ctrlkey /notify MerchantWnd MW_Buy_Button leftmouseup
				/delay 1s
				/doevents
			}
		}
	/next a

/return


| --------------------------------------------------------------------------------------------
| SUB: ScribeSpells
| --------------------------------------------------------------------------------------------
Sub ScribeSpells
	/declare Bag int local
	/declare Slot int local
	/declare MaxInvSlots int local 10

	/if (${Cursor.ID}) /autoinv
	|** Opening your inventory for access bag slots **|
	/if (!${Window[InventoryWindow].Open}) {
		/windowstate InventoryWindow open
	}
	|** Open all bags **|
	/keypress OPEN_INV_BAGS

	
	|** Check Top Level Inventory Slot for bag/no bag **|
	/for Bag 1 to ${MaxInvSlots}
		|** If it's a bag do this **|
		/if (${InvSlot[pack${Bag}].Item.Container}) {
			/if (!${Window[Pack${Bag}].Open}) /itemnotify pack${Bag} rightmouseup
			/delay 1s ${Window[Pack${Bag}].Open}
			/delay 5

			/for Slot 1 to ${InvSlot[pack${Bag}].Item.Container}
				/if (${InvSlot[pack${Bag}].Item.Item[${Slot}].Type.Equal[Scroll]} && ${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell.Level} <= ${Me.Level} && !${Me.Book[${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell.Name}]}) {
					/nomodkey /ctrlkey /itemnotify in pack${Bag} ${Slot} rightmouseup
					/delay 1s ${Cursor.ID}
					/if (${Cursor.ID}) /call doScribe
				}
			/next Slot
			|** Close the bag I just checked **|
			/if (${Window[Pack${Bag}].Open}) /itemnotify pack${Bag} rightmouseup
		} else {
			|** If it's not a bag, do this **|
			| Debug message /echo TopLevel Inv Slot ~ IsAScroll: ${InvSlot[pack${Bag}].Item.Type.Equal[Scroll]} && Item Spell level: ${InvSlot[pack${Bag}].Item.Spell.Level} <= My Level: ${Me.Level} && Scribed Already: !${Me.Book[${InvSlot[pack${Bag}].Item.Spell.Name}]}
			/if (${InvSlot[pack${Bag}].Item.Type.Equal[Scroll]} && ${InvSlot[pack${Bag}].Item.Spell.Level} <= ${Me.Level} && !${Me.Book[${InvSlot[pack${Bag}].Item.Spell.Name}]}) {
				/echo Scribing: ${InvSlot[Pack${Bag}].Item.Name}
				/nomodkey /ctrlkey /itemnotify pack${Bag} rightmouseup
				/delay 1s ${Cursor.ID}
				/if (${Cursor.ID}) /call doScribe
			}
		}
	/next Bag

	/if (${Window[SpellBookWnd].Open}) /squelch /windowstate SpellBookWnd close
/return


| --------------------------------------------------------------------------------------------
| SUB: doScribe
| --------------------------------------------------------------------------------------------
Sub doScribe
	/declare tOut timer local 10s

:WaitFinished
	/if (${Window[ConfirmationDialogBox].Open} && ${Window[ConfirmationDialogBox].Child[CD_TextOutput].Text.Find[${Cursor.Spell.Name} will replace]}) /notify ConfirmationDialogBox Yes_Button leftmouseup
	/if (!${tOut}) /autoinv
	/delay 2
	/doevents
	/if (${Cursor.ID}) /goto :WaitFinished
/return


| --------------------------------------------------------------------------------------------
| SUB: BuyTomes
| --------------------------------------------------------------------------------------------
Sub BuyTomes(string _minLevel, int _maxLevel)
	/if (!${Merchant.Open}) /return
	|Modified to Merchant.ItemsReceived
|	/delay 10s ${Merchant.ItemsReceived}
    /if (!${Merchant.Items}) /return

	/declare a int local
	/declare b int local
	/declare c int local
	/declare SpellName string local

	/for a 1 to ${Merchant.Items}
		/if (!${Me.FreeInventory}) /return
		/varset c 0
		/varset SpellName ${Merchant.Item[${a}].Spell.Name}
		/if (${SpellName.Find[ Rk. II ]}) /varset SpellName ${Merchant.Item[${a}].Spell.Name.Replace[ Rk. II ,]}
		/if (${SpellName.Find[ Rk. III ]}) /varset SpellName ${Merchant.Item[${a}].Spell.Name.Replace[ Rk. III ,]}
	|/echo Item ${a} is ${Merchant.Item[${a}].Spell.Name}

		/if (${Merchant.Item[${a}].Type.Equal[Scroll]} && ${Merchant.Item[${a}].Spell.Level} >= ${_minLevel} && ${Merchant.Item[${a}].Spell.Level} <= ${_maxLevel} && ${Math.Calc[${Merchant.Item[${a}].BuyPrice}\1000]} < ${Me.Platinum}) {

			/if (${Me.CombatAbility[${SpellName}]}) {
				/echo :: I already know ${SpellName}
			/continue
			}

			/if (${FindItemCount[${Merchant.Item[${a}]}]}) {
				/echo :: I already have ${Merchant.Item[${a}]} in inventory
			/continue
			}

			/if (${Me.CombatAbility[${SpellName} Rk. II]} || ${FindItemCount[${Merchant.Item[${a}]} Rk. II]}) {
				/echo :: Skipping lower rank of ${SpellName}
			/continue
			}

			/if (${Me.CombatAbility[${SpellName} Rk. III]} || ${FindItemCount[${Merchant.Item[${a}]} Rk. III]}) {
				/echo :: I already have the highest rank of ${SpellName}
			/continue
			}

		| this loop is needed because the merchant item number doesn't match up to the interface line number
			/for b 1 to ${Window[MerchantWnd].Child[MW_ItemList].Items}
				/if (${Window[MerchantWnd].Child[MW_ItemList].List[${b},2].Equal[${Merchant.Item[${a}]}]}) /varset c ${b}
			/next b

		| merchant line number matches what we are looking to buy, buy 1 copy of it
			/if (${c}) {
				/echo Buying ${Window[MerchantWnd].Child[MW_ItemList].List[${c},2]}
				/notify MerchantWnd MW_ItemList listselect ${c}
				/nomodkey /ctrlkey /notify MerchantWnd MW_Buy_Button leftmouseup
				/delay 1s
				/doevents
			}
		}
	/next a
/return


| --------------------------------------------------------------------------------------------
| SUB: ScribeTomes
| --------------------------------------------------------------------------------------------
Sub ScribeTomes
	/declare Bag int local
	/declare Slot int local
	/declare MaxInvSlots int local 10
	/declare HasVoA int outer 0
	/declare InvScribeSlot int local 1

	/if (${Me.HaveExpansion[Veil of Alaris]}) /varset HasVoA 1

	/if (${Cursor.ID}) /autoinv

	/if (!${HasVoA} && ${InvSlot[pack${InvScribeSlot}].Item.Type.Equal[Scroll]} && ${InvSlot[pack${InvScribeSlot}].Item.Spell.Level} <= ${Me.Level} && !${Me.Book[${InvSlot[pack${InvScribeSlot}].Item.Spell.Name}]}) /nomodkey /ctrlkey /itemnotify ${InvSlot[pack${InvScribeSlot}]} rightmouseup

	/for Bag 1 to ${MaxInvSlots}
		/if (${InvSlot[pack${Bag}].Item.Container}) {
			/if (!${Window[Pack${Bag}].Open}) /itemnotify pack${Bag} rightmouseup
			/delay 1s ${Window[Pack${Bag}].Open}
			/for Slot 1 to ${InvSlot[pack${Bag}].Item.Container}
				/if (${InvSlot[pack${Bag}].Item.Item[${Slot}].Name.Find[Tome]} && ${InvSlot[pack${Bag}].Item.Item[${Slot}].Type.Equal[Scroll]} && ${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell.Level} <= ${Me.Level} && !${Me.Book[${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell.Name}]}) {
					/if (${HasVoA}) {
						/nomodkey /ctrlkey /itemnotify in pack${Bag} ${Slot} rightmouseup
						/delay 1s !${InvSlot[pack${Bag}].Item.Item[${Slot}].ID}
					} else {
						/nomodkey /ctrlkey /itemnotify in pack${Bag} ${Slot} leftmouseup
						/delay 1s ${Cursor.ID}
						/nomodkey /ctrlkey /itemnotify ${InvSlot[pack${InvScribeSlot}]} leftmouseup
						/delay 1s !${Cursor.ID}
						/nomodkey /ctrlkey /itemnotify ${InvSlot[pack${InvScribeSlot}]} rightmouseup
						/delay 1s !${InvSlot[pack${InvScribeSlot}].ID}
					}
				}
			/next Slot

		}
		/if (${Window[Pack${Bag}].Open}) /itemnotify pack${Bag} rightmouseup
	/next Bag
	/if (${Cursor.ID}) /autoinv
/return


| --------------------------------------------------------------------------------------------
| SUB: Event_NotGold
| --------------------------------------------------------------------------------------------
Sub Event_NotGold
	/autoinv
/return


| --------------------------------------------------------------------------------------------
| SUB: Event_WrongDiety
| --------------------------------------------------------------------------------------------
Sub Event_WrongDiety
	/autoinv
/return


| --------------------------------------------------------------------------------------------
| SUB: Event_FullInventory
| --------------------------------------------------------------------------------------------
Sub Event_FullInventory
	/if (${Merchant.Open}) {
		/notify MerchantWnd MW_Done_Button leftmouseup
		/delay 1s !${Merchant.Open}
	}
	/varset DoLoop 1

/return

| --------------------------------------------------------------------------------------------
| SUB: Zone ${_destination.Equal[PoKnowledge]}
| --------------------------------------------------------------------------------------------
Sub go_to_pok(string _destination)
	/if (!${Select[${Zone.ShortName},PoKnowledge,moors,crescent]}) /call useorigin
	/while (!${Zone.ShortName.Equal[PoKnowledge]}) {
	
		/if (${Zone.ShortName.Equal[moors]}) /call moors
		/if (${Zone.ShortName.Equal[crescent]}) /call crescent
		/if (${Zone.ShortName.Equal[PoKnowledge]}) /call PoKnowledge
		/delay 2
	}
/return

| --------------------------------------------------------------------------------------------
| SUB: Zone2
| --------------------------------------------------------------------------------------------
Sub go_to_guildhall
	/if (!${Select[${Zone.ShortName},GuildLobby,GuildHall,PoKnowledge,moors,crescent]}) /call go_to_pok
	/while (!${Zone.ShortName.Equal[GuildHall]}) {
		/if (${Zone.ShortName.Equal[PoKnowledge]}) /call guildlobby
		/if (${Zone.ShortName.Equal[GuildLobby]}) /call guildhall
		/delay 2
	}
/return
| --------------------------------------------------------------------------------------------
| SUB: useorigin
| --------------------------------------------------------------------------------------------
Sub useorigin
	/while (!${Me.AltAbilityReady[Origin]} && !${Me.AltAbilityReady[Gate]}) {
		/echo \ag--\atOrigin or Gate not ready, re-checking in 30s\ag
		/delay 30s
	}
	/echo \ag--\atUsing Origin to get to your Origin Home\ag--
	/echo \ag--\atSince you are not within a zone we know\ag--
	/if (${validate_cast[FALSE, alt, "Gate", ${Me.ID}]}) {
		/call core_cast2 "Gate" alt ${Me.ID} FALSE
	}
	/if (${Me.AltAbilityReady[Origin]}) /alt act 331
	/delay 5
	/while (${Me.Casting.ID}) {
		/delay 1s
	}
	/delay 15s ${Me.Zoning}
	/delay 2
/return

| --------------------------------------------------------------------------------------------
| SUB: PoKnowledge
| --------------------------------------------------------------------------------------------
Sub PoKnowledge
	|/echo \ag--\atYou are in PoK, starting to get spells/tomes\ag--
/return

| --------------------------------------------------------------------------------------------
| SUB: moors
| --------------------------------------------------------------------------------------------
Sub moors
	/echo \ag--\atZoning into PoK \ag--
	/squelch /nav door id 68 click
	/while (${Navigation.Active}) {
		/delay 1s
	}
	/delay 15s ${Zone.ShortName.Equal[PoKnowledge]}==TRUE
	/delay 1s
/return
 
| --------------------------------------------------------------------------------------------
| SUB: crescent
| --------------------------------------------------------------------------------------------
Sub crescent
	/echo \ag--\atZoning to Moors \ag--
	/squelch /nav loc -631 -2868 -29
	/while (${Navigation.Active}) {
		/delay 1s
	}
	/delay 15s ${Zone.ShortName.Equal[Moors]}==TRUE
	/delay 1s
/return
| --------------------------------------------------------------------------------------------
| SUB: guild lobby
| --------------------------------------------------------------------------------------------
Sub guildlobby
	/echo \ag--\atZoning to Guild Lobby \ag--
	/squelch /nav loc -369 1409 -114
	/while (${Navigation.Active}) {
		/delay 1s
	}
	/doortarget
	/delay 2
	/click left door
	/delay 15s ${Zone.ShortName.Equal[GuildLobby]}==TRUE
	/delay 1s
/return

| --------------------------------------------------------------------------------------------
| SUB: guild hall
| --------------------------------------------------------------------------------------------
Sub guildhall
	/echo \ag--\atZoning to Guild Hall \ag--
	/squelch /nav loc 617 -46 -2
	/while (${Navigation.Active}) {
		/delay 1s
	}
	/doortarget
	/delay 2
	/click left door
	/delay 15s ${Zone.ShortName.Equal[GuildHall]}==TRUE
	/delay 1s
/return


| --------------------------------------------------------------------------------------------
| SUB: moors
| --------------------------------------------------------------------------------------------
Sub pot
	/echo \ag--\atZoning into PoT \ag--
	/squelch /nav loc -139.96 -337 -152.87
	/while (${Navigation.Active}) {
		/delay 1s
	}
	/doortarget
	/delay 2
	/click left door
	/delay 15s ${Zone.ShortName.Equal[PoTranquility]}==TRUE
	/delay 1s
/return

| --------------------------------------------------------------------------------------------
| SUB: guild hall
| --------------------------------------------------------------------------------------------
Sub portalpool(string _zoneName)
	/declare checker bool local TRUE
	/echo \ag--\atZoning to Portal Pool \ag--
	/squelch /nav loc -22.19 -133.72 2.31
	/while (${Navigation.Active}) {
		/delay 1s
	}
	/delay 1s
	/while (${checker}) {
		/echo Waiting for LargeDialogWindow...
		/delay 3
		/if (${Window[LargeDialogWindow].Open}) /notify LargeDialogWindow LDW_YesButton leftmouseup
		/if (${Me.Zoning}) /delay 4s
		/if (${Zone.ShortName.Equal[${_zoneName}]} || ${Zone.ShortName.Equal[${_zoneName}two]}) /varset checker FALSE
	}
	/if (${Me.Zoning}) /delay 4s
	/delay 5s ${Zone.ShortName.Equal[${_zoneName}]}==TRUE
	/delay 1s
/return
| --------------------------------------------------------------------------------------------
| SUB: ClassMerchantPoK
| --------------------------------------------------------------------------------------------
Sub ClassMerchantPoKnowledge(string _zoneName)
	/if (${Me.Class.ShortName.Equal[WAR]}) {
		/declare WARMerchant[1] string outer 0
		/varset WARMerchant[1] "Heldin Swordbreaker"
	}
	/if (${Me.Class.ShortName.Equal[PAL]}) {
		/declare PALMerchant${_zoneName}[7] string outer 0
		|Paladin Spells 1-25
		/varset PALMerchant${_zoneName}[1] "Cavalier Waut"
		|Paladin Spells 26-50
		/varset PALMerchant${_zoneName}[2] "Cavalier Aodus"
		|Paladin Spells 51-60
		/varset PALMerchant${_zoneName}[3] "Cavalier Preradus"
		|Paladin Spells 61-70
		/varset PALMerchant${_zoneName}[4] "Cavalier Cerakor"
		|Paladin Spells 71-81
		/varset PALMerchant${_zoneName}[5] "Cavalier Ethigom"
		|Paladin Spells 81+
		/varset PALMerchant${_zoneName}[6] "Cavalier Tummings"
		|Paladin Tomes
		/varset PALMerchant${_zoneName}[7] "Ulin Velnik"
	}	
	/if (${Me.Class.ShortName.Equal[SHD]}) {
		/declare SHDMerchant${_zoneName}[7] string outer 0
		|SK Spells 1-25
		/varset SHDMerchant${_zoneName}[1] "Reaver Nydlil"
		|SK Spells 26-50
		/varset SHDMerchant${_zoneName}[2] "Reaver Uledrith"
		|SK Spells 51-60
		/varset SHDMerchant${_zoneName}[3] "Reaver Thirlan"
		|SK Spells 61-70
		/varset SHDMerchant${_zoneName}[4] "Reaver Muron"
		|SK Spells 71-80
		/varset SHDMerchant${_zoneName}[5] "Reaver Praden"
		|SK Spells 81+
		/varset SHDMerchant${_zoneName}[6] "Reaver Enold"
		|SK Tomes
		/varset SHDMerchant${_zoneName}[7] "Zhao V`karin"
	}
	/if (${Me.Class.ShortName.Equal[BST]}) {
		/declare BSTMerchant${_zoneName}[7] string outer 0
		|Beast Spells 1-25
		/varset BSTMerchant${_zoneName}[1] "Primalist Saosith"
		|Beast Spells 26-50
		/varset BSTMerchant${_zoneName}[2] "Primalist Worenon"
		|Beast Spells 51-60
		/varset BSTMerchant${_zoneName}[3] "Primalist Nydalith"
		|Beast Spells 61-70
		/varset BSTMerchant${_zoneName}[4] "Primalist Loerith"
		|Beast Spells 71-80
		/varset BSTMerchant${_zoneName}[5] "Primalist Uliag"
		|Beast Spells 81+
		/varset BSTMerchant${_zoneName}[6] "Primalist Beal"
		|Beast Tomes
		/varset BSTMerchant${_zoneName}[7] "Tana Clawguard"
	}
	/if (${Me.Class.ShortName.Equal[BER]}) {
		/declare BERMerchant${_zoneName}[2] string outer 0
		|Berserker Tomes
		/varset BERMerchant${_zoneName}[1] "Gaddi Buruca"
		|Berserker Tomes
		/varset BERMerchant${_zoneName}[2] "Kurlond Axebringer"
	}
	/if (${Me.Class.ShortName.Equal[MNK]}) {
		/declare MNKMerchant${_zoneName}[1] string outer 0
		|Monk Tomes
		/varset MNKMerchant${_zoneName}[1] "Beorobin Amondson"
	}
	/if (${Me.Class.ShortName.Equal[RNG]}) {
		/declare RNGMerchant${_zoneName}[7] string outer 0
		|Ranger Spells 1-25
		/varset RNGMerchant${_zoneName}[1] "Pathfinder Viliken"
		|Ranger Spells 26-50
		/varset RNGMerchant${_zoneName}[2] "Pathfinder Vaered"
		|Ranger Spells 51-60
		/varset RNGMerchant${_zoneName}[3] "Pathfinder Thoajin"
		|Ranger Spells 61-70
		/varset RNGMerchant${_zoneName}[4] "Pathfinder Naend"
		|Ranger Spells 71-80
		/varset RNGMerchant${_zoneName}[5] "Pathfinder Arelat"
		|Ranger Spells 81+
		/varset RNGMerchant${_zoneName}[6] "Pathfinder Sweeneph"
		|Ranger Tomes
		/varset RNGMerchant${_zoneName}[7] "Keshyk Wardorn"
	}
	/if (${Me.Class.ShortName.Equal[ROG]}) {		
		/declare ROGMerchant${_zoneName}[1] string outer 0
		|Rogue Tomes
		/varset ROGMerchant${_zoneName}[1] "Blane Darkblade"
	}
	/if (${Me.Class.ShortName.Equal[MAG]}) {
		/declare MAGMerchant${_zoneName}[6] string outer 0
		|Mage Spells 1-25
		/varset MAGMerchant${_zoneName}[1] "Elementalist Somat"
		|Mage Spells 26-50
		/varset MAGMerchant${_zoneName}[2] "Elementalist Kaeob"
		|Mage Spells 51-60
		/varset MAGMerchant${_zoneName}[3] "Elementalist Padan"
		|Mage Spells 61-70
		/varset MAGMerchant${_zoneName}[4] "Elementalist Siewth"
		|Mage Spells 71-80
		/varset MAGMerchant${_zoneName}[5] "Elementalist Onaec"
		|Mage Spells 81+
		/varset MAGMerchant${_zoneName}[6] "Elementalist Bartbur"
	}
	/if (${Me.Class.ShortName.Equal[NEC]}) {
		/declare NECMerchant${_zoneName}[6] string outer 0
		|Nec Spells 1-25
		/varset NECMerchant${_zoneName}[1] "Heretic Drahur"
		|Nec Spells 26-50
		/varset NECMerchant${_zoneName}[2] "Heretic Elirev"
		|Nec Spells 51-60
		/varset NECMerchant${_zoneName}[3] "Heretic Edalith"
		|Nec Spells 61-70
		/varset NECMerchant${_zoneName}[4] "Heretic Ceikon"
		|Nec Spells 71-80
		/varset NECMerchant${_zoneName}[5] "Heretic Niraf"
		|Nec Spells 81+
		/varset NECMerchant${_zoneName}[6] "Heretic Lartman"
	}
	/if (${Me.Class.ShortName.Equal[WIZ]}) {
		/declare WIZMerchant${_zoneName}[6] string outer 0
		|Wiz Spells 1-25
		/varset WIZMerchant${_zoneName}[1] "Channeler Olaemos"
		|Wiz Spells 25-50
		/varset WIZMerchant${_zoneName}[2] "Channeler Lariland"
		|Wiz Spells 51-60
		/varset WIZMerchant${_zoneName}[3] "Channeler Cerakoth"
		|Wiz Spells 61-70
		/varset WIZMerchant${_zoneName}[4] "Channeler Alyrianne"
		|Wiz Spells 71-80
		/varset WIZMerchant${_zoneName}[5] "Channeler Keatrem"
		|Wiz Spells 81+
		/varset WIZMerchant${_zoneName}[6] "Channeler Larkord"
	}
	/if (${Me.Class.ShortName.Equal[BRD]}) {
		/declare BRDMerchant${_zoneName}[7] string outer 0
		|Bard Spells 1-25
		/varset BRDMerchant${_zoneName}[1] "Minstrel Eoweril"
		|Bard Spells 26-50
		/varset BRDMerchant${_zoneName}[2] "Minstrel Joet"
		|Bard Spells 51-60
		/varset BRDMerchant${_zoneName}[3] "Minstrel Gwiar"
		|Bard Spells 61-70
		/varset BRDMerchant${_zoneName}[4] "Minstrel Silnon"
		|Bard Spells 71-80
		/varset BRDMerchant${_zoneName}[5] "Minstrel Cirsaelle"
		|Bard Spells 81+
		/varset BRDMerchant${_zoneName}[6] "Minstrel Franchot"
		|Bard Tomes
		/varset BRDMerchant${_zoneName}[7] "Larquin Julinok"
	}
	/if (${Me.Class.ShortName.Equal[ENC]}) {
		/declare ENCMerchant${_zoneName}[6] string outer 0
		|Enchanter Spells 1-25
		/varset ENCMerchant${_zoneName}[1] "Illusionist Jerup"
		|Enchanter Spells 26-50
		/varset ENCMerchant${_zoneName}[2] "Illusionist Sevat"
		|Enchanter Spells 51-60
		/varset ENCMerchant${_zoneName}[3] "Illusionist Lobaen"
		|Enchanter Spells 61-70
		/varset ENCMerchant${_zoneName}[4] "Illusionist Acored"
		|Enchanter Spells 71-80
		/varset ENCMerchant${_zoneName}[5] "Illusionist Warek"
		|Enchanter Spells 81+
		/varset ENCMerchant${_zoneName}[6] "Illusionist Phili"
	}
	/if (${Me.Class.ShortName.Equal[CLR]}) {
		/declare CLRMerchant${_zoneName}[6] string outer 0
		|Cleric Spells 1-25
		/varset CLRMerchant${_zoneName}[1] "Vicar Ceraen"
		|Cleric Spells 26-50
		/varset CLRMerchant${_zoneName}[2] "Vicar Thiran"
		|Cleric Spells 51-60
		/varset CLRMerchant${_zoneName}[3] "Vicar Delin"
		|Cleric Spells 61-70
		/varset CLRMerchant${_zoneName}[4] "Vicar Diarin"
		|Cleric Spells 71-80
		/varset CLRMerchant${_zoneName}[5] "Vicar Glaunn"
		|Cleric Spells 81+
		/varset CLRMerchant${_zoneName}[6] "Vicar Feyl"
	}
	/if (${Me.Class.ShortName.Equal[DRU]}) {
		/declare DRUMerchant${_zoneName}[6] string outer 0
		|Druid Spells 1-25
		/varset DRUMerchant${_zoneName}[1] "Wanderer Astobin"
		|Druid Spells 26-50
		/varset DRUMerchant${_zoneName}[2] "Wanderer Qenda"
		|Druid Spells 51-60
		/varset DRUMerchant${_zoneName}[3] "Wanderer Frardok"
		|Druid Spells 61-70
		/varset DRUMerchant${_zoneName}[4] "Wanderer Kedrisan"
		|Druid Spells 71-80
		/varset DRUMerchant${_zoneName}[5] "Wanderer Thermon"
		|Druid Spells 81+
		/varset DRUMerchant${_zoneName}[6] "Wanderer Abel"
	}
	/if (${Me.Class.ShortName.Equal[SHM]}) {
		/declare SHMMerchant${_zoneName}[6] string outer 0
		|Shaman Spells 1-25
		/varset SHMMerchant${_zoneName}[1] "Mystic Abomin"
		|Shaman Spells 26-50
		/varset SHMMerchant${_zoneName}[2] "Mystic Goharkor"
		|Shaman Spells 51-60
		/varset SHMMerchant${_zoneName}[3] "Mystic Ryrin"
		|Shaman Spells 61-70
		/varset SHMMerchant${_zoneName}[4] "Mystic Pikor"
		|Shaman Spells 71-80
		/varset SHMMerchant${_zoneName}[5] "Mystic Somas"
		|Shaman Spells 81+
		/varset SHMMerchant${_zoneName}[6] "Mystic Voskovek"
	}
/return

Sub ClassMerchantArgath(string _zoneName)
	/if (${Me.Class.ShortName.Equal[WAR]}) {
		/declare WARMerchant${_zoneName}[2] string outer 0
		/varset WARMerchant${_zoneName}[1] "Danibi"
		/varset WARMerchant${_zoneName}[2] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[PAL]}) {
		/declare PALMerchant${_zoneName}[3] string outer 0
		/varset PALMerchant${_zoneName}[1] "Ephinia"
		/varset PALMerchant${_zoneName}[2] "Danibi"
		/varset PALMerchant${_zoneName}[3] "Prilt the Summoner"
	}	
	/if (${Me.Class.ShortName.Equal[SHD]}) {
		/declare SHDMerchant${_zoneName}[3] string outer 0
		/varset SHDMerchant${_zoneName}[1] "Shelif"
		/varset SHDMerchant${_zoneName}[2] "Danibi"
		/varset SHDMerchant${_zoneName}[3] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[BST]}) {
		/declare BSTMerchant${_zoneName}[3] string outer 0
		/varset BSTMerchant${_zoneName}[1] "Stup"
		/varset BSTMerchant${_zoneName}[2] "Danibi"
		/varset BSTMerchant${_zoneName}[3] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[BER]}) {
		/declare BERMerchant${_zoneName}[2] string outer 0
		/varset BERMerchant${_zoneName}[1] "Danibi"
		/varset BERMerchant${_zoneName}[2] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[MNK]}) {
		/declare MNKMerchant${_zoneName}[2] string outer 0
		/varset MNKMerchant${_zoneName}[1] "Danibi"
		/varset MNKMerchant${_zoneName}[2] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[RNG]}) {
		/declare RNGMerchant${_zoneName}[2] string outer 0
		/varset RNGMerchant${_zoneName}[1] "Wonav"
		/varset RNGMerchant${_zoneName}[2] "Danibi"
	}
	/if (${Me.Class.ShortName.Equal[ROG]}) {		
		/declare ROGMerchant${_zoneName}[2] string outer 0
		/varset ROGMerchant${_zoneName}[1] "Danibi"
		/varset ROGMerchant${_zoneName}[2] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[MAG]}) {
		/declare MAGMerchant${_zoneName}[2] string outer 0
		/varset MAGMerchant${_zoneName}[1] "Matima"
		/varset MAGMerchant${_zoneName}[2] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[NEC]}) {
		/declare NECMerchant${_zoneName}[2] string outer 0
		/varset NECMerchant${_zoneName}[1] "Shelif"
		/varset NECMerchant${_zoneName}[2] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[WIZ]}) {
		/declare WIZMerchant${_zoneName}[2] string outer 0
		/varset WIZMerchant${_zoneName}[1] "Matima"
		/varset WIZMerchant${_zoneName}[2] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[BRD]}) {
		/declare BRDMerchant${_zoneName}[3] string outer 0
		/varset BRDMerchant${_zoneName}[1] "Nori"
		/varset BRDMerchant${_zoneName}[2] "Danibi"
		/varset BRDMerchant${_zoneName}[3] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[ENC]}) {
		/declare ENCMerchant${_zoneName}[2] string outer 0
		/varset ENCMerchant${_zoneName}[1] "Nori"
		/varset ENCMerchant${_zoneName}[2] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[CLR]}) {
		/declare CLRMerchant${_zoneName}[2] string outer 0
		/varset CLRMerchant${_zoneName}[1] "Ephinia"
		/varset CLRMerchant${_zoneName}[2] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[DRU]}) {
		/declare DRUMerchant${_zoneName}[2] string outer 0
		/varset DRUMerchant${_zoneName}[1] "Wonav"
		/varset DRUMerchant${_zoneName}[2] "Prilt the Summoner"
	}
	/if (${Me.Class.ShortName.Equal[SHM]}) {
		/declare SHMMerchant${_zoneName}[2] string outer 0
		/varset SHMMerchant${_zoneName}[1] "Matima"
		/varset SHMMerchant${_zoneName}[2] "Prilt the Summoner"
	}
/return


Sub ClassMerchantShardsLanding(string _zoneName)
	/if (${Me.Class.ShortName.Equal[WAR]}) {
		/declare WARMerchant${_zoneName}[1] string outer 0
		/varset WARMerchant${_zoneName}[1] "Went Steelshaft"
	}
	/if (${Me.Class.ShortName.Equal[PAL]}) {
		/declare PALMerchant${_zoneName}[2] string outer 0
		/varset PALMerchant${_zoneName}[1] "Olivia Dawnlight"
		/varset PALMerchant${_zoneName}[2] "Went Steelshaft"
	}	
	/if (${Me.Class.ShortName.Equal[SHD]}) {
		/declare SHDMerchant${_zoneName}[2] string outer 0
		/varset SHDMerchant${_zoneName}[1] "Lirit T`Prakk"
		/varset SHDMerchant${_zoneName}[2] "Went Steelshaft"
	}
	/if (${Me.Class.ShortName.Equal[BST]}) {
		/declare BSTMerchant${_zoneName}[2] string outer 0
		/varset BSTMerchant${_zoneName}[1] "Varille Alyrinshar"
		/varset BSTMerchant${_zoneName}[2] "Went Steelshaft"
	}
	/if (${Me.Class.ShortName.Equal[BER]}) {
		/declare BERMerchant${_zoneName}[1] string outer 0
		/varset BERMerchant${_zoneName}[1] "Went Steelshaft"
	}
	/if (${Me.Class.ShortName.Equal[MNK]}) {
		/declare MNKMerchant${_zoneName}[1] string outer 0
		/varset MNKMerchant${_zoneName}[1] "Went Steelshaft"
	}
	/if (${Me.Class.ShortName.Equal[RNG]}) {
		/declare RNGMerchant${_zoneName}[1] string outer 0
		/varset RNGMerchant${_zoneName}[1] "Noel Gladestrider"
	}
	/if (${Me.Class.ShortName.Equal[ROG]}) {		
		/declare ROGMerchant${_zoneName}[1] string outer 0
		/varset ROGMerchant${_zoneName}[1] "Went Steelshaft"
	}
	/if (${Me.Class.ShortName.Equal[MAG]}) {
		/declare MAGMerchant${_zoneName}[1] string outer 0
		/varset MAGMerchant${_zoneName}[1] "Gilab Flamesphere"
	}
	/if (${Me.Class.ShortName.Equal[NEC]}) {
		/declare NECMerchant${_zoneName}[1] string outer 0
		/varset NECMerchant${_zoneName}[1] "Lirit T`Prakk"
	}
	/if (${Me.Class.ShortName.Equal[WIZ]}) {
		/declare WIZMerchant${_zoneName}[1] string outer 0
		/varset WIZMerchant${_zoneName}[1] "Gilab Flamesphere"
	}
	/if (${Me.Class.ShortName.Equal[BRD]}) {
		/declare BRDMerchant${_zoneName}[2] string outer 0
		/varset BRDMerchant${_zoneName}[1] "Gilbert Songcryer"
		/varset BRDMerchant${_zoneName}[2] "Went Steelshaft"
	}
	/if (${Me.Class.ShortName.Equal[ENC]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Gilbert Songcryer"
	}
	/if (${Me.Class.ShortName.Equal[CLR]}) {
		/declare CLRMerchant${_zoneName}[1] string outer 0
		/varset CLRMerchant${_zoneName}[1] "Olivia Dawnlight"
	}
	/if (${Me.Class.ShortName.Equal[DRU]}) {
		/declare DRUMerchant${_zoneName}[1] string outer 0
		/varset DRUMerchant${_zoneName}[1] "Noel Gladestrider"
	}
	/if (${Me.Class.ShortName.Equal[SHM]}) {
		/declare SHMMerchant${_zoneName}[1] string outer 0
		/varset SHMMerchant${_zoneName}[1] "Varille Alyrinshar"
	}

/return

Sub ClassMerchantPoTranquility(string _zoneName)
	/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
	/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Warlowe Rida"
	
/return

Sub ClassMerchantLceanium(string _zoneName)
	/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
	/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Janeil Mon`estra"
/return

Sub ClassMerchantOverthere(string _zoneName)
	/if (${Me.Class.ShortName.Equal[WAR]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Cromslor"
	}
	/if (${Me.Class.ShortName.Equal[PAL]}) {
		/declare PALMerchant${_zoneName}[2] string outer 0
		/varset PALMerchant${_zoneName}[1] "Frinshalor"
		/varset PALMerchant${_zoneName}[2] "Cromslor"
	}	
	/if (${Me.Class.ShortName.Equal[SHD]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[2] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Druwdav Nporto"
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[2] "Cromslor"
	}
	/if (${Me.Class.ShortName.Equal[BST]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[2] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Pinskidan"
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[2] "Cromslor"
	}
	/if (${Me.Class.ShortName.Equal[BER]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Cromslor"
	}
	/if (${Me.Class.ShortName.Equal[MNK]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Cromslor"
	}
	/if (${Me.Class.ShortName.Equal[RNG]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Zowikinski"
	}
	/if (${Me.Class.ShortName.Equal[ROG]}) {		
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Cromslor"
	}
	/if (${Me.Class.ShortName.Equal[MAG]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Kris Tawalalin"
	}
	/if (${Me.Class.ShortName.Equal[NEC]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Druwdav Nporto"
	}
	/if (${Me.Class.ShortName.Equal[WIZ]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Kris Tawalalin"
	}
	/if (${Me.Class.ShortName.Equal[BRD]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[2] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Irarae"
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[2] "Cromslor"
	}
	/if (${Me.Class.ShortName.Equal[ENC]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Irarae"
	}
	/if (${Me.Class.ShortName.Equal[CLR]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Frinshalor"
	}
	/if (${Me.Class.ShortName.Equal[DRU]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Zowikinski"
	}
	/if (${Me.Class.ShortName.Equal[SHM]}) {
		/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
		/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Pinskidan"
	}
/return

Sub ClassMerchantStratos(string _zoneName)
	/declare ${Me.Class.ShortName}Merchant${_zoneName}[1] string outer 0
	/varset ${Me.Class.ShortName}Merchant${_zoneName}[1] "Fairelwil Amsapi"
/return