|- IHCRNG.mac - By IHC385
|- Automatic Ranger bot - 
|- Version 0.1
|- Updated: 7/3/2019
|- Credit: Toots, Noobhax0r, Maskoi, Ctaylor, Treehuggindruid. A lot of ideas were borrowed and modified from their macros
#Chat group
#Chat tell
#Chat raid
#turbo 80
#include IHCMercs\ihcsubs.inc
#include IHCMercs\ihcrngutil.inc
#include IHCMercs\ihcevents.inc
#warning
#bind SetVarInt	/setvarint
#bind CmdList        /ihchelp
#Event NotOnTarget	"#*#You cannot see your target#*#"
#Event NotOnTarget	"#*#Your target is too far away#*#"
#Event WornOff      "Your #1# spell has worn off of #*#."
#Event GroupChange	"#*#has joined the group#*#"

Sub Main
	/delay ${Math.Rand[10]}
	/doevents flush
	/declare MacroName       	string outer IHCRNG**ALPHA**
	/declare MacroPath       	string outer IHCMercs\IHCRNG
	/declare IHCVersion       	string outer 0.1 
	/declare IniFileName     	string outer ${MacroPath}_${EverQuest.Server}_${Me.CleanName}.ini

	/call RngSetup
	/call VarSetup
	/if (${IHCVersion.NotEqual[${IHCMacVersion}]}) {
		/call ClassAliasSetup
	}
	/call CheckSpells
	/call SetControlToon
	/call LoadSpellBar
	/varset BeforeCombat OpeningMove
|-Cursor ID
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}
	/call WelcomeMsg
	/if (${assistid}==${Me.ID}) {
		/echo \aw I am Main Assist
	} else {
		/echo \aw Assisting \ay >> \ag ${assistname} \ay << \aw at \ag ${AutoAssistAt}%
	}
	
	/if (${UseZoneLogic}) {
		/call ZoneEventChk
	}
 :mainloop
	/if (${changetoini}==1) /call INIChanges
	/if (${Me.Zoning}) {
		/call Zoning
	}
	/if (${Me.Hovering}) /call DeathSub
	/if (${Cursor.ID}) /call BagModRods
	/call IDUpdateCheck
	/if ((${Me.XTarget[1].ID} || (${Group.MainAssist.ID} && ${Group.MainAssist.ID}!=${Me.ID} && ${Target.ID}!=${Me.GroupAssistTarget.ID}) || ${SpawnCount[npc radius ${AssistRange} zradius 15 targetable playerstate 4]} || ${FollowMarkTarget}) && !${BackOffFlag} && ${DoAutoTarget}) /call FindTarget
	/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.ID}==${autotargetid} && ${Target.Distance}<${AssistRange} && (!${Target.Mezzed.ID} || ${AllowMezBreak}) && !${BackOffFlag} && ${DoAutoEngage}) /call EngageTarget
	/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.ID}==${autotargetid} && ${Target.Distance}<${AssistRange} && (!${Target.Mezzed.ID} || ${AllowMezBreak}) && !${BackOffFlag}) /call AANDisc
	/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.ID}==${autotargetid} && ${Target.Distance}<${AssistRange} && ${Ok2Assist} && (!${Target.Mezzed.ID} || ${AllowMezBreak}) && !${BackOffFlag}) /call Combatdps
	/if ((${Me.PctMana}>=30) && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID}) && (!${Me.Invis}) && !${MoveTo.Moving} && !${AdvPath.Following} && ${Stick.Status.Equal[OFF]} && ${DoBuffs}) /call BuffCheck
	/if ((${Me.PctMana}>=30) && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID}) && (!${Me.Invis}) && !${MoveTo.Moving} && !${AdvPath.Following} && ${Stick.Status.Equal[OFF]} && ${groupbufftimer}==0 && ${DoBuffs}) /call BuffGroup
	/if (${Spawn[=${FollowToonName}].ID} && !${MoveTo.Moving} && ${Stick.Status.Equal[OFF]} && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID} || ${Spawn[id ${assistid}].Distance}>${AssistRange} || (!${Spawn[id ${assistid}].LineOfSight}))) /call FollowToon
	/if (${Spawn[=${FollowToonName}].ID} && (${Me.Casting.ID} || ${Me.XTarget[1].ID}) && ${AdvPath.Following}) /squelch /afollow off
	/if (!${Me.XTarget[1].ID}&& !${KillTargetID}) /call AutoCampCheck
	/if (${UseModRods}) /call ClickModRoD
	/if (${DoMed} && ${spellrememtimer}==0) /call AutoMed
	/if (${UseZoneLogic} && ${EventSetupFlag}) {
		/call EventLogic${EventSetupFlag}
	}
	/if (((!${Spawn[targetable id ${KillTargetID}].ID}) || ${Spawn[corpse id ${KillTargetID}].ID}) && ${KillTargetID}!=0) {
		/varset KillTargetID 0
		/varset SpawnSearchType npc
		/varset autotargetid 0
	}
	/if (${Me.Pet.Combat} && !${Ok2Assist}) {
		/pet back off
	}
	/doevents
	/goto :mainloop
/return
|----------------------------------------------------------------------------
|- SUB: AANDisc
|---------------------------------------------------------------------------- 
Sub AANDisc
	/if ((${Me.XTarget}>=${BurnMobCount} || (${Target.Named} && ${BurnNamed}) || ${BurnAlways} || ${burnnow})) {
		/if (${FindItem[=${Epicsword}].ID} && ${Me.ItemReady[=${Epicsword}]} && !${Me.AltAbilityReady[Auspice of the Hunter]} && !${Me.Song[${Me.AltAbility[Auspice of the Hunter].Spell.Name}].ID} && ${UseEpic}) {
			/useitem "${Epicsword}"
			/delay 10
		}
		|-Activate Bow or Melee disc
		/if (${Me.CombatAbilityReady[${BowDisc}]} && !${UseMelee}) {
			/call DiscNow "${BowDisc}"
			/delay 5
		} else /if (${Me.CombatAbilityReady[${MeleeDisc}]} && ${UseMelee}) {
			/call DiscNow "${MeleeDisc}"
			/delay 5
		}
		/if (${Me.AltAbilityReady[Scarlet Cheetah's Fang]}) {
			/alt act ${Me.AltAbility[Scarlet Cheetah's Fang].ID}
			/delay 5
		}
		/if (${Me.AltAbilityReady[Scout's Mastery of the Elements]}) {
			/alt act ${Me.AltAbility[Scout's Mastery of the Elements].ID}
			/delay 5
		}
		|-Chain abilities in order to extend burn time
		/if (${Me.AltAbilityReady[Guardian of the Forest]} && !${Me.Song[${Me.AltAbility[Outrider's Accuracy].Spell.Name}].ID} && !${Me.Song[${Me.AltAbility[Group Guardian of the Forest].Spell.Name}].ID}) {
			/alt act ${Me.AltAbility[Guardian of the Forest].ID}
			/delay 5
		} else /if (${Me.AltAbilityReady[Outrider's Accuracy]} && !${Me.AltAbilityReady[Guardian of the Forest]} && !${Me.Song[${Me.AltAbility[Guardian of the Forest].Spell.Name}].ID}  && !${Me.Song[${Me.AltAbility[Group Guardian of the Forest].Spell.Name}].ID}) {
			/alt act ${Me.AltAbility[Outrider's Accuracy].ID}
			/delay 5
		} else /if (${Me.AltAbilityReady[Group Guardian of the Forest]} && !${Me.AltAbilityReady[Outrider's Accuracy]} && !${Me.AltAbilityReady[Guardian of the Forest]} && !${Me.Song[${Me.AltAbility[Guardian of the Forest].Spell.Name}].ID} && !${Me.Song[${Me.AltAbility[Outrider's Accuracy].Spell.Name}].ID}) {
			/alt act ${Me.AltAbility[Group Guardian of the Forest].ID}
			/delay 5
		}
		/if (${Me.AltAbilityReady[Outrider's Attack]}) {
			/alt act ${Me.AltAbility[Outrider's Attack].ID}
			/delay 5
		}
		|-Does not stack with Ber Aura
|-		/if (${Me.AltAbilityReady[Fundament: Third Spire of the Pathfinders]}) {
|-			/alt act ${Me.AltAbility[Fundament: Third Spire of the Pathfinders].ID}
|-			/delay 5
|-		}
		/if (${Me.AltAbilityReady[Imbued Ferocity]}) {
			/alt act ${Me.AltAbility[Imbued Ferocity].ID}
			/delay 5
		}
		/if (${Me.AltAbilityReady[Auspice of the Hunter]}) {
			/alt act ${Me.AltAbility[Auspice of the Hunter].ID}
			/delay 5
		}
	} else {
		/if (${FindItem[=${Epicsword}].ID} && ${Me.ItemReady[=${Epicsword}]} && !${Me.Song[${Me.AltAbility[Auspice of the Hunter].Spell.Name}].ID} && ${UseEpic}) {
			/useitem "${Epicsword}"
			/delay 10
		}
		/if (${Me.AltAbilityReady[Guardian of the Forest]} && !${Me.Song[${Me.AltAbility[Outrider's Accuracy].Spell.Name}].ID} && !${Me.Song[${Me.AltAbility[Group Guardian of the Forest].Spell.Name}].ID}) {
			/alt act ${Me.AltAbility[Guardian of the Forest].ID}
			/delay 5
		} else /if (${Me.AltAbilityReady[Outrider's Accuracy]} && !${Me.AltAbilityReady[Guardian of the Forest]} && !${Me.Song[${Me.AltAbility[Guardian of the Forest].Spell.Name}].ID}  && !${Me.Song[${Me.AltAbility[Group Guardian of the Forest].Spell.Name}].ID}) {
			/alt act ${Me.AltAbility[Outrider's Accuracy].ID}
			/delay 5
		} else /if (${Me.AltAbilityReady[Group Guardian of the Forest]} && !${Me.AltAbilityReady[Outrider's Accuracy]} && !${Me.AltAbilityReady[Guardian of the Forest]} && !${Me.Song[${Me.AltAbility[Guardian of the Forest].Spell.Name}].ID} && !${Me.Song[${Me.AltAbility[Outrider's Accuracy].Spell.Name}].ID}) {
			/alt act ${Me.AltAbility[Group Guardian of the Forest].ID}
			/delay 5
		}
		/if (${Me.AltAbilityReady[Outrider's Attack]}) {
			/alt act ${Me.AltAbility[Outrider's Attack].ID}
			/delay 5
		}
		|-Does not stack with Ber Aura
|-		/if (${Me.AltAbilityReady[Fundament: Third Spire of the Pathfinders]}) {
|-			/alt act ${Me.AltAbility[Fundament: Third Spire of the Pathfinders].ID}
|-			/delay 5
|-		}
	}
	/doevents
/return
|----------------------------------------------------------------------------
|- SUB: Combatdps
|---------------------------------------------------------------------------- 
Sub Combatdps
	/doevents
|- ${SwarmDoT}
	/if (${UseMelee}==0) {
		/if (${UseOpener} && !${Me.Combat} && !${Me.AutoFire} ) /call OpeningMove
		/if (!${Me.AutoFire}) {
			/autofire on
			/face
		}
		/if (${Target.Distance}>=50 || ${Target.Distance}<=30) {
			/stick 45 moveback
		} else /if (${Stick.Status.Equal[ON]} && ${Target.Distance}<50 && ${Target.Distance}>30) {
			/stick off
		}
	}
	/if (${Me.PctMana}>=${Manatonuke}) {
			/if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${CalledShotsArrow}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Me.CurrentMana}>${Spell[${CalledShotsArrow}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${CalledShotsArrow}].RankName}" ${autotargetid}
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${FocusedArrows}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Me.CurrentMana}>${Spell[${FocusedArrows}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${FocusedArrows}].RankName}" ${autotargetid}
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${DichoSpell}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Me.CurrentMana}>${Spell[${DichoSpell}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${DichoSpell}].RankName}" ${autotargetid}
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${SummerNuke}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Me.CurrentMana}>${Spell[${SummerNuke}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/if (${Me.AltAbilityReady[Elemental Arrow]} && !${Target.Buff[${Me.AltAbility[Glacial Arrow].Spell.Name}].ID} && !${Target.Buff[${Me.AltAbility[Volatile Arrow].Spell.Name}].ID}) {
					/alt act ${Me.AltAbility[Elemental Arrow].ID}
					/delay 5
				} else /if (${Me.AltAbilityReady[Volatile Arrow]} && !${Me.AltAbilityReady[Elemental Arrow]} && !${Target.Buff[${Me.AltAbility[Elemental Arrow].Spell.Name}].ID}) {
					/alt act ${Me.AltAbility[Volatile Arrow].ID}
					/delay 5	
				} else /if (${Me.AltAbilityReady[Glacial Arrow]} && !${Me.AltAbilityReady[Elemental Arrow]} && !${Target.Buff[${Me.AltAbility[Elemental Arrow].Spell.Name}].ID}) {
					/alt act ${Me.AltAbility[Glacial Arrow].ID}
					/delay 5
				}
				/call SpellQueue "${Spell[${SummerNuke}].RankName}" ${autotargetid}
			}
	}
	
	/if (${Me.AbilityReady[Kick]} && ${Target.Distance}<=${Target.MaxRangeTo} && ${Me.Combat}) {
			/call AbilityNow "Kick"
	} else /if (${Me.CombatAbilityReady[${JoltingKicks}]} && ${Target.Distance}<=50 && !${Me.Moving}) {
			/disc ${JoltingKicks}
			/delay 5
	} else /if (${Me.CombatAbilityReady[${AEBlades}]} && ${Target.Distance}<=50 && !${Me.Moving} && ${UseAoE}) {
			/disc ${AEBlades}
			/delay 5
	} else /if (${Me.CombatAbilityReady[${FocusedBlades}]} && ${Target.Distance}<=50 && !${Me.Moving}) {
			/disc ${FocusedBlades}
			/delay 5
	}
|-	else /if (${Me.CombatAbilityReady[${ReflexSlashHeal}]} && ${Target.Distance}<=${Target.MaxRangeTo} && ${Me.Combat}) {
|-			/disc ${ReflexSlashHeal}
|-			/delay 5
|-	}
/return
|----------------------------------------------------------------------------
|- SUB: BuffGroup
|---------------------------------------------------------------------------- 
Sub BuffGroup
	/declare bmember			int local 0
	/if (${groupbufftimer}==0) /varset groupbufftimer 10s
	/for bmember 1 to ${Group}
		/if (${Group.Member[${bmember}].Distance}<100 && !${Group.Member[${bmember}].OtherZone} && (!${Me.Casting.ID}) && ${DanNet.Peers.Find[${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower}]}) {
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Buff[${GroupPredatorBuff}].ID" "tmpbuffid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Spell[${GroupPredatorBuff}].Stacks" "tmpstackcheck" "bool"
				/if (!${tmpbuffid} && ${tmpstackcheck} && ${Me.CurrentMana}>${Spell[${ShoutBuff}].Mana} && (!${Me.Casting.ID}) && ${Me.Book[${ShoutBuff}]}) {
					/call SpellQueue "${ShoutBuff}" ${Group.Member[${bmember}].ID}
					/varset spellrememtimer 5s
					/delay 10
				}
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Buff[${GroupStrengthBuff}].ID" "tmpbuffid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Spell[${GroupStrengthBuff}].Stacks" "tmpstackcheck" "bool"
				/if (!${tmpbuffid} && ${tmpstackcheck} && ${Me.CurrentMana}>${Spell[${ShoutBuff}].Mana} && (!${Me.Casting.ID}) && ${Me.Book[${ShoutBuff}]}) {
					/call SpellQueue "${ShoutBuff}" ${Group.Member[${bmember}].ID}
					/varset spellrememtimer 5s
					/delay 10
				}
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Buff[${GroupEnrichmentBuff}].ID" "tmpbuffid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Spell[${GroupEnrichmentBuff}].Stacks" "tmpstackcheck" "bool"
				/if (!${tmpbuffid} && ${tmpstackcheck} && ${Me.CurrentMana}>${Spell[${GroupEnrichmentBuff}].Mana} && (!${Me.Casting.ID}) && ${Me.Book[${GroupEnrichmentBuff}]}) {
					/call SpellQueue "${GroupEnrichmentBuff}" ${Group.Member[${bmember}].ID}
					/varset spellrememtimer 5s
					/delay 10
				}
		}
	/next bmember
	|- Delete variable's
	/if (${Defined[tmpbuffid]}) /deletevar tmpbuffid
	/if (${Defined[tmpstackcheck]}) /deletevar tmpstackcheck
	/if (${Group.MainAssist.ID} && ${Target.ID}!=${Group.MainAssist.ID}) {
		/target id ${Group.MainAssist.ID}
		/if (${ReTargetDelay}==0) /varset ReTargetDelay 1m
		/if (${autotargetid}) /varset autotargetid 0
	}
/return
|----------------------------------------------------------------------------
|- SUB: BuffCheck
|----------------------------------------------------------------------------
Sub BuffCheck
	/if (!${Me.Buff[${GroupPredatorBuff}].ID} && !${Me.Casting.ID} && ${Spell[${GroupPredatorBuff}].Stacks} && ${Me.Book[${ShoutBuff}]} && ${Me.CurrentMana}>${Spell[${ShoutBuff}].Mana}) {
		/call SpellQueue "${ShoutBuff}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (!${Me.Buff[${GroupStrengthBuff}].ID} && !${Me.Casting.ID} && ${Spell[${GroupStrengthBuff}].Stacks} && ${Me.Book[${ShoutBuff}]} && ${Me.CurrentMana}>${Spell[${ShoutBuff}].Mana}) {
		/call SpellQueue "${ShoutBuff}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (!${Me.Buff[${GroupEnrichmentBuff}].ID} && !${Me.Casting.ID} && ${Spell[${GroupEnrichmentBuff}].Stacks} && ${Me.Book[${GroupEnrichmentBuff}]} && ${Me.CurrentMana}>${Spell[${GroupEnrichmentBuff}].Mana}) {
		/call SpellQueue "${GroupEnrichmentBuff}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (!${Me.Buff[${EyesManaRegenBuff}].ID} && !${Me.Casting.ID} && ${Spell[${EyesManaRegenBuff}].Stacks} && ${Me.Book[${UnityBuff}]} && ${Me.CurrentMana}>${Spell[${UnityBuff}].Mana}) {
		/call SpellQueue "${UnityBuff}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (!${Me.Buff[${KillShotBuff}].ID} && !${Me.Casting.ID} && ${Spell[${KillShotBuff}].Stacks} && ${Me.Book[${UnityBuff}]} && ${Me.CurrentMana}>${Spell[${UnityBuff}].Mana}) {
		/call SpellQueue "${UnityBuff}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (!${Me.Buff[${ParryProcBuff}].ID} && !${Me.Casting.ID} && ${Spell[${ParryProcBuff}].Stacks} && ${Me.Book[${ParryProcBuff}]} && ${Me.CurrentMana}>${Spell[${ParryProcBuff}].Mana}) {
		/call SpellQueue "${ParryProcBuff}" ${Me.ID}
		/varset spellrememtimer 5s
	}
/return
|----------------------------------------------------------------------------
|- SUB: Opening Move
|---------------------------------------------------------------------------- 
Sub OpeningMove
	/if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${ArrowOpener}].RankName}]} && ${Me.CurrentMana}>${Spell[${ArrowOpener}].Mana} && ${Me.PctMana}>=${Manatonuke} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight} && ${UseOpener}) {
		/call SpellQueue "${Spell[${ArrowOpener}].RankName}" ${autotargetid}
	}
/return
|----------------------------------------------------------------------------
|- SUB: Symbol - HP Buff Single use
|----------------------------------------------------------------------------
Sub Event_Chat(string ChatType,string ChatSender,string ChatText)

/return
|----------------------------------------------------------------------------
|- SUB: Event NotOnTarget - For dealing with too far away and cannot see messages
|----------------------------------------------------------------------------
Sub Event_NotOnTarget
	/if (${DoAutoEngage}) {
		/squelch /attack off
		/if (${DoAutoTarget}) /call FindTarget
		/delay 5
		/if (${Target.Distance}<${AssistRange}) /call EngageTarget
	}
	/doevents flush NotOnTarget
/return 
|----------------------------------------------------------------------------
|- SUB: Event_WornOff
|----------------------------------------------------------------------------
Sub Event_WornOff
	/doevents flush WornOff
/return 
|----------------------------------------------------------------------------
|- SUB: Event GroupChange
|----------------------------------------------------------------------------
Sub Event_GroupChange

/return 