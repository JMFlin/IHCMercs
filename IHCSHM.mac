|- IHCSHM.mac - By IHC385
|- Automatic Shaman bot -
|- Version 0.1
|- Updated: 5/24/2019
|- Credit: Toots, Noobhax0r, Maskoi, Ctaylor, Treehuggindruid. A lot of ideas were borrowed and modified from their macros
#Chat group
#Chat tell
#Chat raid
#turbo 80
#include IHCMercs\ihcsubs.inc
#include IHCMercs\ihcshmutil.inc
#include IHCMercs\events.inc
#warning
#bind SetVarInt	/setvarint
#bind CmdList        /ihchelp
#bind BNDSingleCure	/curesingle

Sub Main
	/delay ${Math.Rand[6]}
	/doevents flush
	/declare MacroName       	string outer IHCSHM**ALPHA**
	/declare MacroPath       	string outer IHCMercs\IHCSHM
	/declare IHCVersion       	string outer 1.2 
	/declare IniFileName     	string outer ${MacroPath}_${EverQuest.Server}_${Me.CleanName}.ini

	/call ShmSetup
	/call VarSetup
	/if (${IHCVersion.NotEqual[${IHCMacVersion}]}) {
		/call ClassAliasSetup
	}
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}
	/call CheckSpells
	/call SetControlToon
	/call LoadSpellBar
	/call alliance_check_group
	/if (${UseMelee}) /djoin ihcdps
	/pet hold on
|-Cursor ID
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}
	/call WelcomeMsg
	/if (${assistid}==${Me.ID}) {
		/echo \aw I am Main Assist
	} else {
		/echo \aw Assisting \ay >> \ag ${assistname} \ay << \aw at \ag ${AutoAssistAt}%
	}
	
	/if (${UseZoneLogic}) {
		/call ZoneEventChk
	}

 :mainloop
 	/call ModeSet
	/if (${Mode}==0) /call Travel
	/if (${Mode}==1) /call ManualPullCamping
	/if (${Mode}==2) /call ManualRunAndGun
	/if (${Mode}==3) /call ManualPullCamping
	/if (${Mode}==4) /call AFKRunAndGun
	/if (${Mode}==5) /call DoEvent
/goto :mainloop
/return
|----------------------------------------------------------------------------
|- SUB: ManualPullCamping
|----------------------------------------------------------------------------
Sub ManualPullCamping
	/call MakeCamp
    /call RemoveTravelBuffs 

	/while (${Mode}==1 || ${Mode}==3) {
		/if (${AdvPath.Following}) /afollow off
		/if (${Me.Hovering}) /call DeathSub
		/if (${Me.State.Equal[FEIGN]}) /stand

		/if (${State}==0) {
			/if (!${Me.Buff[Communion of the Cheetah].ID} && !${Me.XTarget[1].ID} && ${Me.AltAbilityReady[Communion of the Cheetah]}) /call AANow ${Me.AltAbility[Communion of the Cheetah].ID} ${Me.ID}
			/if (${Target.Type.Equal[Corpse]}) /target clear
			/if (!${Me.XTarget[1].ID} && !${KillTargetID}) /call MoveToCamp ${PullAutoCampX} ${PullAutoCampY} ${PullAutoCampZ} ${AutoCampRadius}
			/if (!${Me.Moving} && !${Me.XTarget[1].ID} && !${Me.Casting.ID}) /call IllusionCheck
			/if (${DoMed}) /call AutoMed
			/if (${Me.PctMana}>=30 && !${Me.Casting.ID} && !${Me.XTarget[1].ID} && !${Me.Moving} && !${KillTargetID}) /call BuffGroup
			/if (${Me.PctMana}>=30 && !${Me.Casting.ID} && !${Me.XTarget[1].ID} && !${Me.Moving} && !${KillTargetID}) /call BuffSelf
			/call TankChangeCheck
			/if (${Me.XTarget[1].ID}) /varset State 1
		}

		/if (${State}==1) {
			/if (${DoCC} && ${Me.XTarget[2].ID}) /call CC
			/if (!${Me.Casting.ID} && ${Me.Song[${GroupRenewalHoT}].ID} && ${Me.PctMana}>=20) /call BuffGroupMember "${GroupRenewalHoT}" ${Group.Member[0].ID}
			/if (${Me.XTarget[1].ID} && (${DoMalo} || ${DoAEMalo} || ${DoSlow} || ${DoAESlow}) && !${Me.Casting.ID}) /call DebuffMobs
			/if (${Me.XTarget[1].Distance}<40 && ${Target.ID}!=${Me.ID}) {
				/varset State 2
			}
		}

		/if (${State}==2) {
			/if (${Me.XTarget[1].ID}) /assist ${Group.MainAssist.Name}
			/call PetAttack
			/if (${Me.XTarget[1].ID} && (${DoMalo} || ${DoAEMalo} || ${DoSlow} || ${DoAESlow}) && !${Me.Casting.ID}) /call DebuffMobs
			/if (${Me.XTarget[1].ID}) /call AANDisc
			/if (!${Me.Casting.ID} && !${Me.Moving} && (${Me.XTarget[1].ID} || !${Me.Invis}) && ((${DoAACanni} && ${Me.PctMana}<${AACanniManaPct}) || (${DoSpellCanni} && ${Me.PctMana}<${CanniManaPct}))) /call HealthToMana
			/if (${AutoRez} && !${Me.Moving}) /call RezCheck
			/if (${DynamicHealing}) /call ConfigHeal
			/if (!${Me.Casting.ID} && (${Me.XTarget[1].ID} || !${Me.Invis})) /call HealGroup
			/if (${UseModRods}) /call ClickModRoD
			/if (${DoCC} && ${Me.XTarget[2].ID}) /call CC

			/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.Distance}<${AssistRange} && (!${Target.Mezzed.ID} || ${AllowMezBreak})) /call Combatdps
			/if (${Target.Type.Equal[Corpse]}) /target clear
			/if (!${Me.Casting.ID}) /call MoveToCamp ${PullAutoCampX} ${PullAutoCampY} ${PullAutoCampZ} ${AutoCampRadius}
			/if (!${Me.XTarget[1].ID}) /call PostCombat
		}
		/doevents
	}
/return
|----------------------------------------------------------------------------
|- SUB: ManualRunAndGun
|----------------------------------------------------------------------------
Sub ManualRunAndGun
	/if (${MakeCamp.Status.Equal[ON]}) /makecamp off
	/call RemoveTravelBuffs
	
	/while (${Mode}==2) {
		/if (${Me.Hovering}) /call DeathSub
		/if (${Me.State.Equal[FEIGN]}) /stand

		/if (!${Me.XTarget[1].ID} && !${Me.Moving}) /varset RunAndGunMedTimer 7s
		/if (!${Me.Moving} && !${Me.XTarget[1].ID} && !${Me.Casting.ID} && ${RunAndGunMedTimer}==0) /call IllusionCheck
		/if (!${Me.Moving} && !${Me.XTarget[1].ID} && !${Target.ID} && !${Me.Sitting} && ${RunAndGunMedTimer}==0) /sit
		/if (${Me.PctMana}>=30 && !${Me.Casting.ID} && !${Me.XTarget[1].ID} && !${Me.Moving} && ${RunAndGunMedTimer}==0) /call BuffGroup
		/if (${Me.PctMana}>=30 && !${Me.Casting.ID} && !${Me.XTarget[1].ID} && !${Me.Moving} && ${RunAndGunMedTimer}==0) /call BuffSelf

		/call TankChangeCheck

		/if (${DoCC} && ${Me.XTarget[2].ID}) /call CC
		/if (${Me.XTarget[1].ID} && (${DoMalo} || ${DoAEMalo} || ${DoSlow} || ${DoAESlow}) && !${Me.Casting.ID}) /call DebuffMobs

		/if (${Me.XTarget[1].ID} && ${Spawn[${Group.Leader.Name}].Distance}<40) /call CastersEngage
		
		/if (${Me.XTarget[1].ID}) /call AANDisc

		/if (!${Me.Casting.ID} && !${Me.Moving} && (${Me.XTarget[1].ID} || !${Me.Invis}) && ((${DoAACanni} && ${Me.PctMana}<${AACanniManaPct}) || (${DoSpellCanni} && ${Me.PctMana}<${CanniManaPct}))) /call HealthToMana

		/if (${AutoRez} && !${Me.Moving}) /call RezCheck

		/if (${DynamicHealing}) /call ConfigHeal

		/if (!${Me.Casting.ID} && (${Me.XTarget[1].ID} || !${Me.Invis})) /call HealGroup

		/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.Distance}<${AssistRange} && (!${Target.Mezzed.ID} || ${AllowMezBreak})) /call Combatdps

		/if (${UseModRods}) /call ClickModRoD
		/call PetAttack

		/if (!${Me.XTarget[1].ID} || ${Spawn[${Group.Leader.Name}].Distance}>40) /call Travel

		/if (${Target.Type.Equal[Corpse]}) /target clear

		/doevents
	}
/return
|----------------------------------------------------------------------------
|- SUB: HealthToMana
|---------------------------------------------------------------------------- 
Sub HealthToMana
	/if (${Me.PctHPs}>=${AACanniMinHP} && ${Me.AltAbilityReady[Cannibalization]}) {
		/call AANow ${Me.AltAbility[Cannibalization].ID} ${Me.ID}
		/delay 20 !${Me.Casting.ID}
	} else /if (${Me.PctHPs}>=${CanniMinHP} && ${Me.SpellReady[${CanniSpell}]}) {
		/call SpellQueue "${CanniSpell}" ${Me.ID}
		/delay ${Math.Calc[(${Spell[${CanniSpell}].MyCastTime}/100)+5].Int} !${Me.Casting.ID}
	}
/return
|----------------------------------------------------------------------------
|- SUB: DoNamed
|---------------------------------------------------------------------------- 
Sub DoNamed
|-Shaman AAs for nameds on tank
	/if (${Me.AltAbilityReady[Ancestral Aid]}) {
		/call AANow ${Me.AltAbility[Ancestral Aid].ID} ${assistid}
		/delay 4
	}
	/if (${Me.AltAbilityReady[Union of Spirits]}) {
		/call AANow ${Me.AltAbility[Union of Spirits].ID} ${assistid}
		/delay 2
	}
	/if (${Me.AltAbilityReady[Spirit Guard]}) {
		/call AANow ${Me.AltAbility[Spirit Guard].ID} ${assistid}
		/delay 3
	}
	/if (${Me.AltAbilityReady[Call of the Ancients]}) {
		/call AANow ${Me.AltAbility[Call of the Ancients].ID} ${assistid}
		/delay 3
	}
	/if (${Me.AltAbilityReady[Spiritual Blessing]}) {
		/call AANow ${Me.AltAbility[Spiritual Blessing].ID} ${Me.ID}
		/delay 3
	}
	/if (${Me.AltAbilityReady[Fundament: Third Spire of Ancestors]}) {
		/call AANow ${Me.AltAbility[Fundament: Third Spire of Ancestors].ID} ${Me.ID}
		/delay 4
	}
	/if (${Me.AltAbilityReady[Dampen Resistance]}) {
		/call AANow ${Me.AltAbility[Dampen Resistance].ID} ${Me.ID}
		/delay 4
	}
	/if (${Me.AltAbilityReady[Fleeting Spirit]}) {
		/call AANow ${Me.AltAbility[Fleeting Spirit].ID} ${Me.ID}
		/delay 5
	}
	/if (${Me.AltAbilityReady[Rabid Bear]}) {
		/call AANow ${Me.AltAbility[Rabid Bear].ID} ${Me.ID}
		/delay 3
	}
	/if (${Me.AltAbilityReady[Ancestral Guard]}) {
		/call AANow ${Me.AltAbility[Ancestral Guard].ID} ${Me.ID}
		/delay 5
	}
/return
|----------------------------------------------------------------------------
|- SUB: HealGroup
|---------------------------------------------------------------------------- 
Sub HealGroup
	/declare WaitOnHeals int local 0
	/if (${DoHeals}) {
		/declare petworsthurtid		int local 0
		/declare petworsthp 		int local 100
		/declare worsthp 			int local 100
		/declare worsthurtid		int local 0
		/declare worsthurtname		string local NULL
		/declare gmember			int local 0
		/declare HurtMember     	int local 0
		/varset GrPCond .
		/if (${Stick.Status.Equal[ON]}) {
			/stick pause
			/varset WasStickOn 1
		}
		/if (${Me.PctHPs}<=${GroupHealPoint}) {
			/varcalc HurtMember ${HurtMember}+1
			/varset worsthurtid ${Me.ID}
			/varset worsthurtname ${Me.Name}
			/varset worsthp ${Me.PctHPs}
		}
		/for gmember 1 to ${Group}
			/if (${Group.Member[${gmember}].Distance}<=185 && ${Group.Member[${gmember}].PctHPs}<100 && !${Group.Member[${gmember}].Hovering} && ${Group.Member[${gmember}].Type.NotEqual[Corpse]}) {
				/if ((${Group.Member[${gmember}].Distance}<100) && (${Group.Member[${gmember}].PctHPs}<${GroupHealPoint}) && (${Group.Member[${gmember}].PctHPs}>=1)) /varcalc HurtMember ${HurtMember}+1
				/if (${Group.Member[${gmember}].PctHPs}<=${worsthp} && ((${Me.XTarget[1].PctHPs}<=99) || ${Group.Member[${gmember}].Distance}<50)) {
					/varset worsthurtid ${Group.Member[${gmember}].ID}
					/varset worsthurtname ${Group.Member[${gmember}].Name}
					/varset worsthp ${Group.Member[${gmember}].PctHPs}
					/varset GrPCond .
				}
			}
			/if (${Group.Member[${gmember}].Pet.ID}) {
				/if (${Group.Member[${gmember}].Pet.Distance}<=185 && (${Group.Member[${gmember}].Pet.PctHPs}<=${worsthp}) && (${Group.Member[${gmember}].Pet.PctHPs}<=${PetHealPoint}) && ${PetHealPoint}>0 && (${worsthp}>${GroupHealPoint})) {         
					/varset worsthurtid ${Group.Member[${gmember}].Pet.ID}
					/varset worsthurtname ${Group.Member[${gmember}].Name}
					/varset petworsthp ${Group.Member[${gmember}].Pet.PctHPs}
					/varset GrPCond .Pet.
				}
			}
			/if (${DanNet.Peers.Find[${EverQuest.Server.Lower}_${Group.Member[${gmember}].Name.Lower}]} && ${CureCheckTimer}==0) {
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${gmember}].Name.Lower} "Me.TotalCounters" "tmpcureflag" "int"
				/if (${tmpcureflag}) {
					/varcalc CureMemberCount ${CureMemberCount}+1
					/if (${CureMemberID}!=${assistid}) {
						/varset CureMemberID ${Group.Member[${gmember}].ID}
					}
				}
			}
		/next gmember
		/if (${CureCheckTimer}==0) /varset CureCheckTimer 3s
		/if (!${Me.Song[${GroupRenewalHoT}].ID} && !${Me.Buff[${GroupRenewalHoT}].ID} && (${Group.Member[${assistname}]${TnKCond}Distance}<=159) && ${Me.XTarget[1].ID} && (${Group.Member[${assistname}]${TnKCond}PctHPs}>${BigHealPoint}) && !${Me.Casting.ID}) {
			/call SpellQueue "${GroupRenewalHoT}" ${assistid}
			/delay ${Math.Calc[(${Spell[${GroupRenewalHoT}].MyCastTime}/100)+5].Int} !${Me.Casting.ID}
|-			/varset WaitOnHeals 1	
		}
		|-Group Healing
		/if (${HurtMember}>=${GroupHealCount} && ${Me.AltAbilityReady[Soothsayer's Intervention]} && ${Group} && ${worsthp}<65 && (${worsthp}<=${GroupHealPoint})) {
			/call AANow ${Me.AltAbility[Soothsayer's Intervention].ID} ${Me.ID}
			/varset WaitOnHeals 1
			/delay 10
		} else /if (${HurtMember}>=${GroupHealCount} && ${Me.SpellReady[${InterventionHeal}]} && ${Group} && ${worsthp}<65 && (${worsthp}<=${GroupHealPoint})) {
			/call SpellQueue "${InterventionHeal}" ${Me.ID}
			/varset WaitOnHeals 1
			/delay 10
		} else /if (${HurtMember}>=${GroupHealCount} && ${Me.SpellReady[${RecourseHeal}]}) {
			/call SpellQueue "${RecourseHeal}" ${Me.ID}
			/varset WaitOnHeals 1
			/delay 10
		} else /if (${Me.PctHPs}<=${GroupHealPoint}) {
			/call HealQueue ${Me.ID}
			/varset WaitOnHeals 1
		} else /if ((${Group.Member[${assistname}]${TnKCond}Distance}<=185) && (${Group.Member[${assistname}]${TnKCond}PctHPs}<=${TankHealPoint}) && ${Group.Member[${assistname}]${TnKCond}PctHPs}>=1) {
			/call HealQueue ${assistid}
|-			/varset WaitOnHeals 1
		} else /if ((${Group.Member[${worsthurtname}]${GrPCond}Distance}<=185) && (${worsthp}<=${GroupHealPoint} || ${petworsthp}<=${GroupHealPoint}) && ${Group.Member[${worsthurtname}]${GrPCond}PctHPs}>=1) {
			/call HealQueue ${worsthurtid}
|-			/varset WaitOnHeals 1
		} else /if ((${Me.Poisoned.ID} || ${Me.Diseased.ID} || ${Me.Cursed.ID}) && (${Me.AltAbilityReady[Radiant Cure]} || ${Me.AltAbilityReady[Purified Spirits]}) && !${Me.Casting.ID} && ${DoCures} && ${CureTimer}==0) {
			/call GroupCure ${Me.ID}
|-			/varset WaitOnHeals 1
		} else /if (${Me.AltAbilityReady[Radiant Cure]} && !${Me.Casting.ID} && ${CureMemberCount}>1 && ${CureTimer}==0 && ${DoCures}) {
			/call GroupCure ${Target.ID}
|-			/varset WaitOnHeals 1
		} else /if ((${Me.AltAbilityReady[Radiant Cure]} || ${Me.SpellReady[${CureSpell}]}) && !${Me.Casting.ID} && ${CureMemberID} && ${CureTimer}==0 && ${DoCures}) {
			/call SingleCure ${CureMemberID}
|-			/varset WaitOnHeals 1
		}
		/if (!${Me.Casting.ID} && ${Me.XTarget[1].ID} && (${Target.Named} || ${Target.Level}>(${Me.Level}+3) || ${SpawnCount[NPC radius 30 zradius 20]}>3) &&) /call DoNamed
		/varset GrPCond .
		/if (${WasStickOn} && !${WaitOnHeals}) {
			/stick unpause
			/varset WasStickOn 0
		}
	/if (${Defined[tmpcureflag]}) /deletevar tmpcureflag
	}
	/if (!${WaitOnHeals}) {
|-		/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && !${BackOffFlag}) /call CC
		/if ((${Me.XTarget[1].ID} || (${Group.MainAssist.ID} && ${Group.MainAssist.ID}!=${Me.ID} && ${Target.ID}!=${${assisttargetid}}) || ${SpawnCount[npc radius ${AssistRange} zradius 15 targetable playerstate 4]} || ${FollowMarkTarget}) && !${BackOffFlag} && ${DoAutoTarget}) /call FindTarget
		/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.ID}==${autotargetid} && ${Target.Distance}<${AssistRange} && (!${Target.Mezzed.ID} || ${AllowMezBreak}) && !${BackOffFlag} && ${DoAutoEngage}) /call EngageTarget
		/if ((${Me.PctMana}>=30) && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID}) && !${Me.Invis} && !${MoveTo.Moving} && !${AdvPath.Following} && ${Stick.Status.Equal[OFF]} && ${DoBuffs}) /call BuffGroup
		/if (${Me.XTarget[1].ID} && (${DoMalo} || ${DoAEMalo} || ${DoSlow} || ${DoAESlow}) && !${BackOffFlag} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight} && ${Target.Type.Equal[NPC]} && ${Target.PctHPs}<=${AutoDebuffAt} && ${Ok2Assist}) /call DebuffMobs
		/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.ID}==${autotargetid} && ${Target.Distance}<${AssistRange} && (!${Target.Mezzed.ID} || ${AllowMezBreak}) && !${BackOffFlag}) /call AANDisc
		/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.ID}==${autotargetid} && ${Target.Distance}<${AssistRange} && ${Ok2Assist} && (!${Target.Mezzed.ID} || ${AllowMezBreak}) && !${BackOffFlag}) /call Combatdps
		/if (!${Me.Casting.ID} && ${Me.XTarget[1].ID} && (${Target.Named} || ${Target.Level}>(${Me.Level}+3) || ${SpawnCount[NPC radius 60 zradius 50]}>4) && ${Me.XTarget[1].Distance}<=75) /call DoNamed
	}
	/doevents
/return
|----------------------------------------------------------------------------
|- SUB: SingleCure
|----------------------------------------------------------------------------
Sub SingleCure(int cureid)
	/varset CureTimer 10s
	/if (${Me.AltAbilityReady[Radiant Cure]}) {
		/call AANow ${Me.AltAbility[Radiant Cure].ID} ${cureid}
	} else /if (${Me.SpellReady[${CureSpell}]}) {
		/call SpellQueue "${CureSpell}" ${cureid}
	}
	/varset CureMemberCount 0
	/varset CureMemberID 0
/return
|----------------------------------------------------------------------------
|- SUB: GroupCure
|----------------------------------------------------------------------------
Sub GroupCure(int cureid)
	/varset CureTimer 10s
	/if (${Me.AltAbilityReady[Purified Spirits]} && ${Me.ID}==${cureid}) {
		/call AANow ${Me.AltAbility[Purified Spirits].ID} ${cureid}
	} else /if (${Me.AltAbilityReady[Radiant Cure]}) {
		/call AANow ${Me.AltAbility[Radiant Cure].ID} ${cureid}
	}
	/varset CureMemberCount 0
	/varset CureMemberID 0
/return
|----------------------------------------------------------------------------
|- SUB: Group HealQueue - New logic
|---------------------------------------------------------------------------- 
Sub HealQueue(int nextid)
	/declare nexthealspell		string local NULL
	/varset GrPCond .
	/if (${Spawn[${nextid}].Type.Equal[Pet]}) {
		/declare groupmembertoheal	string local ${Spawn[${nextid}].Master.Name}
		/varset GrPCond .Pet.
	} else {
		/declare groupmembertoheal	string local ${Spawn[${nextid}].Name}
		/varset GrPCond .
	}
|-Check to see if we can heal
	/if (${Group.Member[${groupmembertoheal}]${GrPCond}FeetWet}!=${Me.FeetWet}) /return
	/if (${Group.Member[${groupmembertoheal}]${GrPCond}Hovering} || ${Group.Member[${groupmembertoheal}]${GrPCond}Type.Equal[Corpse]}) /return

|-Shaman AAs before heals
	/if (${nextid}==${assistid} && ${Group.Member[${groupmembertoheal}]${GrPCond}PctHPs}>${BigHealPoint} && (${Me.XTarget}>3 || ${Spawn[id ${Me.XTarget[1].ID} radius 100].Named})) {
		/if (${Me.AltAbilityReady[Spirit Guardian]}) /call AANow ${Me.AltAbility[Spirit Guardian].ID} ${assistid}
	}
	
	/if ((${Group.Member[${assistname}]${TnKCond}Distance}<=159) && ${Me.SpellReady[${TwinHealNuke}]} && ${Group.Member[${assistname}]${TnKCond}PctHPs}>${BigHealPoint} && ${Me.PctMana}>=${Manatonuke} && ${Me.XTarget[1].PctHPs}<98 && ${Me.XTarget[1].ID}) {
			/call SpellQueue "${TwinHealNuke}" ${assistid}
			/delay 10 !${Me.Casting.ID}
	}
|-Determine which heal to use
	/if (${FindItem[${ChestItemName}].ID} && ${FindItem[${ChestItemName}].Timer}==0 && ${Group.Member[${groupmembertoheal}]${GrPCond}PctHPs}<=40 && ${Group.Member[${groupmembertoheal}]${GrPCond}Type.NotEqual[Pet]}) {
		/call ItemNow "${ChestItemName}"
	} else /if ((${Me.SpellReady[${RecklessHeal1}]}) && (${Group.Member[${groupmembertoheal}]${GrPCond}PctHPs}<=${BigHealPoint}) && (${nextid}==${assistid}) && ${Me.CurrentMana}>${Spell[${RecklessHeal1}].Mana}) {
		/varset nexthealspell ${RecklessHeal1}
	} else /if ((${Me.SpellReady[${RecklessHeal2}]}) && (${Group.Member[${groupmembertoheal}]${GrPCond}PctHPs}<=${BigHealPoint}) && (${nextid}==${assistid}) && ${Me.CurrentMana}>${Spell[${RecklessHeal2}].Mana}) {
		/varset nexthealspell ${RecklessHeal2}
	} else /if ((${Me.SpellReady[${RecklessHeal3}]}) && (${Group.Member[${groupmembertoheal}]${GrPCond}PctHPs}<=${BigHealPoint}) && (${nextid}==${assistid}) && ${Me.CurrentMana}>${Spell[${RecklessHeal3}].Mana}) {
		/varset nexthealspell ${RecklessHeal3}
	} else /if ((${Me.AltAbilityReady[Soothsayer's Intervention]}) && (${Group.Member[${groupmembertoheal}]${GrPCond}PctHPs}<65) && (${Group.Member[${groupmembertoheal}]${GrPCond}PctHPs}<=${GroupHealPoint})) {
		/call AANow ${Me.AltAbility[Soothsayer's Intervention].ID} ${Me.ID}
		/delay 10
	} else /if ((${Me.SpellReady[${InterventionHeal}]}) && (${Group.Member[${groupmembertoheal}]${GrPCond}PctHPs}<65) && ${Me.CurrentMana}>${Spell[${InterventionHeal}].Mana} && (${Group.Member[${groupmembertoheal}]${GrPCond}PctHPs}<=${GroupHealPoint})) {
		/varset nexthealspell ${InterventionHeal}
	} else /if ((${Me.SpellReady[${RecourseHeal}]}) && (${Group.Member[${groupmembertoheal}]${GrPCond}PctHPs}<=${GroupHealPoint}) && ${Me.CurrentMana}>${Spell[${RecourseHeal}].Mana}) {
		/varset nexthealspell ${RecourseHeal}
	} else /if ((${Me.SpellReady[${AESpiritualHeal}]}) && ${Me.CurrentMana}>${Spell[${AESpiritualHeal}].Mana} && ${Group.Member[${groupmembertoheal}]${GrPCond}LineOfSight}) {
		/varset nexthealspell ${AESpiritualHeal}
	}

	/if (${Bool[${nexthealspell}]}) {
		|------------Broadcast Spell--------------------
		/if (${Me.Sitting}) /stand
		/if (${Window[SpellBookWnd]}) /book
		/if (${Target.ID}!=${nextid}) {
			/if (${Me.Combat}) /squelch /attack off
			/target id ${nextid}
			/delay 5 ${Target.ID}==${nextid}
		}
		/if (!${Me.Casting.ID} && ${Me.SpellReady[${nexthealspell}]}) {
			/cast "${nexthealspell}"
			/if (${acverbose}!=0 && ${Me.Casting.ID}==${Spell[${nexthealspell}].ID}) {
				/if (${Target.PctHPs}>=85) {
|-					/docommand /dgt \ag ${nexthealspell} \ar =>> \ay ${groupmembertoheal} \ar <<= \ag ${Target.PctHPs}% HP \ax
				} else /if (${Target.PctHPs}>=50) {
|-					/docommand /dgt \ag ${nexthealspell} \ar =>> \ay ${groupmembertoheal} \ar <<= \ay ${Target.PctHPs}% HP \ax
				} else /if (${Target.PctHPs}<50) {
|-					/docommand /dgt \ag ${nexthealspell} \ar =>> \ay ${groupmembertoheal} \ar <<= \ar ${Target.PctHPs}% HP \ax
				}
			}
			/delay 10 ${Window[CastingWindow].Open}
			/delay ${Math.Calc[(${Spell[${nexthealspell}].MyCastTime}/100)+5].Int} !${Me.Casting.ID}
		}
|-		/if (${Cast.Result.Equal[CAST_SUCCESS]}) {
|-			/if ((!${EQBC.Connected} || !${Bool[${Plugin[MQ2EQBC]}]}) && ${acverbose}!=0) /docommand /echo [+o+]${nexthealspell} =>> ${groupmembertoheal} <<=[+x+]
|-			/if (${EQBC.Connected} && ${acverbose}!=0) /docommand /bc [+o+]${nexthealspell} =>> ${groupmembertoheal} <<=[+x+]
|-		}
	}
	/varset GrPCond .
/return
|----------------------------------------------------------------------------
|- SUB: CC
|---------------------------------------------------------------------------- 
Sub CC
	/declare x int local 0
	
	/for x 1 to ${Me.XTarget}

		/target id ${Me.XTarget[${x}].ID}

		/if (${Target.Distance}<=55 && !${Target.Mezzed.ID} && !${Me.Casting.ID} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.Type.Equal[NPC]} && ${Target.LineOfSight} && ${Me.AltAbilityReady[Virulent Paralysis]} && !${Target.Buff[Virulent Paralysis].ID} && !${Target.Rooted.ID} && ${Me.GroupAssistTarget.ID}!=${Target.ID} && ${Target.CurrentHPs}>95) {
			/face fast
			/alt act ${Me.AltAbility[Virulent Paralysis].ID}
			/delay 20 !${Me.AltAbilityReady[Virulent Paralysis]}
		}
	/next x
/return
|----------------------------------------------------------------------------
|- SUB: DebuffMobs
|---------------------------------------------------------------------------- 
Sub DebuffMobs
	/declare x int local 0

	/if (!${Me.Casting.ID} && !${Me.Moving} && ${SpawnCount[npc radius ${AssistRange} zradius ${AssistRangeZ}]}>2 && ${NearestSpawn[los npc radius ${AssistRange} zradius ${AssistRangeZ}].ID}) {

		/target id ${NearestSpawn[los npc radius ${AssistRange} zradius ${AssistRangeZ}].ID}
		/delay 40 ${Target.ID}==${NearestSpawn[los npc radius ${AssistRange} zradius ${AssistRangeZ}].ID}

		/if (${Me.AltAbilityReady[Wind of Malaise]} && !${Target.Buff[${Malo}].ID} && !${Target.Maloed.ID}) {
			/alt act ${Me.AltAbility[Wind of Malaise].ID}
			/delay 5s !${Me.Casting.ID}
			/delay 5s !${Me.AltAbilityReady[Wind of Malaise]}
		} 

		/if (${Me.AltAbilityReady[Turgur's Virulent Swarm]} && !${Target.Buff[Turgur's Insects].ID}) {
			/alt act ${Me.AltAbility[Turgur's Virulent Swarm].ID}
			/delay 5s !${Me.Casting.ID}
			/delay 5s !${Me.AltAbilityReady[Turgur's Virulent Swarm]}
		}
	}

	/for x 1 to ${Me.XTarget}

		/target id ${Me.XTarget[${x}].ID}
		/delay 5 ${Target.ID}==${Me.XTarget[${x}].ID}
		/if (!${Me.Casting.ID} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.Distance}<200 && ${Target.LineOfSight}) {
			/if (${Me.AltAbilityReady[Malaise]} && !${Target.Buff[Malosinata].ID} && !${Target.Buff[${Malo}].ID} && !${Target.Maloed.ID}) {
				/alt act ${Me.AltAbility[Malaise].ID}
				/delay 5s !${Me.Casting.ID}
				/delay 5s !${Me.AltAbilityReady[Malaise]}
			}
			/delay 1
			/if (${Me.AltAbilityReady[Turgur's Swarm]} && !${Target.Buff[Turgur's Insects].ID} && ${Target.Distance}<120) {
				/alt act ${Me.AltAbility[Turgur's Swarm].ID}
				/delay 5s !${Me.Casting.ID}
				/delay 5s !${Me.AltAbilityReady[Turgur's Swarm]}
			}
			/delay 1
		}
	/next x
/return
|----------------------------------------------------------------------------
|- SUB: AANDisc 
|---------------------------------------------------------------------------- 
Sub AANDisc
	/if (!${FindItem[=${EpicSpiritStaff}].TimerReady} && !${Me.Casting.ID} && ${Me.XTarget[1].Distance}<=75) {
		/useitem "${EpicSpiritStaff}"
		/delay 5
	}
	/if (!${Me.Buff[Roar of the Lion].ID} && !${Me.Buff[Dissident Roar].ID} && ${Me.CurrentMana}>${Spell[${DichoSpell}].Mana} && !${Me.Casting.ID} && ${Me.SpellReady[${DichoSpell}]} && ${UseRoar} && ${Me.XTarget[1].Distance}<=75) {
		/call SpellQueue "${DichoSpell}" ${Me.ID}
		/delay 5
	}

	/if (${Me.AltAbilityReady[Spirit Guardian]}) {
		/call AANow ${Me.AltAbility[Spirit Guardian].ID} ${assistid}
		/delay 3
	}
/return
|----------------------------------------------------------------------------
|- SUB: Combatdps
|---------------------------------------------------------------------------- 
Sub Combatdps

	/if (${Target.PctHPs}<=${AutoAssistAt} && ${Target.Distance}<=${AssistRange} && ${Target.Type.Equal[NPC]}) {
		/if (${Me.AltAbilityReady[Focus of Arcanum]}) {
			/call AANow ${Me.AltAbility[Focus of Arcanum].ID} ${Me.ID}
		}
		|- DPS
		/if (${Me.PctMana}>=${Manatonuke}) {
			/if (${DoDot} && ${Me.SpellReady[${CurseDoT1}]} && !${Target.Buff[${CurseDoT1}].ID} && (${Target.PctHPs}>=10 || ${Target.Named})) {
				/call SpellQueue "${CurseDoT1}" ${Target.ID}
				/delay 5
			}
|-			/if (${DoDot} && ${Me.SpellReady[${CurseDoT1}]} && !${Target.Buff[${CurseDoT2}].ID} && (${Target.PctHPs}>=10 || ${Target.Named})) {
|-				/call SpellQueue "${CurseDoT2}" ${Target.ID}
|-				/delay 5
|-			}
			/if (${DoDot} && ${Me.SpellReady[${ChaoticPoisonDoT}]} && !${Target.Buff[${ChaoticPoisonDoT}].ID} && ${Target.PctHPs}>=5 && ${Target.Named}) {
				/call SpellQueue "${ChaoticPoisonDoT}" ${Target.ID}
				/delay 5
			}
			/if (${DoDot} && ${Me.SpellReady[${FastDiseaseDoT}]} && !${Target.Buff[${FastDiseaseDoT}].ID} && (${Target.PctHPs}>=10) || ${Target.Named}) {
				/call SpellQueue "${FastDiseaseDoT}" ${Target.ID}
				/delay 5
			}
		}
	}
/return
|----------------------------------------------------------------------------
|- SUB: BuffGroup 
|---------------------------------------------------------------------------- 
Sub BuffGroup
	/if (${Defined[tmpbuffid]}) /deletevar tmpbuffid
	/if (${Defined[tmpstackcheck]}) /deletevar tmpstackcheck
	/declare bmember			int local 0
	/declare CastCheck			int local 0
	/for bmember 1 to ${Group}

		/if (${Group.Member[${bmember}].Distance}<100 && !${Group.Member[${bmember}].OtherZone} && (!${Me.Casting.ID})) {

			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Focus.ID" "tmpbuffid" "int"
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Spell[${FocusSpell}].Stacks" "tmpstackcheck" "bool"
			/if (!${tmpbuffid} && ${tmpstackcheck} && ${Me.Book[${FocusSpell}]} && ${Me.CurrentMana}>${Spell[${FocusSpell}].Mana} && (!${Me.Casting.ID})) {
				/call BuffGroupMember "${FocusSpell}" ${Group.Member[${bmember}].ID}
				/varset CastCheck 1
			}
			/if (${Me.XTarget[1].ID}) /return

			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Buff[${RunSpeedBuff}].ID" "tmpbuffid" "int"
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Spell[${RunSpeedBuff}].Stacks" "tmpstackcheck" "bool"
			/if (!${tmpbuffid} && ${tmpstackcheck} && ${Me.CurrentMana}>${Spell[${RunSpeedBuff}].Mana} && ${UseRunSpeed} && (!${Me.Casting.ID})) {
				/if (${Me.AltAbilityReady[Lupine Spirit]} && ${Me.AltAbility[Lupine Spirit].Rank}>=4) {
					/alt act ${Me.AltAbility[Lupine Spirit].ID}
					/delay 70
				} else /if (${Me.Book[${RunSpeedBuff}]}) {
					/call BuffGroupMember "${RunSpeedBuff}" ${Group.Member[${bmember}].ID}
					/varset CastCheck 1
				}					
			}
			/if (${Me.XTarget[1].ID}) /return
			|-- Main Tank Buffs
			/if (${Group.Member[${bmember}].ID}==${assistid} && !${Me.Casting.ID}) {
				/if (${Me.CurrentMana}>${Spell[${GrowthBuff}].Mana} && ${UseGrowthBuff}) {
					/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Buff[${GrowthBuff}].ID" "tmpbuffid" "int"
					/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Spell[${GrowthBuff}].Stacks" "tmpstackcheck" "bool"
					/if (!${tmpbuffid} && ${tmpstackcheck}) {
						/call BuffGroupMember "${GrowthBuff}" ${Group.Member[${bmember}].ID}
						/varset CastCheck 1
					}
				}
				/if (${Me.XTarget[1].ID}) /return
				/if (${Me.CurrentMana}>${Spell[${AllianceBuff}].Mana} && ${UseAllianceBuff}) {
					/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Buff[${AllianceBuff}].ID" "tmpbuffid" "int"
					/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Spell[${AllianceBuff}].Stacks" "tmpstackcheck" "bool"
					/if (!${tmpbuffid} && ${tmpstackcheck}) {
						/call BuffGroupMember "${AllianceBuff}" ${Group.Member[${bmember}].ID}
						/varset CastCheck 1
					}
				}
				/if (${Me.XTarget[1].ID}) /return
				/if (${Me.CurrentMana}>${Spell[${SlowProcBuff}].Mana}) {
					/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Buff[${SlowProcBuff}].ID" "tmpbuffid" "int"
					/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Spell[${SlowProcBuff}].Stacks" "tmpstackcheck" "bool"
					/if (!${tmpbuffid} && ${tmpstackcheck}) {
						/call BuffGroupMember "${SlowProcBuff}" ${Group.Member[${bmember}].ID}
						/varset CastCheck 1
					}
				}
				/if (${Me.XTarget[1].ID}) /return
			}
		}
	/next bmember

	|- Delete variable's
	/if (${Defined[tmpbuffid]}) /deletevar tmpbuffid
	/if (${Defined[tmpstackcheck]}) /deletevar tmpstackcheck
	/if (${CastCheck}) {
		/call LoadSpellBar
		/docommand /dgt \aw Done Buffing
	}
/return
|----------------------------------------------------------------------------
|- SUB: BuffSelf
|---------------------------------------------------------------------------- 
Sub BuffSelf
	/declare CastCheck int local 0
	/if (!${Spell[${Me.Aura[1]}].ID} && ${Me.AltAbilityReady[${ShamanAura}]}) {
		/alt act ${Me.AltAbility[${ShamanAura}].ID}
		/delay 5
		/varset CastCheck 1
	} else /if (${UsePet} && !${Me.Pet.ID} && ${Cast.Status.Equal[I]} && ${Me.Book[${PetSpell}]} && ${Me.CurrentMana}>${Spell[${PetSpell}].Mana}) {
		/call SpellQueue "${PetSpell}" 0
		/varset CastCheck 1
	} else /if (!${Me.Buff[${GroupHealProcBuff}].ID} && !${Me.Casting.ID} && ${Spell[${GroupHealProcBuff}].Stacks} && ${Me.Book[${GroupHealProcBuff}]} && ${Me.CurrentMana}>${Spell[${GroupHealProcBuff}].Mana}) {
		/call SpellQueue "${GroupHealProcBuff}" 0
		/varset CastCheck 1
	} else /if (${Me.AltAbilityReady[Preincarnation]} && ${Me.AltAbility[Preincarnation].Rank}>=2 && !${Me.Buff[Preincarnation].ID}) {
		/alt act ${Me.AltAbility[Preincarnation].ID}
		/delay 15
		/varset CastCheck 1
	}
	/if (!${Me.Buff[${Me.Focus.ID}].ID}) /call BuffGroupMember "${FocusSpell}" ${Group.Member[0].ID}
	|-else /if (${Me.AltAbilityReady[Visionary's Unity]} && !${Me.Buff[Pack of Aina].ID}) {
|-		/alt act ${Me.AltAbility[Visionary's Unity].ID}
|-		/delay 15
|-	}
	/if (${CastCheck}) /call LoadSpellBar
/return
|----------------------------------------------------------------------------
|- SUB: ConfigHeal
|---------------------------------------------------------------------------- 
Sub ConfigHeal
	/if (${Me.XTarget}>2 || ${Me.XTarget[1].Named}) {
		/if (${TankHealPoint}!=95) {
			/varset TankHealPoint 95
			/varset GroupHealPoint 85
			/varset BigHealPoint 80
		}
	} else /if (${Me.XTarget[1].Level}>=${Me.Level}) {
		/if (${TankHealPoint}!=85) {
			/varset TankHealPoint 85
			/varset GroupHealPoint 80
			/varset BigHealPoint 70
		}
	} else /if (${Me.XTarget[1].Level}>=${Math.Calc[${Me.Level}-5]}) {
		/if (${TankHealPoint}!=80) {
			/varset TankHealPoint 80
			/varset GroupHealPoint 75
			/varset BigHealPoint 60
		}
	} else {
		/if (${TankHealPoint}!=70) {
			/varset TankHealPoint 70
			/varset GroupHealPoint 75
			/varset BigHealPoint 60
		}
	}
	
/return
|----------------------------------------------------------------------------
|- SUB: TankChangeCheck
|---------------------------------------------------------------------------- 
Sub TankChangeCheck
	/if (${PetTank} && ${Group.Member[${assistname}].Pet.ID}) {
		/docommand /varset tempid ${Group.Member[${assistname}].Pet.ID}
		/if (${tempid}!=${assistid}) {
			/echo Tank ID Mismatch - Fixing it
			/varset assistid ${tempid}
		}
	} else /if (!${PetTank} && ${Group.Member[${assistname}].ID}) {
		/docommand /varset tempid ${Group.Member[${assistname}].ID}
		/if (${tempid}!=${assistid}) {
			/echo Tank ID Mismatch - Fixing it
			/varset assistid ${tempid}
		}
	}
	/if (!${Spawn[${assistid}].PctHPs}>=1) {
		/if (!${Bool[${oldtank}]}) /varset oldtank ${assistname}
		/if (!${Bool[${oldtankid}]}) /varset oldtankid ${assistid}
		/if (${Spawn[group notid ${Me.ID} radius 150].ID}) {
			/echo Tank Gone - Switching to Nearest Group Member Alive
			/varset assistname ${Spawn[group notid ${Me.ID} radius 150]}
			/varset assistid ${Spawn[group notid ${Me.ID} radius 150].ID}
			/if (${Spawn[${assistid}].Type.Equal[Pet]}) {
				/varset TnKCond .Pet.
			} else {
				/varset TnKCond .
			}
		} else {
			/echo Tank and Group Gone - Switching to Self Heal mode
			/varset assistname ${Me.Name}
			/varset assistid ${Me.ID}
			/varset TnKCond .
		}
	}
	/if (${Group.Member[${oldtank}].ID}) {
		/if (!${PetTank}) {
			/varset assistname ${oldtank}
			/varset assistid ${Group.Member[${oldtank}].ID}
			/echo Tank is Back - Switching him back to maintank
			/varset oldtank NULL
			/varset oldtankid NULL
		} else /if (${PetTank} && ${Group.Member[${oldtank}].Pet.ID}) {
			/varset assistname ${oldtank}
			/varset assistid ${Group.Member[${oldtank}].Pet.ID}
			/echo Tank is Back - Switching him back to maintank
			/varset oldtank NULL
			/varset oldtankid NULL
		}
		/if (${Spawn[${assistid}].Type.Equal[Pet]}) {
			/varset TnKCond .Pet.
		} else {
			/varset TnKCond .
		}
	}
	/if (${newtank}==1) {
		/docommand /varset assistid ${Target.ID}
		/varset newtank 0
		/if (${Spawn[${assistid}].Type.Equal[Pet]}) {
			/docommand /varset assistname ${Target.Master.Name}
			/echo Main Tank set to ${Target.Name}
			/varset TnKCond .Pet.
			/varset PetTank 1
		} else {
			/docommand /varset assistname ${Target.Name}
			/echo Main Tank set to ${assistname}
			/varset TnKCond .
			/varset PetTank 0
		}
	}
/return
|-------------------------------------------------------------------------------------
|- SUB: Rez Check
|-------------------------------------------------------------------------------------
Sub RezCheck
    /declare RezID int local
	/declare RezName string local
	
    /if (${Spawn[pccorpse noalert 3 group radius 100 zradius 50].ID} && !${Me.Combat} && !${Me.XTarget[1].ID}) {
		/hidecorpse npc
		/varset RezID ${Spawn[pccorpse noalert 3 group radius 100 zradius 50].ID}
		/varset RezName ${Spawn[pccorpse noalert 3 group radius 100 zradius 50].Name}
		/target id ${RezID}
		/delay 5 ${Target.ID}==${RezID}
		/if (${Target.Distance}>25) /corpse
		/delay 5 ${Target.Distance}<25
		/if (${Me.AltAbilityReady[Rejuvenation of Spirit]}) {
			/docommand /dgt \ag Rezzing ${RezName}
			/alt act 2051
			/delay 6s !${Me.Casting.ID}
		} 
	}

	/if (${Spawn[pccorpse noalert 3 group radius 100 zradius 50].ID} && ${Me.XTarget[1].ID}) {
		/hidecorpse npc
		/varset RezID ${Spawn[pccorpse noalert 3 group radius 100 zradius 50].ID}
		/varset RezName ${Spawn[pccorpse noalert 3 group radius 100 zradius 50].Name}
		/target id ${RezID}
		/delay 5 ${Target.ID}==${RezID}
		/if (${Target.Distance}>25) /corpse
		/delay 5 ${Target.Distance}<25
		/if (${Me.AltAbilityReady[Call of the Wild]}) {
			/docommand /dgt \ag Battle rezzing ${RezName}
			/alt act 404
			/delay 6s !${Me.Casting.ID}
		} 
	}
/return
|----------------------------------------------------------------------------
|- SUB: Symbol - HP Buff Single use
|----------------------------------------------------------------------------
Sub Event_Chat(string ChatType,string ChatSender,string ChatText)
	/if (${Spawn[${ChatSender.Right[-2].Left[-1]}].ID}) {
		/if (${Select[${ChatText},Cure,cure,CURE,RC,Radiant,GC]} && (${Spawn[${ChatSender.Right[-2].Left[-1]}].Distance}<200)) /call SingleCure ${Spawn[${ChatSender.Right[-2].Left[-1]}].ID}
	}
/return
|----------------------------------------------------------------------------
|- SUB: Event_WornOff
|----------------------------------------------------------------------------
Sub Event_WornOff
	/doevents flush WornOff
/return 
|----------------------------------------------------------------------------
|- SUB: Event GroupChange
|----------------------------------------------------------------------------
Sub Event_GroupChange

/return
