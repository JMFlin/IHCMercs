|- IHCBST.mac - By IHC385
|- Automatic Druid bot - 
|- Version 2.0
|- Updated: 4/25/2019
|- Credit: Toots, Noobhax0r, Maskoi, Ctaylor, Treehuggindruid. A lot of ideas were borrowed and modified from their macros
#Chat group
#Chat tell
#Chat raid
#turbo 80
#include IHCMercs\ihcsubs.inc
#include IHCMercs\ihcdruutil.inc
#include IHCMercs\events.inc
#include IHCMercs\config.inc
#warning
#bind SetVarInt	/setvarint
#bind CmdList        /ihchelp

Sub Main
	/delay ${Math.Rand[10]}
	/doevents flush
	/declare MacroName       	string outer IHCWAR
	/declare MacroPath       	string outer IHCMercs\IHCWAR
	/declare IHCVersion       	string outer 2.0 
	/declare IniFileName     	string outer ${MacroPath}_${EverQuest.Server}_${Me.CleanName}.ini

	/call setup_plugins
	/call DruSetup
	/call VarSetup
	/call SetupSpells
	/call LoadSpellBar

|-Cursor ID
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}
	/call WelcomeMsg
	/if (${alliance_check_group[FALSE]}) /varset UseAlliance TRUE
	/if (${hybrid_healer_limit[FALSE]}) /varset HybridManaLimit 50
	/declare AssistRange int outer 10
	/declare AutoCampRadius int outer 10
	/call setup_skill_melee FALSE
 :mainloop
	/call ModeSet
	/if (${Mode}==0) /call Travel
	/if (${Mode}==1) /call ManualPullCamping
	/if (${Mode}==2) /call ManualRunAndGun
	/if (${Mode}==3) /call ManualPullCamping
	/if (${Mode}==4) /call AFKRunAndGun
	/if (${Mode}==5) /call DoEvent
 /goto :mainloop
/return
|----------------------------------------------------------------------------
|- SUB: ManualPullCamping
|---------------------------------------------------------------------------- 
Sub ManualPullCamping
	/call MakeCamp
    /call RemoveTravelBuffs  

	/while (${Mode}==1 || ${Mode}==3) {
		/call check_state FALSE
		/call single_target_heals
		/call group_heals
		/call combat
|		/call check_for_corpse FALSE
		/call group_buffs

		/call MoveToCamp ${PullAutoCampX} ${PullAutoCampY} ${PullAutoCampZ} ${AutoCampRadius}

		/call misc
		/doevents
	}
/return
|----------------------------------------------------------------------------
|- SUB: combat 
|---------------------------------------------------------------------------- 
Sub combat
	/call get_target
	
	/if (!${validate_combat[FALSE]}) /return
	
	/if (!${Target.Snared.ID} && !${immuneSet.Contains[${Target.ID}]}) {
		/if (${validate_cast[FALSE, spell, "${SnareSpell}", ${Target.ID}]}) {
			/call core_cast2 "${SnareSpell}" spell ${Target.ID} FALSE
			/call check_cast_events "${SnareSpell}" CAST_IMMUNE ${Target.ID}
		}
	}

	/call single_target_heals

	/if (${Me.PctMana} < ${HybridManaLimit}) /return
	/call get_target
	/if (!${Target.Buff[${ColdAtkDebuff}].ID}) {
		/if (${validate_cast[FALSE, spell, "${ColdAtkDebuff}", ${Target.ID}]}) /call core_cast2 "${ColdAtkDebuff}" spell ${Target.ID} FALSE
	}
	/call get_target
	/if (!${Target.Buff[${FireAtkDebuff}].ID}) {
		/if (${validate_cast[FALSE, spell, "${FireAtkDebuff}", ${Target.ID}]}) /call core_cast2 "${FireAtkDebuff}" spell ${Target.ID} FALSE
	}

	/call single_target_heals
	/call get_target
	/if (!${Target.Buff[${NBW}].ID}) {
		/if (${validate_cast[FALSE, spell, "${NBW}", ${Target.ID}]}) /call core_cast2 "${NBW}" spell ${Target.ID} FALSE
	}

	/call single_target_heals
	/call get_target
	/if (${validate_cast[FALSE, spell, "${NukeSpell1}", ${Target.ID}]}) /call core_cast2 "${NukeSpell1}" spell ${Target.ID} FALSE

/return
|----------------------------------------------------------------------------
|- SUB: debuff_xtarget
|---------------------------------------------------------------------------- 
Sub debuff_xtarget
	/declare x int local 1

	/if (!${Me.XTarget}) /return

	/for x 1 to ${Me.XTarget}

		/target id ${Me.XTarget[${x}].ID}
		/delay 2s ${Me.XTarget[${x}].ID} == ${Target.ID}
		/delay 2s !${Me.Moving}
		/delay 2s !${Me.Casting}

		/if (${Target.Distance} > 200) /return
		/if (!${Target.Type.Equal[NPC]}) /return
		
		| How will you handle the AA?
		/if (!${Target.Buff[${ColdAtkDebuff}].ID}) {
			
			/if (${validate_cast[FALSE, spell, "${ColdAtkDebuff}", ${Target.ID}]}) {
				/if (${verbose${Me.Class.ShortName}}) /docommand /dgt Attack debuff \ar ${Target.Name} \ax with =>> \ag ${ColdAtkDebuff} \ax <<=
				/call core_cast2 "${ColdAtkDebuff}" spell ${Target.ID} FALSE
			}
		}

		/if (!${Target.Buff[${FireAtkDebuff}].ID}) {
			/if (${validate_cast[FALSE, spell, "${FireAtkDebuff}", ${Target.ID}]}) {
				/if (${verbose${Me.Class.ShortName}}) /docommand /dgt Ac debuff \ar ${Target.Name} \ax with =>> \ag ${FireAtkDebuff} \ax <<=
				/call core_cast2 "${FireAtkDebuff}" spell ${Target.ID} FALSE
			}
		}
		/delay 1s
	/next x
/return
|----------------------------------------------------------------------------
|- SUB: group_buffs
|---------------------------------------------------------------------------- 
Sub group_buffs
	/declare _count				int local 0
	/declare CastCheck			int local 0

	/if (${Me.XTarget}) /return
	/if (${Me.Casting.ID}) /return

	/if (${SpawnCount[pccorpse group radius ${setMaxRezRange}]}) /return
	/if (${SpawnCount[pccorpse raid radius ${setMaxRezRange}]}) /return

	/for _count 0 to ${Group}
		/if (${Group.Member[${_count}].Distance}<${Spell[${Skin}].MyRange} && !${Group.Member[${_count}].OtherZone}) {

			/if (${Group.Member[${_count}].Type.Equal[Corpse]}) /continue
			/if (${Me.XTarget}) {
				/call LoadSpellBar
				/return
			}
			/if (${Mode} != 3) /return

			/if (!${Me.Book[${GroupSkin}]}) {
				
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Buff[${Skin}].ID" "tmpbuffid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Skin.ID" "tmpskinid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Symbol.ID" "tmpsymbolid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Aego.ID" "tmpaegoid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Spell[${Skin}].Stacks" "tmpstackcheck" "bool"
				/if (${tmpstackcheck} && !${tmpaegoid} && !${tmpbuffid}) {
					/if (${validate_cast[FALSE, spell, ${Skin}, ${Group.Member[${_count}].ID}]}) {
						/call core_cast2 "${Skin}" spell ${Group.Member[${_count}].ID} FALSE
						/varset CastCheck 1
					}
				}

			} else {
			
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Buff[${GroupSkin}].ID" "tmpbuffid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Skin.ID" "tmpskinid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Symbol.ID" "tmpsymbolid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Aego.ID" "tmpaegoid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Spell[${GroupSkin}].Stacks" "tmpstackcheck" "bool"
				/if (${tmpstackcheck} && !${tmpaegoid} && !${tmpbuffid}) {
					/if (${validate_cast[FALSE, spell, ${GroupSkin}, ${Group.Member[${_count}].ID}]}) {
						/call core_cast2 "${GroupSkin}" spell ${Group.Member[${_count}].ID} FALSE
						/varset CastCheck 1
					}
				}
			}
			/sit
			
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Buff[${SoW}].ID" "tmpbuffid" "int"
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Spell[${SoW}].Stacks" "tmpstackcheck" "bool"
			/if (!${tmpbuffid} && ${tmpstackcheck}) {
				/if (${validate_cast[FALSE, spell, ${SoW}, ${Group.Member[${_count}].ID}]}) {
					/call core_cast2 "${SoW}" spell ${Group.Member[${_count}].ID} FALSE
					/varset CastCheck 1
				}
			}
			
			/if (${Mode} != 3) /return
			
			/if (${Group.Member[${_count}].ID}==${Group.MainTank.ID}) {
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Buff[${DamageShield}].ID" "tmpbuffid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Spell[${DamageShield}].Stacks" "tmpstackcheck" "bool"
				/if (!${tmpbuffid} && ${tmpstackcheck}) {
					/if (${validate_cast[FALSE, spell, ${DamageShield}, ${Group.Member[${_count}].ID}]}) {
						/call core_cast2 "${DamageShield}" spell ${Group.Member[${_count}].ID} FALSE
						/varset CastCheck 1
					}
				}
			
				/sit
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.Buff[${Reptile}].ID" "tmpbuffid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Spell[${Reptile}].Stacks" "tmpstackcheck" "bool"
				/if (!${tmpbuffid} && ${tmpstackcheck}) {
					/if (${validate_cast[FALSE, spell, ${Reptile}, ${Group.Member[${_count}].ID}]}) {
						/call core_cast2 "${Reptile}" spell ${Group.Member[${_count}].ID} FALSE
						/varset CastCheck 1
					}
				}
			}
		}
	/next _count
	|- Delete variable's
	/if (${Defined[tmpbuffid]}) /deletevar tmpbuffid
	/if (${Defined[tmpskinid]}) /deletevar tmpskinid
	/if (${Defined[tmpsymbolid]}) /deletevar tmpsymbolid
	/if (${Defined[tmpaegoid]}) /deletevar tmpaegoid
	/if (${Defined[tmpstackcheck]}) /deletevar tmpstackcheck

	/if (${CastCheck}) {
		/call LoadSpellBar
		/if (${verbose${Me.Class.ShortName}}) /docommand /dgt \aw Done Buffing
	}

/return
|----------------------------------------------------------------------------
|- SUB: Single Heal
|---------------------------------------------------------------------------- 
Sub single_target_heals

	/call get_heal_target 85
	/declare _worstHurtId int local ${Macro.Return}
	
	/if (${_worstHurtId} > 0) {
		/if (${validate_cast[FALSE, spell, "${HealSpell1}", ${_worstHurtId}]}) {
			/call core_cast2 "${HealSpell1}" spell ${_worstHurtId} FALSE
		}
	}
/return
|----------------------------------------------------------------------------
|- SUB: HealGroup
|---------------------------------------------------------------------------- 
Sub group_heals

	/if (${check_hurt[FALSE, group, 20]} >= 1) {
		/if (${validate_cast[FALSE, spell, "${Survival}", ${Me.ID}]}) /call core_cast2 "${Survival}" spell ${Me.ID} FALSE
	}

/return