|- IHCWAR.mac - By IHC385
|- Automatic Warrior bot - 
|- Version 2.0
|- Updated: 4/25/2019
|- Credit: Toots, Noobhax0r, Maskoi, Ctaylor, Treehuggindruid. A lot of ideas were borrowed and modified from their macros
#Chat group
#Chat tell
#Chat raid
#turbo 80
#include IHCMercs\ihcsubs.inc
#include IHCMercs\ihcshdutil.inc
#include IHCMercs\ihcevents.inc
#warning
#bind SetVarInt		/setvarint
#bind CmdList       /ihchelp
#bind DefenseDisc    /defdisc
#bind FortitudeDisc  /evadedisc
|-#Event NotOnTarget	"#*#You cannot see your target#*#"
|-#Event NotOnTarget	"#*#Your target is too far away#*#"
#Event Iamsnared	"#*#You are entangled by webs#*#"
#Event Buff 			"Your #1# spell has worn off of #*#."
|- #Event TargetCasting	"#*#${Target.CleanName} begins to cast a spell.#*#"

Sub Main
	/delay ${Math.Rand[3]}
	/doevents flush
	/declare MacroName       	string outer IHCWAR
	/declare MacroPath       	string outer IHCMercs\IHCWAR
	/declare IHCVersion       	string outer 2.0 
	/declare IniFileName     	string outer ${MacroPath}_${EverQuest.Server}_${Me.CleanName}.ini

	/call ShdSetup	
	/call VarSetup
	/call AliasSetup
	/call SetupSpells
	/call SetControlToon
	/call LoadSpellBar
|-Cursor ID
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}
	/call WelcomeMsg
	
	/declare AssistRange int outer 10
	/declare AutoCampRadius int outer 10

	/if (${Select[${Me.Class.ShortName},WAR,SK,MNK,SHD]}) /call AddToAlert

	/autoskill bash

 :mainloop
	/call ModeSet
	/if (${Mode}==0) /call Travel
	/if (${Mode}==1) /call ManualPullCamping
	/if (${Mode}==2) /call ManualRunAndGun
	/if (${Mode}==3) /call AFKRadiusCamping
	/if (${Mode}==4) /call AFKRunAndGun
	/if (${Mode}==5) /call DoEvent
/goto :mainloop
/return
|----------------------------------------------------------------------------
|- SUB: AFKRadiusCamping 
|---------------------------------------------------------------------------- 
Sub AFKRadiusCamping
    /call MakeCamp
    /call RemoveTravelBuffs
	/target clear   

	/while (${Mode}==3) {

		/call DummyMode

|		/call check_resources FALSE "${endregen}" disc ${Me.ID} 15
		
		/call set_timers


		/call puller_check_group_resources 
		/call afk_pull

		/call check_state FALSE
		/call get_target
		

		/call balance_hp

		/call check_add_aggro

		/call Engage
		/call AoEAggro
		/call DoDisc
		/call get_aggro
		/call downtime_buffs
		/call combat_dps

		/call MoveToCamp ${PullAutoCampX} ${PullAutoCampY} ${PullAutoCampZ} ${AutoCampRadius}

		/doevents
	}
/return
|----------------------------------------------------------------------------
|- SUB: downtime_buffs 
|---------------------------------------------------------------------------- 
Sub downtime_buffs

	/if (${Me.XTarget}) /return
	/if (!${Me.Buff[${Skin}].ID} ) {
		/if (${validate_cast[FALSE, spell, "${Skin}", ${Me.ID}]}) {
			/call core_cast2 "${Skin}" spell ${Me.ID} FALSE
		}
	}

	/if (${Me.XTarget}) /return
	/if (!${Me.Buff[${Stance}].ID} ) {
		/if (${validate_cast[FALSE, spell, "${Stance}", ${Me.ID}]}) {
			/call core_cast2 "${Stance}" spell ${Me.ID} FALSE
		}
	}

	/if (${Me.XTarget}) /return
	/if (!${Me.Buff[${Cloak}].ID} ) {
		/if (${validate_cast[FALSE, spell, "${Cloak}", ${Me.ID}]}) {
			/call core_cast2 "${Cloak}" spell ${Me.ID} FALSE
		}
	}

	/if (${Me.XTarget}) /return
	/if (!${Me.Buff[${HPShroud}].ID} ) {
		/if (${validate_cast[FALSE, spell, "${HPShroud}", ${Me.ID}]}) {
			/call core_cast2 "${HPShroud}" spell ${Me.ID} FALSE
		}
	}

	/if (${Me.XTarget}) /return
	/if (!${Me.Buff[${MPShroud}].ID} ) {
		/if (${validate_cast[FALSE, spell, "${MPShroud}", ${Me.ID}]}) {
			/call core_cast2 "${MPShroud}" spell ${Me.ID} FALSE
		}
	}
/return
|----------------------------------------------------------------------------
|- SUB: DoDisc 
|---------------------------------------------------------------------------- 
Sub combat_dps
	/if (!${Me.XTarget}) /return
	
	/if (!${Target.Snared.ID}) {
		/if (${validate_cast[FALSE, spell, "${SnareSpell}", ${Target.ID}]}) /call core_cast2 "${SnareSpell}" spell ${Target.ID} FALSE
	}

	/if (${Me.PctHPs} < 90) {
		/if (${validate_cast[FALSE, spell, "${Touch1}", ${Target.ID}]}) /call core_cast2 "${Touch1}" spell ${Target.ID} FALSE
	}

	/if (${Me.PctHPs} < 90) {
		/if (${validate_cast[FALSE, spell, "${Touch2}", ${Target.ID}]}) /call core_cast2 "${Touch2}" spell ${Target.ID} FALSE
	}

	/if (${Me.PctHPs} < 90) {
		/if (${validate_cast[FALSE, spell, "${Touch3}", ${Target.ID}]}) /call core_cast2 "${Touch3}" spell ${Target.ID} FALSE
	}

	/if (${Me.PctMana} > 70) {
		/if (${validate_cast[FALSE, spell, "${Bond}", ${Target.ID}]}) /call core_cast2 "${Bond}" spell ${Target.ID} FALSE
	}

	
/return
|----------------------------------------------------------------------------
|- SUB: DoDisc 
|---------------------------------------------------------------------------- 
Sub DoDisc

	/if (!${Me.XTarget}) /return
	/if (${Navigation.PathLength[id ${Target.ID}]} > ${AssistRange}) /return

	

	/if ((${SpawnCount[npc radius 60 zradius 50]} > 3 || ${Target.Named} || ${Target.Level} > (${Me.Level}+3)) &&  ${Me.CombatAbilityReady[${IchorGuardDisc}]}) {

		/if (${Me.ActiveDisc.ID}) {
			/if (${Me.ActiveDisc.ID} != ${DeflectionID} && ${Me.ActiveDisc.ID} != ${LeechcurseID} && ${Me.ActiveDisc.ID} != ${UnholyAuraID} && ${Me.ActiveDisc.ID} != ${IchorGuardID}) {
				/stopdisc
				/delay 5 !${Me.ActiveDisc.ID}
				/disc ${IchorGuardDisc}
			}
		} else {
			/disc ${IchorGuardDisc}
		}
	}

	/if ((${SpawnCount[npc radius 60 zradius 50]} > 3 || ${Target.Named} || ${Target.Level} > (${Me.Level}+3)) &&  ${Me.CombatAbilityReady[${LeechcurseDisc}]}) {

		/if (${Me.ActiveDisc.ID}) {
			/if (${Me.ActiveDisc.ID} != ${DeflectionID} && ${Me.ActiveDisc.ID} != ${LeechcurseID} && ${Me.ActiveDisc.ID} != ${UnholyAuraID} && ${Me.ActiveDisc.ID} != ${IchorGuardID}) {
				/stopdisc
				/delay 5 !${Me.ActiveDisc.ID}
				/disc ${LeechcurseDisc}
			}
		} else {
			/disc ${LeechcurseDisc}
		}
	}


	/if ((${SpawnCount[npc radius 60 zradius 50]} > 3 || ${Target.Named} || ${Target.Level} > (${Me.Level}+3)) &&  ${Me.CombatAbilityReady[${UnholyAuraDisc}]}) {

		/if (${Me.ActiveDisc.ID}) {
			/if (${Me.ActiveDisc.ID} != ${DeflectionID} && ${Me.ActiveDisc.ID} != ${LeechcurseID} && ${Me.ActiveDisc.ID} != ${UnholyAuraID} && ${Me.ActiveDisc.ID} != ${IchorGuardID}) {
				/stopdisc
				/delay 5 !${Me.ActiveDisc.ID}
				/disc ${UnholyAuraDisc}
			}
		} else {
			/disc ${UnholyAuraDisc}
		}
	}

	/if (${Me.PctHPs} < 30 && ${Me.CombatAbilityReady[${DeflectionDisc}]}) {

		/if (${Me.ActiveDisc.ID}) {
			/if (${Me.ActiveDisc.ID} != ${DeflectionID}) {
				/stopdisc
				/delay 5 !${Me.ActiveDisc.ID}
				/disc ${DeflectionDisc}
			}
		} else {
			/disc ${DeflectionDisc}
		}
	}
	
/return
|----------------------------------------------------------------------------
|- SUB: get_aggro
|---------------------------------------------------------------------------- 
Sub get_aggro
	/if (!${Me.XTarget}) /return

	/if (${Me.AbilityReady[Taunt]} && ${Target.PctHPs} > 1 && ${Me.SecondaryPctAggro} >= 100) {
		/call AbilityNow "Taunt"
	}

	/if (${Me.AbilityReady[Disarm]} && ${Target.PctHPs}>1) {
		/call AbilityNow "Disarm"
	}
	/if (${Me.AbilityReady[Bash]} && ${Target.PctHPs}>1) {
		/call AbilityNow "Bash"
	}
	/if (${Me.AbilityReady[Kick]} && ${Target.PctHPs}>1) {
		/call AbilityNow "Kick"
	}

	/if (${Me.SecondaryPctAggro} >= 30) {
		/if (${validate_cast[FALSE, spell, "${Terror1}", ${Target.ID}]}) /call core_cast2 "${Terror1}" spell ${Target.ID} FALSE
	}

	/if (${Me.SecondaryPctAggro} >= 30) {
		/if (${validate_cast[FALSE, spell, "${Terror2}", ${Target.ID}]}) /call core_cast2 "${Terror2}" spell ${Target.ID} FALSE
	}

/return
|----------------------------------------------------------------------------
|- SUB: AoEAggro   
|---------------------------------------------------------------------------- 
Sub AoEAggro
	/if (!${Me.XTarget}) /return
	/if (${Navigation.PathLength[id ${Target.ID}]}>${AssistRange}) /return 
/return
|----------------------------------------------------------------------------
|- SUB: Event Iamsnared
|----------------------------------------------------------------------------
Sub Event_Iamsnared 
	/if (${DoGroupBeg}) {
	 /call BegForCure	
	}
	/doevents flush NotOnTarget
/return
|----------------------------------------------------------------------------
|- SUB: Event NotOnTarget - For dealing with too far away and cannot see messages
|----------------------------------------------------------------------------
Sub Event_NotOnTarget
	/if (${Navigation.PathLength[id ${Target.ID}]} < 50) /face fast
	/doevents flush NotOnTarget
/return