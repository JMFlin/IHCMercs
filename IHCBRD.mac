|- IHCBRD.mac - By IHC385
|- Automatic Bard bot - 
|- Version 1.0
|- Updated: 6/1/2019
|- Credit: Noobhax0r, Maskoi, Ctaylor, Treehuggindruid. A lot of ideas were borrowed and modified from their macros
|- Credit: winnower - IHCTwist logic is an attempt at a macro version of the MQ2Medley plugin.
#Chat group
#Chat tell
#Chat raid
#turbo 80
#include IHCMercs\ihcsubs.inc
#include IHCMercs\ihcbrdutil.inc
#include IHCMercs\events.inc
#warning
#bind SetVarInt	/setvarint
#bind CmdList        /ihchelp

Sub Main
	/delay ${Math.Rand[10]}
	/doevents flush
	/declare MacroName       	string outer IHCBRD**BETA**
	/declare MacroPath       	string outer IHCMercs\IHCBRD
	/declare IHCVersion       	string outer 1.3 
	/declare IniFileName     	string outer ${MacroPath}_${EverQuest.Server}_${Me.CleanName}.ini
	/declare SongFileName     	string outer ${MacroPath}_Songs_${EverQuest.Server}_${Me.CleanName}.ini

	/call BrdSetup
	/call VarSetup
	/if (${IHCVersion.NotEqual[${IHCMacVersion}]}) {
		/call ClassAliasSetup
	}
	/call CheckSpells
	/call LoadSongData
|	/call SetControlToon
	/call LoadSpellBar
|-Cursor ID
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}
	/call WelcomeMsg

	/if (${alliance_check_group[FALSE]}) /varset UseAlliance TRUE
	/call setup_skill_melee FALSE

 :mainloop
	/call ModeSet
	/if (${Mode}==0) /call Travel
	/if (${Mode}==1) /call ManualPullCamping
	/if (${Mode}==2) /call ManualRunAndGun
	/if (${Mode}==3) /call ManualPullCamping
	/if (${Mode}==4) /call AFKRunAndGun
	/if (${Mode}==5) /call DoEvent
/goto :mainloop
/return
|----------------------------------------------------------------------------
|- SUB: ManualPullCamping
|---------------------------------------------------------------------------- 
Sub ManualPullCamping
	/call MakeCamp
    /call RemoveTravelBuffs

	/while (${Mode}==1 || ${Mode}==3) {

		/call check_state FALSE
		/call MoveToCamp ${PullAutoCampX} ${PullAutoCampY} ${PullAutoCampZ} ${AutoCampRadius}
		/call get_target
		/call Engage
		/if (${Me.XTarget}) {
			/call pulse FALSE ${BattleMelody}
		}
		/if (!${Me.XTarget}) {
			/call pulse FALSE ${RegenMelody}
		}
		/call combat
		/call selo
|		/if (${Me.XTarget}>=${MezStartCount} && ${MezOn} && ${Me.GemTimer[${AEMezSong}]}==0) /call DoMezStuff
|		/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.Distance}<${AssistRange} && (!${Target.Mezzed.ID} || ${AllowMezBreak})) /call AANDisc
|		/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.Distance}<${AssistRange} && ${Ok2Assist} && (!${Target.Mezzed.ID} || ${AllowMezBreak})) 


|		/if ((${Me.Poisoned.ID} || ${Me.Diseased.ID} || ${Me.Cursed.ID} || ${Me.Corrupted.ID} || ${Me.Snared.ID} || ${Me.Mezzed.ID} || ${Me.Charmed.ID}) && ${BegTimer}==0 && ${DoGroupBeg}) /call BegForCure
		/doevents
	}
/return

|***
 *	DES: Sing "Pulse" a single song
 *	USE: /call pulse [gem##] [type] 
 *  NOTE:
 ***|
Sub pulse(bool _debug, string _melody)

	/declare _song 							int local 0
	/declare _lnString               		int local ${_melody.Length}
    /declare _melodyArray[${_lnString}]  	string local

    /for _song 1 to ${_lnString}
        /varset _melodyArray[${_song}] ${_melody.Mid[${_song},1]}
    /next _song
	
	/if (${_melody} == ${BattleMelody}) /call get_target
	
	/call debuff
	/call selo

	/for _song 1 to ${_lnString}
		
		/call debuff
		/call selo
		/doevents
		/call get_target
		/call Engage
		
		/if (!${Me.XTarget} && ${_melody} == ${BattleMelody}) {
			/call pulse_stop pulse_line_start
			/return
		} else /if (${Me.XTarget} && ${_melody} == ${RegenMelody}) {
			/call pulse_stop pulse_line_start
			/return
		}
		/if (${validate_cast[FALSE, pulse, "${Me.Gem[${_melodyArray[${_song}]}]}", ${Me.ID}]}) {
			/call core_cast2 "${Me.Gem[${_melodyArray[${_song}]}]}" pulse 0 FALSE
		}

		/if (${_melody} == ${RegenMelody}) /stopsong

	/next _song
	
/return TRUE

Sub debuff
	/if (!${Me.XTarget}) /return
	/if (!${Target.ID}) /return
	/if (${Target.Distance} > 150) /return
	/if (!${Spawn[id ${Target.ID}].LineOfSight}) /return

	/if (${Target.Type.Equal[NPC]} && !${Target.Slowed.ID} && !${Target.Buff[${SlowSong}].ID} && ${slowImmuneID} != ${Target.ID}) {
		/if (${validate_cast[FALSE, pulse, "${SlowSong}", ${Target.ID}]}) {
			/docommand /dgt Slowing \ar ${Target.Name} \ax with =>> \ag ${SlowSong} \ax <<=
			/call core_cast2 "${SlowSong}" pulse ${Target.ID} FALSE
		}
		/doevents CAST_IMMUNE
		/if (${Select[${castReturn},CAST_IMMUNE]}) {
			/docommand /dgt \ar ${Target.Name} \ax is IMMUNE to =>> \ag ${SlowSong} \ax <<=
			/varset slowImmuneID ${Target.ID}
		}
	}

/return

Sub selo
	/if (${Me.XTarget}) /return

	/if (${validate_cast[FALSE, pulse, "${Me.Gem[3]}", ${Me.ID}]}) {
		/call core_cast2 "${Me.Gem[3]}" pulse 0 FALSE
	}

/return
|----------------------------------------------------------------------------
|- SUB: Combatdps
|---------------------------------------------------------------------------- 
Sub combat
	/doevents

	/if (!${validate_melee_combat[FALSE]}) /return

	/declare BurningNow int local 0
	/if (${Me.XTarget}>=${BurnMobCount} || (${Target.Named} && ${BurnNamed}) || ${BurnAlways} || ${burnnow}) {
		/if (${Me.CombatAbilityReady[Thousand Blades]}) {
				/disc Thousand Blades
				/delay 5
		}
		/if (${Me.AltAbilityReady[Dance of Blades]}) {
				/alt act ${Me.AltAbility[Dance of Blades].ID}
				/delay 5
		}
		/if (${Me.AltAbilityReady[Flurry of Notes]}) {
				/alt act ${Me.AltAbility[Flurry of Notes].ID}
				/delay 5
		}
		/if (${Me.AltAbilityReady[Song of Stone]} && ${UseSwarmpet}) {
				/alt act ${Me.AltAbility[Song of Stone].ID}
				/delay 5
		}
		/if (${Me.AltAbilityReady[Frenzied Kicks]}) {
				/alt act ${Me.AltAbility[Frenzied Kicks].ID}
				/delay 5
		}
		/if (${Me.AltAbilityReady[Funeral Dirge]}) {
				/alt act ${Me.AltAbility[Funeral Dirge].ID}
				/delay 5
		}
		/varset BurningNow 1
	}


	/if (${MelodyType.Equal[Caster]} && ${Me.AltAbilityReady[Fundament: Second Spire of the Minstrels]}) {
		/alt act ${Me.AltAbility[Fundament: Second Spire of the Minstrels].ID}
		/delay 5
	} else /if (${Me.AltAbilityReady[Fundament: Third Spire of the Minstrels]}) {
		/alt act ${Me.AltAbility[Fundament: Third Spire of the Minstrels].ID}
		/delay 5
	} else /if (${FindItem[${ChestItemName}].ID} && ${ChestCombatCast} && ${Me.ItemReady[${ChestItemName}]} && !${Me.Buff[Third Spire of the Minstrels].ID} && !${Me.Buff[Second Spire of the Minstrels].ID}) {
		/useitem "${ChestItemName}"
		/delay 10	
	}
	/if (${Me.AltAbilityReady[Boastful Bellow]} && !${Target.Buff[Boastful Bellow].ID} && ${Me.PctEndurance}>20 && ${Target.PctHPs}>20) {
		/alt act ${Me.AltAbility[Boastful Bellow].ID}
		/delay 5
	} else /if (${Me.AltAbilityReady[Lyrical Prankster]} && ${Me.PctEndurance}>20 && ${Target.PctHPs}>20 && ${UseSwarmpet}) {
		/alt act ${Me.AltAbility[Lyrical Prankster].ID}
		/delay 5
	} else /if (${Me.AltAbilityReady[Cacophony]} && ${Me.PctEndurance}>20 && ${Target.PctHPs}>20) {
		/alt act ${Me.AltAbility[Cacophony].ID}
		/delay 5
	} else /if (${Me.AltAbilityReady[Bladed Song]} && ${Me.PctEndurance}>20 && ${Target.PctHPs}>20) {
		/alt act ${Me.AltAbility[Bladed Song].ID}
		/delay 5
	}
	/if (${Me.AbilityReady[Kick]} && ${Target.Distance}<=${Target.MaxRangeTo} && ${Me.Combat} && ${UseMelee}) {
		/doability Kick
		/delay 5
	} 
	/if (${Me.AbilityReady[Intimidation]} && ${Target.Distance}<=${Target.MaxRangeTo} && ${Me.Combat} && ${Me.Level} > 100) {
		/doability Intimidation
		/delay 5
	}
	/varset BurningNow 0
/return
|----------------------------------------------------------------------------
|- SUB: AANDisc
|---------------------------------------------------------------------------- 
Sub AANDisc
	/doevents

	/if (!${validate_melee_combat[FALSE]}) /return

	/call use_skill_melee FALSE ${Target.ID}

	/if (${FindItem[=${Epicsword}].ID} && ${Me.ItemReady[=${Epicsword}]}) {
		/call StopTune
		/useitem "${Epicsword}"
		/delay 10
	}
	/if (${Me.AltAbilityReady[Fierce Eye]}) {
		/alt act ${Me.AltAbility[Fierce Eye].ID}
		/delay 5
	}
	/if (${Me.AltAbilityReady[Tune Stuck in Your Head]}) {
		/alt act ${Me.AltAbility[Tune Stuck in Your Head].ID}
		/delay 5
	}
	/if (${Me.AltAbilityReady[Quick Time]} && !${Me.Song[Ruaabri's Fury].ID}) {
		/alt act ${Me.AltAbility[Quick Time].ID}
		/delay 5
	}
/return
|***
 *	DES: quit singing.
 *	USE: 
 *  NOTE: 
 ***|
sub pulse_stop(string _marker, bool _debug)
	/if ((${Me.Casting.ID} || ${Me.BardSongPlaying})) {
		/varset castReturn CAST_NOTREADY
		/stopsong
		/stopcast
		/delay 10 !${Me.Casting.ID}
	}	
/return TRUE