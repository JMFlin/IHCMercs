|- IHCCLR.mac - By IHC385
|- Automatic Cleric bot -
|- Modded Version of AutoCleric (Auto_Clr) with expanded features 
|- Version 2.0
|- Updated: 4/25/2019
|- Credit: Noobhax0r, Maskoi, Ctaylor, Treehuggindruid. A lot of ideas were borrowed and modified from their macros
#Chat group
#Chat tell
#Chat raid
#turbo 80
#include IHCMercs\ihcsubs.inc
#include IHCMercs\ihcclrutil.inc
#include IHCMercs\ihcevents.inc
#warning
#bind SetVarInt	/setvarint
#bind CmdList   /ihchelp
#bind CureOff	/cureoff
#bind BNDGroupCure	/curegroup
#Event Buff 			"Your #1# spell has worn off of #*#."
#Event GoMana			"You have been granted a gift of#*#"
#Event GoMoff			"Your gift of#*#mana fades."
#Event ReactCure		"#*#strangled by a suffocating breeze#*#"

Sub Main
	/delay ${Math.Rand[3]}
	/doevents flush
	/declare MacroName       	string outer IHCCLR
	/declare MacroPath       	string outer IHCMercs\IHCCLR
	/declare IHCVersion       	string outer 2.0 
	/declare IniFileName     	string outer ${MacroPath}_${EverQuest.Server}_${Me.CleanName}.ini

	/call VarSetup
	/call ClrSetup	
	/call AliasSetup
	/call CheckSpells
	/call SetControlToon
	/call LoadSpellBar
	/squelch /alert clear 3
	/squelch /alert clear 4
|-Cursor ID
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}
	/call WelcomeMsg
	/if (${assistid}==${Me.ID}) {
		/echo \aw I am Main Assist
	} else {
		/echo \aw Assisting \ay >> \ag ${assistname} \ay << \aw at \ag ${AutoAssistAt}%
	}

	/if (${UseZoneLogic}) {
		/call ZoneEventChk
	}

 :mainloop
	/call ModeSet
	/if (${Mode}==0) /call Travel
	/if (${Mode}==1) /call ManualPullCamping
	/if (${Mode}==2) /call ManualRunAndGun
	/if (${Mode}==3) /call ManualPullCamping
	/if (${Mode}==4) /call AFKRunAndGun
	/if (${Mode}==5) /call DoEvent
/goto :mainloop
/return
|----------------------------------------------------------------------------
|- SUB: ManualPullCamping
|---------------------------------------------------------------------------- 
Sub ManualPullCamping
	/call MakeCamp
    /call RemoveTravelBuffs 
	
	/while (${Mode}==1 || ${Mode}==3) {

		/call check_state
		/call TankChangeCheck
|-		/if (!${Me.Combat} && !${Me.XTarget[1].ID} && !${Me.Invis} && !${Me.Casting.ID} && !${Window[SpellBookWnd]}) /call check_illusion
		/if (${DynamicHealing}) /call ConfigHeal
		/call heals
		/call check_for_corpse FALSE
|		/call ExtraHeal
|		/if (${Me.Song["Touch of the Divine"].ID}) /call DALogic
|		/if ((${Me.PctAggro}>90||${Me.XTarget[2].PctAggro}>90 || ${Me.XTarget[3].PctAggro}>90) && (${Me.PctHPs}<=${grouphealpoint}) && (!${Me.Buff[Sanctuary].ID})) /call AggroCheck
|		/if (!${Me.Casting.ID} && (${Me.XTarget[1].ID} || !${Me.Invis})) /call HealXT
|		/if (!${Me.Casting.ID} && (${Me.XTarget[1].ID} || !${Me.Invis})) /call HealGroup
|		/if ((${AutoRez}==1) && (!${Me.Moving}) && (!${Me.Invis})) /call RezCheck

		/if ((${Me.PctMana}>=30) && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID}) && (!${Me.Invis}) && !${MoveTo.Moving}) /call BuffCheck
		/if ((${Me.PctMana}>=30) && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID}) && (!${Me.Invis}) && !${MoveTo.Moving}) /call BuffGroup

		/if (!${Me.Casting.ID}) /call MoveToCamp ${PullAutoCampX} ${PullAutoCampY} ${PullAutoCampZ} ${AutoCampRadius}

		/doevents
	}
/return
|----------------------------------------------------------------------------
|- SUB: ManualRunAndGun
|----------------------------------------------------------------------------
Sub ManualRunAndGun
	/if (${MakeCamp.Status.Equal[ON]}) /makecamp off
	/call RemoveTravelBuffs
	
	/while (${Mode}==2) {
		/if (${Me.Hovering}) /call DeathSub
		/if (${Me.State.Equal[FEIGN]}) /stand

		/if (!${Me.XTarget[1].ID} && !${Me.Moving}) /varset RunAndGunMedTimer 7s
		/if (!${Me.Moving} && !${Me.XTarget[1].ID} && !${Me.Casting.ID} && ${RunAndGunMedTimer}==0) /call check_illusion
		/if (!${Me.Moving} && !${Me.XTarget[1].ID} && !${Target.ID} && !${Me.Sitting} && ${RunAndGunMedTimer}==0) /sit
		/if (${Me.PctMana}>=30 && !${Me.Casting.ID} && !${Me.XTarget[1].ID} && !${Me.Moving} && ${RunAndGunMedTimer}==0) /call BuffGroup
		/if (${Me.PctMana}>=30 && !${Me.Casting.ID} && !${Me.XTarget[1].ID} && !${Me.Moving} && ${RunAndGunMedTimer}==0) /call BuffSelf
		
		/call TankChangeCheck

		/if (${Me.XTarget[1].ID} && ${Spawn[${Group.Leader.Name}].Distance}<40) /call CastersEngage

		/if (${Cursor.ID}) /call BagModRods
		/call TankChangeCheck
		/if (!${Me.Combat} && !${Me.XTarget[1].ID} && !${Me.Invis} && !${Me.Casting.ID} && !${Window[SpellBookWnd]}) /call check_illusion
		/if (${DynamicHealing}) /call ConfigHeal
		/call ExtraHeal
		/if (${Me.Song["Touch of the Divine"].ID}) /call DALogic
		/if ((${Me.PctAggro}>90||${Me.XTarget[2].PctAggro}>90 || ${Me.XTarget[3].PctAggro}>90) && (${Me.PctHPs}<=${grouphealpoint}) && (!${Me.Buff[Sanctuary].ID})) /call AggroCheck
		/if (!${Me.Casting.ID} && (${Me.XTarget[1].ID} || !${Me.Invis})) /call HealXT
		/if (!${Me.Casting.ID} && (${Me.XTarget[1].ID} || !${Me.Invis})) /call HealGroup
		/if ((${AutoRez}==1) && (!${Me.Moving}) && (!${Me.Invis})) /call RezCheck

		/if ((${Me.PctMana}>=30) && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID}) && (!${Me.Invis}) && !${MoveTo.Moving} && !${Group.Member[${assistname}].Hovering} && ${Group.Member[${assistname}].Type.NotEqual[Corpse]} && ${Group.Member[${assistname}].PctHPs}>=1 && ${DoBuffs}) /call BuffCheck
		/if ((${Me.PctMana}>=30) && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID}) && (!${Me.Invis}) && !${MoveTo.Moving} && (!${AdvPath.Following}) && ${groupbufftimer}==0 && ${DoBuffs}) /call BuffGroup


|-		/if (${Target.ID} && ${Target.ID}!=${Me.ID} && ${Math.Distance[${Target.Y},${Target.X},${Target.Z}:${PullAutoCampY},${PullAutoCampX},${PullAutoCampZ}]}<(${AssistRange}+25)) /call UseItemsCommon

		/if (!${Me.XTarget[1].ID} || ${Spawn[${Group.Leader.Name}].Distance}>40) /call Travel

		/if (${Target.Type.Equal[Corpse]}) /target clear

		/doevents
	}
/return

|Sub heals(bool _debug, string _type)

|	/call check_hurt FALSE Group

|/return
|----------------------------------------------------------------------------
|- SUB: ConfigHeal
|---------------------------------------------------------------------------- 
Sub ConfigHeal
	/if (${Select[${Zone.ID},795,796]}==0 && !${Raid.Members}) {
		/if (${Me.XTarget}>4 || ${Me.XTarget[1].Named}) {
			/if (${tankhealpoint}!=95) {
				/varset tankhealpoint 95
				/varset grouphealpoint 85
				/varset bighealpoint 80
			}
		} else /if (${Me.XTarget[1].Level}>=${Me.Level}) {
			/if (${tankhealpoint}!=85) {
				/varset tankhealpoint 85
				/varset grouphealpoint 80
				/varset bighealpoint 70
			}
		} else /if (${Me.XTarget[1].Level}>=${Math.Calc[${Me.Level}-5]}) {
			/if (${tankhealpoint}!=80) {
				/varset tankhealpoint 80
				/varset grouphealpoint 75
				/varset bighealpoint 60
			}
		} else {
			/if (${tankhealpoint}!=70) {
				/varset tankhealpoint 70
				/varset grouphealpoint 75
				/varset bighealpoint 60
			}
		}
	} else /if (${tankhealpoint}!=${tbmhealpoint} && !${Raid.Members}) {
		/varset healpoint ${tbmhealpoint}
		/varset tankhealpoint ${tbmhealpoint}
		/varcalc grouphealpoint ${tbmhealpoint}-5
		/varcalc bighealpoint ${tbmhealpoint}-10
	} else /if (${tankhealpoint}!=${raidhealpoint} && ${Raid.Members}) {
		/varset healpoint ${raidhealpoint}
		/varset tankhealpoint ${raidhealpoint}
		/varcalc grouphealpoint ${raidhealpoint}-5
		/varcalc bighealpoint ${raidhealpoint}-10
	}
/return
|----------------------------------------------------------------------------
|- SUB: BuffGroup
|---------------------------------------------------------------------------- 
Sub BuffGroup
	/declare bmember			int local 0
	/if (${SpawnCount[pccorpse group radius ${setMaxRezRange}]}) /return
	/if (${SpawnCount[pccorpse raid radius ${setMaxRezRange}]}) /return
	/if (${Me.Casting.ID}) /return

	/if (${Me.XTarget}) /return

	/if (${groupbufftimer}==0) /varset groupbufftimer 10s
	/for bmember 1 to ${Group}
		/if (${Group.Member[${bmember}].Distance}<${Spell[${HPBuff}].MyRange} && !${Group.Member[${bmember}].OtherZone} && !${Me.Casting.ID}) {

			/if (${Group.Member[${bmember}].Type.Equal[Corpse]}) /continue

			/if (!${Me.Book[${GroupHPBuff}]}) {
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Spell[${HPBuff}].ID" "tmpbuffid" "bool"
				/if (!${tmpbuffid} && ${Me.Book[${HPBuff}]} && ${Me.CurrentMana}>${Spell[${HPBuff}].Mana} && !${Me.Casting.ID}) {
					/if (${validate_cast[FALSE, spell, ${HPBuff}, ${Group.Member[${bmember}].ID}]}) /call core_cast2 "${HPBuff}" spell ${Group.Member[${bmember}].ID} FALSE
					/varset spellrememtimer 5s
					/delay 10
				}
			}
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Aego.ID" "tmpbuffid" "int"
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Skin.ID" "tmpskinid" "int"
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Symbol.ID" "tmpsymbolid" "int"
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Aego.ID" "tmpaegoid" "int"
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Spell[${GroupBuff}].Stacks" "tmpstackcheck" "bool"
			/if (${tmpstackcheck} && !${tmpbuffid} && ${Me.Book[${GroupBuff}]} && ${Me.CurrentMana}>${Spell[${GroupBuff}].Mana} && !${Me.Casting.ID}) {
				/if (${validate_cast[FALSE, spell, ${GroupBuff}, ${Group.Member[${bmember}].ID}]}) /call core_cast2 "${GroupBuff}" spell ${Group.Member[${bmember}].ID} FALSE
				/varset spellrememtimer 5s
				/delay 10
			}

			/if (${Me.CurrentMana}>${Spell[${TankBuff}].Mana} && ${Group.Member[${bmember}].ID}==${Group.MainTank.ID} && !${Me.Casting.ID} && ${Me.Book[${TankBuff}]}) {
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Buff[${TankBuffMatch}].ID" "tmpbuffid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Spell[${TankBuff}].Stacks" "tmpstackcheck" "bool"
				/if (!${tmpbuffid} && ${tmpstackcheck}) {
					/if (${validate_cast[FALSE, spell, ${TankBuff}, ${Group.Member[${bmember}].ID}]}) /call core_cast2 "${TankBuff}" spell ${Group.Member[${bmember}].ID} FALSE
					/varset spellrememtimer 5s
					/delay 10
				}
			}
			/if (${Me.CurrentMana}>${Spell[${DivineBuff}].Mana} && ${Group.Member[${bmember}].ID}==${Group.MainTank.ID} && !${Me.Casting.ID} && ${Me.SpellReady[${DivineBuff}]} && ${DivineBuffOn}) {
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Buff[${DivineBuff}].ID" "tmpbuffid" "int"
				/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Spell[${DivineBuff}].Stacks" "tmpstackcheck" "bool"
				/if (!${tmpbuffid} && ${tmpstackcheck}) {
					/call DivineUsage
					/varset spellrememtimer 5s
					/delay 10
				}
			}
		}
	/next bmember
	|- Delete variable's
	/if (${Defined[tmpbuffid]}) /deletevar tmpbuffid
	/if (${Defined[tmpskinid]}) /deletevar tmpskinid
	/if (${Defined[tmpsymbolid]}) /deletevar tmpsymbolid
	/if (${Defined[tmpaegoid]}) /deletevar tmpaegoid
	/if (${Defined[tmpstackcheck]}) /deletevar tmpstackcheck
/return
|----------------------------------------------------------------------------
|- SUB: HealGroup
|---------------------------------------------------------------------------- 
Sub heals
||INTO ITS OWN SUB worst_hurt remember to declare global for healing classes
	/declare petworsthurtid		int local 0
	/declare petworsthp 		int local 100
	/declare worsthp 			int local 100 
	/declare worsthurtid		int local 0
	/declare worsthurtname		string local NULL
	/declare gmember			int local 0
	/declare HurtMember     	int local 0
	/varset GrPCond .
	/if (${Me.PctHPs}<=${grouphealpoint}) {
		/varcalc HurtMember ${HurtMember}+1
		/varset worsthurtid ${Me.ID}
		/varset worsthurtname ${Me.Name}
		/varset worsthp ${Me.PctHPs}
	}
   /for gmember 1 to ${Group}
		
		/if (${Group.Member[${gmember}].Type.Equal[Corpse]}) /continue
		
		
		|/if (${Group.Member[${gmember}].ID}==${qmtarget} && ${Me.PctMana}>60 && ${Group.Member[${gmember}].PctMana}<50 && ${Me.AltAbilityReady[Quiet Miracle]} && ${Group} && (!${Group.Member[${gmember}].Hovering} || ${Group.Member[${gmember}].Type.NotEqual[Corpse]})) /call AANow 135 ${Group.Member[${gmember}].ID}
		
		
		/if (${Group.Member[${gmember}].Distance}<=${healspellrange} && ${Group.Member[${gmember}].PctHPs} < ${grouphealpoint}) {
			/varcalc HurtMember ${HurtMember}+1
			/if (${Group.Member[${gmember}].PctHPs}<=${worsthp}) {
				/varset worsthurtid ${Group.Member[${gmember}].ID}
				/varset worsthurtname ${Group.Member[${gmember}].Name}
				/varset worsthp ${Group.Member[${gmember}].PctHPs}
				/varset GrPCond .
			}
         }
		/if (${Group.Member[${gmember}].Pet.ID}) {
			 /if (${Group.Member[${gmember}].Pet.Distance}<=${healspellrange} && (${Group.Member[${gmember}].Pet.PctHPs}<=${worsthp}) && (${Group.Member[${gmember}].Pet.PctHPs}<=${pethealpoint}) && ${pethealpoint}>0 && (${worsthp}>${grouphealpoint})) {         
			   /varset worsthurtid ${Group.Member[${gmember}].Pet.ID}
			   /varset worsthurtname ${Group.Member[${gmember}].Name}
			   /varset petworsthp ${Group.Member[${gmember}].Pet.PctHPs}
			   /varset GrPCond .Pet.
			 }
		  }
	/next gmember
|	/echo Healing ${worsthurtname} ${worsthurtid} with threshold ${grouphealpoint}
	/if (!${worsthurtid}) /return
|	/if (${HurtMember}>=3 && ${validate_cast[FALSE, spell, "${groupheal}", ${worsthurtid}]}) {
|		/call core_cast2 "${groupheal}" spell ${Me.ID} FALSE
|	} else 
	/if (${validate_cast[FALSE, spell, "${remedyheal1}", ${worsthurtid}]}) {
		/call core_cast2 "${remedyheal1}" spell ${worsthurtid} FALSE
	} else /if (${validate_cast[FALSE, spell, "${remedyheal2}", ${worsthurtid}]}) {
		/call core_cast2 "${remedyheal2}" spell ${worsthurtid} FALSE
	} else /if (${validate_cast[FALSE, spell, "${patchheal}", ${worsthurtid}]}) {
		/call core_cast2 "${patchheal}" spell ${worsthurtid} FALSE
	}
/return
|-Group Healing
 |   /if (${HurtMember}>=${grouphealcount} && ${Me.AltAbilityReady[Beacon of Life]} && ${Group}) {
|		/call AANow ${Me.AltAbility[Beacon of Life].ID} ${Me.ID}
|	} else /if (${HurtMember}>=${grouphealcount} && ${Me.SpellReady[${groupfastheal}]}) {
|		/call SpellQueue "${groupfastheal}" ${Me.ID}
|	} else /if (${HurtMember}>=${grouphealcount} && ${Me.SpellReady[${groupheal}]} && ${NoCures}!=1) {
|		/call SpellQueue "${groupheal}" ${Me.ID}
|	} else /if (${HurtMember}>=${grouphealcount} && ${Me.SpellReady[${grouphealnocure}]} && ${NoCures}==1) {
|		/call SpellQueue "${grouphealnocure}" ${Me.ID}
|	} else /if (${Me.PctHPs}<=${grouphealpoint}) {
|		/varset healpoint ${grouphealpoint}
|		/call HealQueue ${Me.ID}
|	} else /if ((${usepromheals}==1) && (${PromisedTimer}==0) && (${Group.Member[${assistname}]${TnKCond}Distance}<=${promhealrange}) && ${Me.XTarget[1].ID} && ${Group.Member[${assistname}]${TnKCond}PctHPs}>=1 && ${Me.GemTimer[${promheal}]}==0 && (${Group.Member[${assistname}]${TnKCond}PctHPs}>${bighealpoint})) {
|		/call SpellQueue "${promheal}" ${assistid}
|		/if ((${Macro.Return.Equal[CAST_SUCCESS]}) || (${Macro.Return.Equal[CAST_TAKEHOLD]})) /varset PromisedTimer 21s
|	} else /if ((${Group.Member[${assistname}]${TnKCond}Distance}<=${healspellrange}) && (${Group.Member[${assistname}]${TnKCond}PctHPs}<=${tankhealpoint}) && ${Group.Member[${assistname}]${TnKCond}PctHPs}>=1) {
|		/varset healpoint ${tankhealpoint}
|		/call HealQueue ${assistid}
|	} else /if ((${Group.Member[${worsthurtname}]${GrPCond}Distance}<=${healspellrange}) && (${worsthp}<=${grouphealpoint} || ${petworsthp}<=${grouphealpoint}) && ${Group.Member[${worsthurtname}]${GrPCond}PctHPs}>=1) {
|		/varset healpoint ${grouphealpoint}
|		/call HealQueue ${worsthurtid}
|	} else /if ((${Me.Corrupted.ID} || ${Me.Snared.ID}) && ${NoCures}!=1 && (${Me.AltAbilityReady[Purify Soul]} || ${Me.AltAbilityReady[Group Purify Soul ]} || ${Me.AltAbilityReady[Purified Spirits]}) && ${CureTimer}==0 && !${Me.Casting.ID} && ${CureOther}) {
|		/call OtherCure ${Me.ID}
|	} else /if (${Target.Type.Equal[PC]} && ${Target.BuffsPopulated}==TRUE && ${NoCures}!=1 && (${Target.Corrupted.ID} || ${Target.Snared.ID} || ${Target.Mezzed.ID} || ${Target.Charmed.ID}) && (${Me.AltAbilityReady[Purify Soul]} || ${Me.AltAbilityReady[Group Purify Soul ]}) && ${CureTimer}==0 && !${Me.Casting.ID} && ${CureOther}) {
|		/call OtherCure ${Target.ID}
|	} else /if ((${Me.Poisoned.ID} || ${Me.Diseased.ID} || ${Me.Cursed.ID}) && ${NoCures}!=1 && (${Me.AltAbilityReady[Radiant Cure]} || ${Me.AltAbilityReady[Purify Soul]} || ${Me.AltAbilityReady[Group Purify Soul ]} || ${Me.AltAbilityReady[Purified Spirits]}) && ${CureTimer}==0 && !${Me.Casting.ID}) {
|		/call GroupCure ${Me.ID}
|	} else /if (${Target.Type.Equal[PC]} && ${Target.BuffsPopulated}==TRUE && ${NoCures}!=1 && (${Target.Poisoned.ID} || ${Target.Diseased.ID} || ${Target.Cursed.ID}) && (${Me.AltAbilityReady[Radiant Cure]} || ${Me.AltAbilityReady[Purify Soul]} || ${Me.AltAbilityReady[Group Purify Soul ]}) && ${CureTimer}==0 && !${Me.Casting.ID}) {
|		/call GroupCure ${Target.ID}
|	} else /if (${Target.Buff[Gift of Living Death].ID} && ${CureTimer}==0 && !${Me.Casting.ID}) {
|||		/call SingleCure ${Target.ID}
	|} else /if ((${DivineBuffOn}==1 )&& (${DivineBuffRecast}==1) && (!${Me.Casting.ID}) && (${Spell[${DivineBuff}].Range}>${Group.Member[${assistname}]${TnKCond}Distance}) && (${Group.Member[${assistname}]${TnKCond}PctHPs}>=1) && (!${Group.Member[${assistname}]${TnKCond}Hovering}) && (${Group.Member[${assistname}]${TnKCond}PctHPs}>${tankhealpoint}) && ${bufftimer}==0) {
	|		/call DivineUsage
|	} else /if ((${Me.PctMana}>=${Manatonuke}) && (${Me.XTarget[1].ID}) && (!${Raid.Members}) && (${UseMelee}==1 || ${UseReverseDS}==1)) {
|		/call Offense
|	} else /if (${CureCount} && ${CureID}) {
|		/call GroupCure ${CureID}
|	}
|	/varset GrPCond .

|----------------------------------------------------------------------------
|- SUB: MedTime
|----------------------------------------------------------------------------
Sub MedTime
	/doevents
	/if (${Me.AltAbilityReady[Veturika's Perseverance]} && ${Me.PctMana}<=60 && ${Select[${Zone.ID},344,345,202]}==0 && ${Me.XTarget[1].ID}) {
		/call AANow ${Me.AltAbility[Veturika's Perseverance].ID}
	}
	/if (${UseModRods}) /call ClickModRoD
|-	/if (${FindItem[Transvergence].ID} && ${FindItem[Transvergence].Timer}==0 && ${Me.PctMana}<=50 && ${Me.XTarget[1].ID}) /useitem "${FindItem[Transvergence]}"
|-	/if (${FindItem[Modulation].ID} && ${FindItem[Modulation].Timer}==0 && ${Me.PctMana}<=50 && ${Me.XTarget[1].ID}) /useitem "${FindItem[Modulation]}"
	/if (${DoMed}) /call AutoMed
	/if (${enablesit}==0 && !${Me.Mount.ID} && ${Zone.Outdoor} && ${FindItem[${mountitem}].ID} && !${Me.XTarget[1].ID} && !${MoveTo.Moving} && !${AdvPath.Following} && ${Stick.Status.Equal[OFF]} && !${Me.FeetWet} && !${Me.Invis} && ${UseMelee}!=1) {
		/call ItemNow "${mountitem}"
	} else /if (${enablesit}==0 && (${Me.XTarget[1].ID} || ${Me.CombatState.Equal[DEBUFFED]}) && (${Me.AltAbilityReady[489]}) && (!${Me.Mount.ID}) && (!${Me.Buff[${Me.AltAbility[489].Spell}].ID}) && (${Spell[${Me.AltAbility[489].Spell}].Stacks})) {
		/call AANow 489
	} else /if (${enablesit}==0 && (${GoMana}==0) && (${Me.XTarget[1].ID} || ${Me.CombatState.Equal[DEBUFFED]}) && (!${Me.Mount.ID}) && (${Me.SpellReady[${yaulpspell}]}) && (!${Me.Buff[${yaulpspell}].ID}) && (${Spell[${yaulpspell}].Stacks})) {
		/cast "${yaulpspell}"
		/delay 2s !${Me.Casting.ID}
	}
/return
|-------------------------------------------------------------------------------------
|- SUB: Rez Check
|-------------------------------------------------------------------------------------
Sub RezCheck    
    /declare RezID int local
	/declare RezName string local

	/if (${reztimer}==0 && ${Alert[3].Size}>0) /alert clear 3
	|-Will not rez in Guild lobby - Guild Hall - Plane of Knowledge
    /if (${Spawn[pccorpse noalert 3 igroup radius 100 zradius 50].ID}) {
		/hidecorpse npc
		/varset RezID ${Spawn[pccorpse noalert 3 group radius 100 zradius 50].ID}
		/varset RezName ${Spawn[pccorpse noalert 3 group radius 100 zradius 50].Name}
		/target id ${RezID}
		/delay 5 ${Target.ID}==${RezID}
		/if (${Target.Distance}>25) /corpse
		/delay 5 ${Target.Distance}<25
		/if (${Me.AltAbilityReady[Blessing of Resurrection]}) {
			/docommand /dgt \ag Rezzing ${RezName}
			/call AANow 3800 ${RezID}
			/delay 4s !${Me.Casting.ID}
			/alert add 3 id ${RezID}
			/varset reztimer ${RetryRezDelay}s
		} else /if ((${FindItem[${epicwand}].ID}) && (${FindItem[${epicwand}].Timer}==0) && !${Me.AltAbility[3800]}) {
			/docommand /dgt \ag Rezzing ${RezName}
			/cast item "${epicwand}"
			/delay 10s !${Me.Casting.ID}
			/alert add 3 id ${RezID}
			/varset reztimer ${RetryRezDelay}s
		} else /if (${Me.Book[Reviviscence]} && ${Me.CurrentMana}>${Spell[Reviviscence].Mana} && !${Me.AltAbility[Blessing of Resurrection]}) {
			/docommand /dgt \ag Rezzing ${RezName}
			/call SpellQueue "Reviviscence" ${RezID}
			/alert add 3 id ${RezID}
			/varset reztimer ${RetryRezDelay}s
		} else /if (${Me.Book[Resurrection]} && ${Me.CurrentMana}>${Spell[Resurrection].Mana}) {
			/docommand /dgt \ag Rezzing ${RezName}
			/call SpellQueue "Resurrection" ${RezID}
			/alert add 3 id ${RezID}
			/varset reztimer ${RetryRezDelay}s
		} else /if (${Me.Book[Resusciate]} && ${Me.CurrentMana}>${Spell[Resusciate].Mana}) {
			/docommand /dgt \ag Rezzing ${RezName}
			/call SpellQueue "Resusciate" ${RezID}
			/alert add 3 id ${RezID}
			/varset reztimer ${RetryRezDelay}s
		}
	} else /if (${Spawn[pccorpse ${Me} noalert 3 radius 100 zradius 50].ID}) {
		/hidecorpse npc
		/varset RezID ${Spawn[pccorpse ${Me} noalert 3 radius 100 zradius 50].ID}
		/varset RezName ${Spawn[pccorpse noalert 3 group radius 100 zradius 50].Name}
		/target id ${RezID}
		/delay 5 ${Target.ID}==${RezID}
		/if (${Target.Distance}>25) /corpse
		/delay 5 ${Target.Distance}<25
		/if (${Me.AltAbilityReady[Blessing of Resurrection]}) {
			/docommand /dgt \ag Battle rezzing ${RezName}
			/call AANow 3800 ${RezID}
			/delay 4s !${Me.Casting.ID}
			/alert add 3 id ${RezID}
			/varset reztimer ${RetryRezDelay}s
		} else /if ((${FindItem[${epicwand}].ID}) && (${FindItem[${epicwand}].Timer}==0) && !${Me.AltAbility[3800]}) {
			/docommand /dgt \ag Battle rezzing ${RezName}
			/cast item "${epicwand}"
			/delay 10s !${Me.Casting.ID}
			/alert add 3 id ${RezID}
			/varset reztimer ${RetryRezDelay}s
		} else /if (${Me.Book[Reviviscence]} && ${Me.CurrentMana}>${Spell[Reviviscence].Mana} && !${Me.AltAbility[Blessing of Resurrection]}) {
			/docommand /dgt \ag Battle rezzing ${RezName}
			/call SpellQueue "Reviviscence" ${RezID}
			/alert add 3 id ${RezID}
			/varset reztimer ${RetryRezDelay}s
		}
	}
/return
|----------------------------------------------------------------------------
|- SUB: BuffCheck
|----------------------------------------------------------------------------
Sub BuffCheck
	/if (${SpawnCount[pccorpse group radius ${setMaxRezRange}]}) /return
	/if (${SpawnCount[pccorpse group raid ${setMaxRezRange}]}) /return

	/if (${Me.Buff[Spiritual Vi].ID}) /blockspell add me ${Spell[${Me.Buff[Spiritual Vi]}].ID}
	/if (${Me.Buff[Focus].ID}) /blockspell add me ${Spell[${Me.Buff[Focus]}].ID}
	/if (!${Me.Buff[${SelfBuff}].ID} && !${Me.Casting.ID} && ${Spell[${SelfBuff}].Stacks} && ${usedruid}==0 && ${Me.Book[${SelfBuff}]} && ${Me.CurrentMana}>${Spell[${SelfBuff}].Mana}) {
		/call SpellQueue "${SelfBuff}" ${Me.ID}
	} else /if (!${Me.Buff[${GroupHealProcBuff}].ID} && !${Me.Casting.ID} && ${Spell[${GroupHealProcBuff}].Stacks} && ${Me.Book[${GroupHealProcBuff}]} && ${Me.CurrentMana}>${Spell[${GroupHealProcBuff}].Mana}) {
		/call SpellQueue "${GroupHealProcBuff}" ${Me.ID}
	} else /if (!${Me.Aego.ID} && !${Me.Skin.ID} && !${Me.Symbol.ID} && ${Me.Book[${GroupBuff}]} && !${Spell[${Me.Buff[${GroupBuff}]}].ID} && ${Me.CurrentMana}>${Spell[${GroupBuff}].Mana}) {
		/call SpellQueue "${GroupBuff}" ${Me.ID}
	} else /if (!${Me.Casting.ID} && ${Spell[${SymbolBuff}].Range}>${Spawn[${SymbolBuffRecast}].Distance} && ${Spawn[${SymbolBuffRecast}].ID} && !${Spawn[${SymbolBuffRecast}].Hovering} && ${Me.Book[${SymbolBuff}]} && ${Me.CurrentMana}>${Spell[${SymbolBuff}].Mana} && ${bufftimer}==0) {
		/call SpellQueue "${SymbolBuff}" ${Spawn[${SymbolBuffRecast}].ID}
		/varset SymbolBuffRecast 0
	} else /if (!${Me.Casting.ID} && ${Spell[${HPBuff}].Range}>${Spawn[${HPBuffRecast}].Distance} && ${Spawn[${HPBuffRecast}].ID} && !${Spawn[${HPBuffRecast}].Hovering} && ${Me.Book[${HPBuff}]} && ${Me.CurrentMana}>${Spell[${HPBuff}].Mana} && ${bufftimer}==0) {
		/call SpellQueue "${HPBuff}" ${Spawn[${HPBuffRecast}].ID}
		/varset HPBuffRecast 0
	} else /if (!${Me.Casting.ID} && ${Spell[${TankBuff}].Range}>${Spawn[${ShiningBuffRecast}].Distance} && ${Spawn[${ShiningBuffRecast}].ID} && !${Spawn[${ShiningBuffRecast}].Hovering} && ${Me.Book[${TankBuff}]} && ${Me.CurrentMana}>${Spell[${TankBuff}].Mana} && ${bufftimer}==0) {
		/call SpellQueue "${TankBuff}" ${Spawn[${ShiningBuffRecast}].ID}
		/varset ShiningBuffRecast 0
	}
/return	
|----------------------------------------------------------------------------
|- SUB: DA Logic 
|----------------------------------------------------------------------------
Sub DALogic
	/if (${Me.Song["Touch of the Divine"].ID}) {
		/echo Touch of the Divine detected!
		/removebuff Touch of the Divine
		/delay 5 !${Me.Song["Touch of the Divine"].ID}
    }
	/call AggroCheck
/return
|----------------------------------------------------------------------------
|- SUB: Aggro Check
|----------------------------------------------------------------------------
Sub AggroCheck
	/if (${Me.AltAbilityReady[Divine Peace]}) {
		/call AANow ${Me.AltAbility[Divine Peace].ID}
	} else /if (${Me.AltAbilityReady[Sanctuary]}) {
		/call AANow ${Me.AltAbility[Sanctuary].ID}
	} else /if (${Me.AltAbilityReady[Silent Casting]}) {
		/call AANow ${Me.AltAbility[Silent Casting].ID}
	}
/return
|----------------------------------------------------------------------------
|- SUB: Misc Events
|----------------------------------------------------------------------------
Sub Event_GoMana
	/varset GoMana 1
	/timed 180 /varset GoMana 0
	/call Healgroup
/return

Sub Event_GoMoff
/varset GoMana 0
/return
|----------------------------------------------------------------------------
|- SUB: Symbol - HP Buff Single use
|----------------------------------------------------------------------------
Sub Event_Chat(string ChatType,string ChatSender,string ChatText)
	/if (${Spawn[pc ${ChatSender}].ID} && ${ChatType.Equal[tell]}) /mqlog ${ChatSender} -- ${ChatText}
	/if (${Spawn[${ChatSender.Right[-2].Left[-1]}].ID}) {
		/if (${Select[${ChatText},symbol,Symbol,SYMBOL]} && (${Spawn[${ChatSender.Right[-2].Left[-1]}].Distance}<100)) /varset SymbolBuffRecast ${Spawn[${ChatSender.Right[-2].Left[-1]}].ID}
		/if (${Select[${ChatText},hpbuff,HPBuff,HPBUFF,HpBuff,Hpbuff,HPbuff]} && (${Spawn[${ChatSender.Right[-2].Left[-1]}].Distance}<100)) /varset HPBuffRecast ${Spawn[${ChatSender.Right[-2].Left[-1]}].ID}
		/if (${Select[${ChatText},Shining,shining]} && (${Spawn[${ChatSender.Right[-2].Left[-1]}].Distance}<100)) /varset ShiningBuffRecast ${Spawn[${ChatSender.Right[-2].Left[-1]}].ID}
		/if (${Select[${ChatText},Cure,cure,CURE]} && (${Spawn[${ChatSender.Right[-2].Left[-1]}].Distance}<200)) /call SingleCure ${Spawn[${ChatSender.Right[-2].Left[-1]}].ID}
		/if (${Select[${ChatText},RC,Radiant,GC]} && (${Spawn[${ChatSender.Right[-2].Left[-1]}].Distance}<200)) /call GroupCure ${Spawn[${ChatSender.Right[-2].Left[-1]}].ID}
	}
/return
|----------------------------------------------------------------------------
|- SUB: SingleCure
|----------------------------------------------------------------------------
Sub SingleCure(int cureid)
	/varset CureTimer 10s
	/if ((${Me.SpellReady[${bigheal1}]}) && ${Me.CurrentMana}>${Spell[${bigheal1}].Mana}) {
		/call SpellQueue "${bigheal1}" ${cureid}
	} else /if ((${Me.SpellReady[${bigheal2}]}) && ${Me.CurrentMana}>${Spell[${bigheal2}].Mana}) {
		/call SpellQueue "${bigheal2}" ${cureid}
	} else /if (${Me.AltAbilityReady[Purify Soul]} && !${Me.Casting.ID}) {
		/call AANow ${Me.AltAbility[Purify Soul].ID} ${cureid}
	}
/return
|----------------------------------------------------------------------------
|- SUB: GroupCure
|----------------------------------------------------------------------------
Sub GroupCure(int cureid)
	/varset CureTimer 10s
	/if (${Me.AltAbilityReady[Radiant Cure]}) {
		/call AANow ${Me.AltAbility[Radiant Cure].ID} ${cureid}
	} else /if (${Me.AltAbilityReady[Group Purify Soul]}) {
		/call AANow ${Me.AltAbility[Group Purify Soul].ID} ${cureid}
	} else /if (${Me.AltAbilityReady[Purify Soul]} && !${Me.Casting.ID}) {
		/call AANow ${Me.AltAbility[Purify Soul].ID} ${cureid}
	}
	/varset CureCount 0
	/varset CureID 0
/return
|----------------------------------------------------------------------------
|- SUB: OtherCure - Used for curing Corruption, Snare and Mez
|----------------------------------------------------------------------------
Sub OtherCure(int cureid)
	/varset CureTimer 10s
	/if (${Me.ID}==${cureid} && ${Me.AltAbilityReady[Purified Spirits]}) {
		/call AANow ${Me.AltAbility[Purified Spirits].ID} ${cureid}
	} else /if (${Me.AltAbilityReady[Group Purify Soul]}) {
		/call AANow ${Me.AltAbility[Group Purify Soul].ID} ${cureid}
	} else /if (${Me.AltAbilityReady[Purify Soul]} && !${Me.Casting.ID}) {
		/call AANow ${Me.AltAbility[Purify Soul].ID} ${cureid}
	}
/return
|----------------------------------------------------------------------------
|- SUB: DivineUsage
|----------------------------------------------------------------------------
Sub DivineUsage
	/varset Emeralds ${FindItem[=Emerald].StackCount}
	/varset Pearls ${FindItem[=Emerald].StackCount}
	/if ((${Emeralds}<2 && ${DivineBuff.NotEqual[Death Pact]}) || (${DivineBuff.Equal[Death Pact]} && ${Pearls}<2)) {
		/echo Unable to cast ${DivineBuff} No reagent disabling Divine Casting
		/varset DivineBuffOn 0
		/varset changetoini 1
	} else {
		/call SpellQueue "${DivineBuff}" ${assistid}
		/if ((${Macro.Return.Equal[CAST_SUCCESS]})||(${Macro.Return.Equal[CAST_TAKEHOLD]})) /varset DivineBuffRecast 0
	}
/return
|----------------------------------------------------------------------------
|- SUB: Buff Event
|----------------------------------------------------------------------------
Sub Event_Buff(string line, string Mybuff)
    /if (${Mybuff.Equal[${TankBuffMatch}]})	/varset TankBuffRecast 1
	/if (${Mybuff.Equal[${DivineBuff}]}) 	/varset DivineBuffRecast 1
/return
|----------------------------------------------------------------------------
|- SUB: ReactCure - 
|----------------------------------------------------------------------------
Sub Event_ReactCure
	/call GroupCure
/return
|----------------------------------------------------------------------------
|- SUB: TankChangeCheck
|---------------------------------------------------------------------------- 
Sub TankChangeCheck
	/if (${PetTank} && ${Group.Member[${assistname}].Pet.ID}) {
		/docommand /varset tempid ${Group.Member[${assistname}].Pet.ID}
		/if (${tempid}!=${assistid}) {
			/echo Tank ID Mismatch - Fixing it
			/varset assistid ${tempid}
		}
	} else /if (!${PetTank} && ${Group.Member[${assistname}].ID}) {
		/docommand /varset tempid ${Group.Member[${assistname}].ID}
		/if (${tempid}!=${assistid}) {
			/echo Tank ID Mismatch - Fixing it
			/varset assistid ${tempid}
		}
	}
	/if (!${Spawn[${assistid}].PctHPs}>=1) {
		/if (!${Bool[${oldtank}]}) /varset oldtank ${assistname}
		/if (!${Bool[${oldtankid}]}) /varset oldtankid ${assistid}
		/if (${Spawn[group notid ${Me.ID} radius 150].ID}) {
			/echo Tank Gone - Switching to Nearest Group Member Alive
			/varset assistname ${Spawn[group notid ${Me.ID} radius 150]}
			/varset assistid ${Spawn[group notid ${Me.ID} radius 150].ID}
			/if (${Spawn[${assistid}].Type.Equal[Pet]}) {
				/varset TnKCond .Pet.
			} else {
				/varset TnKCond .
			}
		} else {
			/echo Tank and Group Gone - Switching to Self Heal mode
			/varset assistname ${Me.Name}
			/varset assistid ${Me.ID}
			/varset TnKCond .
		}
	}
	/if (${Group.Member[${oldtank}].ID}) {
		/if (!${PetTank}) {
			/varset assistname ${oldtank}
			/varset assistid ${Group.Member[${oldtank}].ID}
			/echo Tank is Back - Switching him back to maintank
			/varset oldtank NULL
			/varset oldtankid NULL
		} else /if (${PetTank} && ${Group.Member[${oldtank}].Pet.ID}) {
			/varset assistname ${oldtank}
			/varset assistid ${Group.Member[${oldtank}].Pet.ID}
			/echo Tank is Back - Switching him back to maintank
			/varset oldtank NULL
			/varset oldtankid NULL
		}
		/if (${Spawn[${assistid}].Type.Equal[Pet]}) {
			/varset TnKCond .Pet.
		} else {
			/varset TnKCond .
		}
	}
	/if (${newtank}==1) {
		/docommand /varset assistid ${Target.ID}
		/varset newtank 0
		/if (${Spawn[${assistid}].Type.Equal[Pet]}) {
			/docommand /varset assistname ${Target.Master.Name}
			/echo Main Tank set to ${Target.Name}
			/varset TnKCond .Pet.
			/varset PetTank 1
		} else {
			/docommand /varset assistname ${Target.Name}
			/echo Main Tank set to ${assistname}
			/varset TnKCond .
			/varset PetTank 0
		}
	}
/return 